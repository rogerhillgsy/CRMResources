﻿
<!DOCTYPE html>
<html>
<head>

    <title>CRM Report - Client Connection Matrix</title>
    <meta charset="utf-8">
    <!--<link href="arup_BootStrap_MinCSS.css" rel="stylesheet">-->
    <script src="ClientGlobalContext.js.aspx" type="text/javascript"></script>
    <script src="ccrm_/JavaScripts/Lib/SDK.REST.js"></script>
    <script src="ccrm_/JavaScripts/Lib/SDK.MetaData.js" type="text/javascript"></script>
    <script src="ccrm_/JavaScripts/Lib/XrmServiceToolkit.min.js" type="text/javascript"></script>
    <script src="ccrm_/JavaScripts/D3V4.js" type="text/javascript"></script>
    <script src="ccrm_/JavaScripts/Lib/jquery_3.2.0.min" type="text/javascript"></script>
    <!--<script src="arup_BootStrap.min" rel="stylesheet"></script>-->
    <!-- Bootstrap core CSS -->
    <link href="arup_Bootstrap4.3.1.css" rel="stylesheet">

    <style type="text/css">
        body, html {
            padding: 0;
            margin: 0;
            height: 100%;
            width: 100%;
        }

        svg {
            display: block;
        }

        #connectionMatrix {
            width: 100%;
            font: 10px sans-serif;
        }


        .arc text {
            font: 10px sans-serif;
            text-anchor: middle;
        }

        .arc path {
            stroke: #fff;
        }

        .bar rect {
            fill: steelblue;
        }

        .bar text {
            fill: black;
            font: 10px sans-serif;
            text-anchor: start;
        }

        div {
            background-color: white;
            float: left;
        }

        #OpportunityForAccChart {
            width: 450px;
            height: 200px;
        }

        #OpenOpportunityChart {
            width: 580px;
            height: 200px;
        }

        .axis .domain {
            display: none;
        }

        /*body {
            font: 10px sans-serif;
        }*/

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }

        /*.bar {
            fill: steelblue;
        }*/

        .x.axis path {
            display: none;
        }

        .print {
            width: 90px;
            background-color: rgb(77, 144, 254);
            background-image: linear-gradient(to bottom, rgb(77, 144, 254), rgb(71, 135, 237));
            border: 1px solid rgb(48, 121, 237);
            color: #fff;
            vertical-align: middle;
            text-shadow: 0 1px rgba(0,0,0,0.1);
            cursor: pointer;
        }

        .printimg {
            color: #fff;
            vertical-align: middle;
            text-shadow: 0 1px rgba(0,0,0,0.1);
            cursor: pointer;
        }

        .links line {
            stroke: #999;
            stroke-opacity: 0.6;
        }

        .nodes circle {
            stroke: #fff;
            stroke-width: 1px;
        }

        .nodetext {
            pointer-events: none;
            font-size: 5px;
            font-family: 'Segoe UI';
            fill: #000000;
        }
    </style>

</head>
<body style="width: 100%;-webkit-print-color-adjust: exact" onload="OnLoad()">
    <div id="showhideNav" style="width:100%">
        <nav class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0">
            <a class="navbar-brand col-sm-3 col-md-2 mr-0" href="#">Arup</a>
        </nav>
    </div>
    <div class="container-fluid">
        <div class="row">
            <div id="maindivGraph" role="main" class="col-md-9 ml-sm-auto col-lg-10" style="padding-right:0">
                <div style="width:100%">
                    <div id="clientconnectionHelp" style="width:100%">
                        <table style="width:100%">
                            <tbody>
                                <tr>
                                    <td>
                                        <table style="width:100%">
                                            <tbody>
                                                <tr style="margin-bottom:140px;">
                                                    <td colspan="12" id="accountName" style="font-weight:bold;font-size:18pt;"></td>
                                                </tr>
                                                <tr></tr>
                                                <tr>
                                                    <td colspan="9" style="font-style: normal; font-family: 'Times New Roman'; font-size: 12pt; font-weight: 400;">CLIENT GROUPING MATRIX</td>
                                                    <td colspan="3" style="float:right;margin-right:10px;font-size:9pt">

                                                        <p style="font-size:9pt; margin-bottom:0px"><b>Help:</b> Use mouse wheel to zoom-in / zoom-out. Press mouse left click and drag the chart to navigate</p>

                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div style="width:100%">
                        <table style="width:100%; margin-left:0">
                            <tbody>
                                <tr>
                                    <td>
                                        <table style="background-color: lightgray; font-size: 10pt; font-family: Arial; width:100%">
                                            <tbody>
                                                <tr height="0">
                                                    <td style="WIDTH:13%"></td>
                                                    <td style="WIDTH:14%"></td>
                                                    <td style="WIDTH:12%"></td>
                                                    <td style="WIDTH:17%"></td>
                                                    <td style="WIDTH:14%"></td>
                                                    <td style="WIDTH:14%"></td>
                                                    <td style="WIDTH:15%"></td>
                                                </tr>
                                                <tr>
                                                    <td style="font-weight:bold"><!--Relationship Manager:--></td>
                                                    <td id="relationshipmanager"></td>
                                                    <td style="font-weight:bold"><!--Relationship Team:--></td>
                                                    <td id="relationshipteam"></td>
                                                    <td style="font-weight:bold"><!--Parent Company:--></td>
                                                    <td id="parentOrg"></td>
                                                    <td>
                                                        <div class="table-responsive" id="ConnectionButtons" style="float:right;background-color: lightgray; ">
                                                            <button id='homeButton' style='margin : 1px; float: right;background-color: white; border: 1px white; padding: 0px; cursor: pointer; background-image:url(arup_HomeIcon)' onclick="onclickHomeButton()" title="Home"> </button>
                                                            <button id='zoom_in' style='margin : 1px; float: right;background-color: white; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphzoomin' style='height:25px' title='Zoom In' /></button>
                                                            <button id='zoom_out' style='margin : 1px; float: right;background-color: white; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphzoomout' style='height:25px' title='Zoom Out' /></button>
                                                            <button id='zoom_init' style='margin : 1px; float: right;background-color: white; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphreset' style='height:25px' title='Reset Zoom' /></button>
                                                            <!--<button id='print' style='margin : 1px; float: right;background-color: white; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphprint' style='height:26px' title='Print' /></button>-->
                                                        </div>
                                                    </td>
                                                </tr>

                                            </tbody>
                                        </table>

                                    </td>


                                </tr>
                            </tbody>
                        </table>
                    </div>


                </div>

                <div class="table-responsive" id="connectionMatrix" style="width:100%; height:70%; float:left; margin-right:2px;">
                    <svg id="connForcelay" width="100%" height="100%"></svg>
                </div>


                <div class="table-responsive" style="padding-bottom: 80px">
                    <div id="connectionMatrixtable" style="width:100%;">
                        <!--<h3>Contacts with no connections</h3>-->
                        <h3><p id="p"></p></h3>
                    </div>
                </div>

            </div>
            <div id="seconddivgraph" class="col-md-2" style="margin-top:65px">

                <div id="Accountfilters" style="border:1px solid grey; padding-right:0px; padding-left:0px; font-size:9pt; width:100%">
                    <div class="list-group" style="width:100%; font-size:11pt">
                        <button type="button" class="list-group-item list-group-item-action list-group-item-secondary active">
                            Filters
                        </button>

                        <div class="panel-group" style="width:100%">
                            <div class="panel panel-info" style="width:100%; padding : 5px 5px 5px 5px">
                                <div class="panel-body" style="width:100%">
                                    <!--<Label class="list-group-item list-group-item-action list-group-item-secondary" style="cursor: pointer;">
                                        <label style="width:100%; font-size:12pt ">
                                            <input type="radio" name="RadOrg" id="Radios1" value="C" checked="checked">
                                            Connections
                                            <span class="badge badge-info badge-pill" style="float:right; background-color:#4DABF7" id="connectioncount"></span>
                                        </label>
                                    </Label>-->

                                    <Label class="list-group-item list-group-item-action" style="padding-left:30px; cursor: pointer;">
                                        <input type="checkbox" value="1" id="chkContacts" onclick="oncheckContacts()" />
                                        <label for="chkContacts" style="margin-bottom:0px">
                                            All Contacts
                                        </label>
                                        <span class="badge badge-info badge-pill" style="float:right; background-color:#4DABF7" id="contactsount"></span>
                                    </Label>
                                    <Label class="list-group-item list-group-item-action" style="padding-left:30px; cursor: pointer;">
                                        <input type="checkbox" value="1" id="chkCSuiteAndDecisionMakers" onclick="oncheckCSuiteAndDecisionMakers()" />
                                        <label for="chkCSuiteAndDecisionMakers" style="margin-bottom:0px">
                                            C-Suite and Decision Makers
                                        </label>
                                        <span class="badge badge-info badge-pill" style="float:right; background-color:#4DABF7" id="decisionmakersount"></span>
                                    </Label>
                                    <!--<Label class="list-group-item list-group-item-action" style="padding-left:30px; cursor: pointer;">
                                        <input type="checkbox" value="1" id="chkDecisionMakers" onclick="oncheckDecisionMakers()" />
                                        <label for="chkDecisionMakers" style="margin-bottom:0px">
                                            Decision Makers
                                        </label>
                                        <span class="badge badge-info badge-pill" style="float:right; background-color:#4DABF7" id="decisionmakersount"></span>
                                    </Label>
                                    <Label class="list-group-item list-group-item-action" style="padding-left:30px; cursor: pointer;">
                                        <input type="checkbox" value="1" id="chkCSuite" onclick="oncheckCSuite()" />
                                        <label for="chkCSuite" style="margin-bottom:0px">
                                            C-Suite
                                        </label>
                                        <span class="badge badge-info badge-pill" style="float:right; background-color:#4DABF7" id="csuitecount"></span>
                                    </Label>-->
                                </div>
                            </div>
                        </div>
                        <div class="panel-group" style="width:100%">
                            <div class="panel panel-info" style="width:100%; padding : 5px 5px 5px 5px">
                                <div class="panel-body" style="width:100%">
                                    <Label class="list-group-item list-group-item-action" style="padding-left:30px; cursor: pointer;">
                                        <input type="checkbox" value="1" id="chkActivities" disabled="disabled" onclick="oncheckActivities()" />
                                        <label for="chkActivities" style="margin-bottom:0px">
                                            Activities
                                        </label>
                                        <span class="badge badge-info badge-pill" style="float:right; background-color:#4DABF7" id="activitiescount"></span>
                                    </Label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="Userfilters" style="border:1px solid grey; display:none;padding-right:0px; padding-left:0px; font-size:9pt; width:100% ">
                    <div class="list-group" style="width:100%; font-size:11pt">
                        <button type="button" class="list-group-item list-group-item-action list-group-item-secondary active">
                            Filters
                        </button>
                        <Label style="cursor: pointer;" class="list-group-item list-group-item-action">
                            <input type="checkbox" value="1" id="chkShowAllConnectionsforUser" />
                            <label for="chkShowAllConnectionsforUser">Show child org connections</label>
                        </Label>
                    </div>
                </div>

                <div id="Connectionfilters" style="display:none;padding-right:0px; padding-left:0px; font-size:9pt; width:100% ">
                    <div class="list-group" style="width:100%; font-size:11pt">
                        <!--<button type="button" class="list-group-item list-group-item-action list-group-item-secondary active">
                            Filters
                        </button>
                        <Label style="cursor: pointer;" class="list-group-item list-group-item-action">
                            <input type="checkbox" value="1" id="chkMarketingList" />
                            <label for="chkMarketingList">Marketing Lists</label>
                        </Label>

                        <Label style="cursor: pointer;" class="list-group-item list-group-item-action">
                            <input type="checkbox" value="2" id="chkContactActivities" />
                            <label for="chkContactActivities">Activities</label>
                        </Label>-->

                    </div>
                    <div class="alert alert-danger" id="alert-activities" style="display:none; margin-top: 20px;">
                        <!--<strong>Activities not found </strong>-->
                    </div>
                    <div class="alert alert-danger" id="alert-marketing" style="display:none;  margin-top: 20px; ">
                        <!--<strong>Marketing Lists not found </strong>-->
                    </div>

                </div>
            </div>
        </div>
    </div>

    <script>
        var clientGroupingId, accId, accName, parentaccountid, isManagedClient, relationshipManager, accTownCity = "", accDepartment = "", accOpenOpptys = "";
        var currentselectedUserid = "";
        var childData = [];
        var childOrgAccIds = [];
        var basicProfile = [];
        var childOrgs = [];
        var relTeamMembers = [];
        var initialOrgList = [];
        var initialContactList = [];
        var isActivitiesChecked = 0;
        var sizetoggle = 0;
        function OnLoad() {
            //if we need to display report within form:Starts
            ////debugger;
            var parameters = GetGlobalContext().getQueryStringParameters().Data;
            if (parameters != undefined) {
                accId = parameters.split('&')[0].split('=')[1];
                parentaccountid = parameters.split('&')[1].split('=')[1];
                if (accId != parentaccountid) {
                    var fetchXML = "<fetch>" +
                        "<entity name='account' >" +
                        "<attribute name='accountid' />" +
                        "<filter>" +
                        "<condition attribute='accountid' operator='eq-or-above' value='" + accId + "' />" +
                        "<condition attribute='parentaccountid' operator='null' />" +
                        "</filter>" +
                        "</entity>" +
                        "</fetch>";
                    var accounts = XrmServiceToolkit.Soap.Fetch(fetchXML);

                    if (accounts.length > 0) {
                        parentaccountid = accounts[0].id;
                    }
                }
            }
            else {
                accId = "29616C21-7745-E011-9CF6-78E7D16510D0";
                parentaccountid = accId;
            }
            ////debugger;
            clientGroupingId = getUrlVars();
            try {
                PopulateBasicAccProfile();
            }
            catch (err) { }
            try {
                PopulateManagingTeamMembers();
            }
            catch (err) { }
            try {
                //$('#chkShowBidTeam').prop('disabled', true);
                //$('#chkShowInternal').prop('disabled', true);
                //$('input[name="opportunitystatus"]').prop('disabled', true);
                PopulateConnection(true, true, true, true, true);
                $('#chkContacts').prop('checked', true);
                $('#chkActivities').prop('disabled', false);
                DrawMatrixForceLayoutContacts("#connectionMatrix", "", true, true);
            }
            catch (err) { }
        }

        function getUrlVars() {
            var vars = '';
            var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
                value = value.replace("%253D", "=");
                value = value.substring(value.indexOf("=") + 1, value.length);
                vars = value;
            });
            return vars;
        }
        function PopulateManagingTeamMembers() {
            var fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='account'>" +
                "<attribute name='name' />" +
                "<attribute name='address1_city' />" +
                "<attribute name='address1_line1' />" +
                "<attribute name='ccrm_countryid' />" +
                "<attribute name='parentaccountid' />" +
                "<attribute name='ccrm_keyaccountmanagerid' />" +
                "<attribute name='ccrm_organisationtype' />" +
                "<attribute name='ccrm_keyaccount' />" +
                "<attribute name='ccrm_clienttype' />" +
                "<attribute name='ccrm_alternativename' />" +
                "<attribute name='ccrm_address1attentiondepartment' />" +
                "<attribute name='accountid' />" +
                "<order attribute='parentaccountid' descending='false' />" +
                "<order attribute='name' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ccrm_clientgroupings' operator='eq' value='" + clientGroupingId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            var userRecords = XrmServiceToolkit.Soap.Fetch(fetchXML);
            var userList = [];
            if (userRecords.length > 0) {
                for (var i = 0; i < userRecords.length; i++) {
                    //////debugger;
                    var sysuserid = userRecords[i].attributes.accountid.value;
                    var fullname = userRecords[i].attributes.name != undefined ? userRecords[i].attributes.name.value : "";
                    //var Office = userRecords[i].attributes.Office != undefined ? userRecords[i].attributes.Office.name : "";
                    //var title = userRecords[i].attributes.title != undefined ? userRecords[i].attributes.title.value : "";
                    //var business = userRecords[i].attributes.Business != undefined ? userRecords[i].attributes.Business.name : "";

                    var user = { "Name": fullname, UserID: sysuserid };
                    userList.push(user);
                    relTeamMembers.push(sysuserid);
                }
                //DrawTable("#relationshipTeam", userList, Object.keys(userList[0]));
            }
        }

        function InititializeGraphDivs() {
            if (sizetoggle == 0) {
                $("#connectionMatrix").empty();
                $("#ConnectionButtons").empty();
                $("#connectionMatrix").html("<svg id='connForcelay' width='100%' height='800'></svg>");
                $("#ConnectionButtons").html(
                    //"<button id='print' style='margin : 1px; float: right; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphprint' style='height:26px' title='Print' /></button>" +
                    "<button id='btnresize' style='margin : 1px; float: right;border: 0px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphresize' style='height:25px' title='Resize' /></button>" +
                    "<button id='zoom_init' style='margin : 1px; float: right; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphreset' style='height:25px' title='Reset Zoom' /></button>" +
                    "<button id='zoom_out' style='margin : 1px; float: right; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphzoomout' style='height:25px' title='Zoom Out' /></button> " +
                    "<button id='zoom_in' style='margin : 1px; float: right; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphzoomin' style='height:25px' title='Zoom In' /></button>" +
                    "<button id='homeButton' style='margin : 1px; float: right; border: 1px white; padding: 0px; cursor: pointer;' onclick='onclickHomeButton()'> <input type='image' src='arup_HomeIcon' style='height:25px' title='Home' /></button>"
                );
                $("#connectionMatrix").css("height", "75%");
            }
            else {
                $("#connectionMatrix").empty();
                $("#ConnectionButtons").empty();
                $("#connectionMatrix").html("<svg id='connForcelay' width='100%' height='800'></svg>");
                $("#ConnectionButtons").html(
                    //"<button id='print' style='margin : 1px; float: right; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphprint' style='height:26px' title='Print' /></button>" +
                    "<button id='btnresize' style='margin : 1px; float: right;border: 0px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphresize' style='height:25px' title='Resize' /></button>" +
                    "<button id='zoom_init' style='margin : 1px; float: right; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphreset' style='height:25px' title='Reset Zoom' /></button>" +
                    "<button id='zoom_out' style='margin : 1px; float: right; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphzoomout' style='height:25px' title='Zoom Out' /></button> " +
                    "<button id='zoom_in' style='margin : 1px; float: right; border: 1px white; padding: 0px; cursor: pointer;'> <input type='image' src='arup_graphzoomin' style='height:25px' title='Zoom In' /></button>" +
                    "<button id='homeButton' style='margin : 1px; float: right; border: 1px white; padding: 0px; cursor: pointer;'  onclick='onclickHomeButton()'> <input type='image' src='arup_HomeIcon' style='height:25px' title='Home' /></button>"
                );
                $("#connectionMatrix").css("height", "90%");
                $('#connForcelay').css("height", "1100px");

            }
        }

        function PopulateConnection(ContactAccountRoleDM, ContactAccountRoleInf, ContacAccountRoleEmp, ContactAccountRoleOthers, ContactAccountRoleCS) {
            ////debugger;
            ConnectionContactData = "";
            InititializeGraphDivs();
            InitializeHomeButtonClick();
            //new fectxml -  everything is same just modified to populate user/contact image url
            var fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='account'>" +
                "<attribute name='name' />" +
                "<attribute name='accountid' />" +
                "<attribute name='parentaccountid' />" +
                "<attribute name='ccrm_clientgroupings' />" +
                "<filter type='and'>" +
                "<condition attribute='ccrm_clientgroupings' operator='eq' value='" + clientGroupingId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            fetchXML = "?fetchXml=" + encodeURIComponent(fetchXML);
            var userList = [];
            initialOrgList = [];
            Xrm.WebApi.retrieveMultipleRecords('account', fetchXML
            ).then(function success(result) {
                for (var i = 0; i < result.entities.length; i++) {
                    var organizationid = result.entities[i]["accountid"];
                    var organizationname = result.entities[i]["name"] != undefined ? result.entities[i]["name"] : "";
                    var parentorganisationid = result.entities[i]["_parentaccountid_value"] != undefined ? result.entities[i]["_parentaccountid_value"] : "";
                    var organization = { organizationname: organizationname, organizationid: organizationid, parentorganisationid: parentorganisationid };
                    userList.push(organization);
                    initialOrgList.push(organization);
                    relTeamMembers.push(organizationid);
                }

                if (userList.length > 0) {
                    //DrawMatrixForceLayout("#connectionMatrix", userList);
                }
            },
                function (error) {
                    console.log(error.message);
                });

        }



        //   bindCountsforGraph(connectionLstTbl.length - contactLst.length, accOpenOpptys);

        //}

        function bindCountsforGraph(Connectioncount, opptycount, decisionmakercount) {
            $('#connectioncount').html(Connectioncount);
            $('#openopportunitycount').html(opptycount);
            // $('#decisionmakercount').html(decisionmakercount);
        }
        function PopulateBasicAccProfile() {

            var fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='ccrm_clientgrouping'>" +
                "<attribute name='ccrm_clientgroupingid' />" +
                "<attribute name='ccrm_name' />" +
                "<attribute name='createdon' />" +
                "<attribute name='ccrm_website' />" +
                "<attribute name='ccrm_clientgroupingtype' />" +
                "<attribute name='statuscode' />" +
                "<attribute name='statecode' />" +
                "<attribute name='ccrm_accounttype' />" +
                "<attribute name='ccrm_managingteam' />" +
                "<attribute name='ccrm_relationshipstatus' />" +
                "<attribute name='ccrm_relationshipmanager' />" +
                "<attribute name='overriddencreatedon' />" +
                "<attribute name='ownerid' />" +
                "<attribute name='modifiedon' />" +
                "<attribute name='modifiedonbehalfby' />" +
                "<attribute name='modifiedby' />" +
                "<attribute name='ccrm_managedclient' />" +
                "<attribute name='ccrm_fieldofplay' />" +
                "<attribute name='ccrm_description' />" +
                "<attribute name='createdonbehalfby' />" +
                "<attribute name='createdby' />" +
                "<attribute name='ccrm_clienttype' />" +
                "<attribute name='ccrm_clientgroupingnumber' />" +
                "<order attribute='ccrm_name' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ccrm_clientgroupingid' operator='eq' value='" + clientGroupingId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            var oppty = XrmServiceToolkit.Soap.Fetch(fetchXML);
            if (oppty.length > 0) {
                //////debugger;
                var result = oppty[0].attributes;
                var basicProfile = {
                    //accountId: result.accountid.value,
                    //address_comosite: result.address1_composite != undefined ? result.address1_composite.value : "",
                    //address1_City: result.address1_city != undefined ? result.address1_city.value : "",
                    //address1_Line1: result.address1_line1 != undefined ? result.address1_line1.value : "",
                    //address1_Line2: result.address1_line2 != undefined ? result.address1_line2.value : "",
                    //address1_Line3: result.address1_line3 != undefined ? result.address1_line3.value : "",
                    //address1_PostalCode: result.address1_postalcode != undefined ? result.address1_postalcode.value : "",
                    ////ccrm_ClientSectorPicklistName: result.ClientSectors,
                    //ccrm_ClientSectorValue: result.ClientSectors != undefined ? result.ClientSectors.value : "",
                    //ccrm_ClientType: result.Clienttype != undefined ? result.Clienttype.formattedValue : "",
                    //ccrm_keyaccountmanagerid: result.ccrm_keyaccountmanagerid != undefined ? result.ccrm_keyaccountmanagerid.id : "",
                    //ccrm_keyaccountmanagername: result.ccrm_keyaccountmanagerid != undefined ? result.ccrm_keyaccountmanagerid.name : "",
                    //ccrm_keyaccount: result.ccrm_keyaccount != undefined ? result.ccrm_keyaccount.value : false,
                    //ccrm_managingteamid: result.ManagingTeam != undefined ? result.ManagingTeam.name : "",
                    //description: result.description != undefined ? result.description.value : "",
                    name: result.ccrm_name != undefined ? result.ccrm_name.value : ""
                    //parentAccountId: result.ParentOrganisation != undefined ? result.ParentOrganisation.name : "",
                    ////primaryContactId: result.PrimaryContactId,
                    ////stateCode: result.StateCode,
                    //statusCode: result.status,
                    //telephone1: result.telephone != undefined ? result.telephone.value : "",
                    //webSiteURL: result.weburl != undefined ? result.weburl.value : "",
                    //orgdepartment: result.orgdepartment != undefined ? result.orgdepartment.value : "",
                    //orgopenopptys: result.orgopenopptys != undefined ? result.orgopenopptys.value : ""
                };
                AssociateProfileDataWithReport(basicProfile);
            }
        }
        function AssociateProfileDataWithReport(profileData) {
            //////debugger;
            //var address = '';
            //if (profileData.address1_Line1 != null && profileData.address1_Line1.length > 0) {
            //    address = address + profileData.address1_Line1.replace('\t', '').replace('\r', '').replace('\f', '') + " ";
            //}
            //if (profileData.address1_Line2 != null && profileData.address1_Line2.length > 0) {
            //    address = address + profileData.address1_Line2.replace('\t', '').replace('\r', '').replace('\f', '') + " ";
            //}
            //if (profileData.address1_Line3 != null && profileData.address1_Line3.length > 0) {
            //    address = address + profileData.address1_Line3.replace('\t', '').replace('\r', '').replace('\f', '') + " ";
            //}
            //if (profileData.address1_City != null && profileData.address1_City.length > 0) {
            //    address = address + profileData.address1_City.replace('\t', '').replace('\r', '').replace('\f', '') + " ";
            //    accTownCity = profileData.address1_City.replace('\t', '').replace('\r', '').replace('\f', '');
            //}
            //if (profileData.address1_PostalCode != null && profileData.address1_PostalCode.length > 0) {
            //    address = address + profileData.address1_PostalCode.replace('\t', '').replace('\r', '').replace('\f', '');
            //}
            //if (profileData.orgdepartment != "") {
            //    accDepartment = profileData.orgdepartment;
            //}
            //if (profileData.orgopenopptys != "") {
            //    accOpenOpptys = profileData.orgopenopptys;
            //}

            accName = profileData.name;
            //isManagedClient = profileData.ccrm_keyaccount;
            //relationshipManager = profileData.ccrm_keyaccountmanagerid;
            //relationshipManagername = profileData.ccrm_keyaccountmanagername;

            $("#accountName").text(profileData.name);
            //$("#website").text(profileData.webSiteURL);
            //$("#relationshipmanager").text(profileData.ccrm_keyaccountmanagername);
            //if (profileData.parentAccountId != null) {
            //    $("#parentOrg").text(profileData.parentAccountId);
            //}
            //$("#relationshipteam").text(profileData.ccrm_managingteamid);
            //$("#phonenum").text(profileData.telephone1);
            //$("#address").text(address);
            //$("#clientType").text(profileData.ccrm_ClientType);
            //$("#clientSector").text(profileData.ccrm_ClientSectorValue);
            //$("#clientDesc").text(profileData.description);
        }
        function DrawTable(div, data, columns) {
            d3.select(div).selectAll("table").remove();
            var relTable = d3.select(div).append('table').attr('width', '100%');
            var tabHead = relTable.append('thead');
            var tabBody = relTable.append('tbody');
            tabHead.append('tr')
                .selectAll('th')
                .data(function (d) { return columns })
                .enter()
                .append('th')
                .style('width', function (d) {
                    if (d == 'Created On' || d == 'Date Won' || d == 'Date') {
                        return '50px';
                    }
                    else if (d == 'Prob. Proj Proceed %' || d == 'Probability of Win %') {
                        return '60px';
                    }
                    else if (d == 'Project Director') {
                        return '150px';
                    }
                    else if (d == 'Full Name' || d == 'Email') {
                        return '300px';
                    }
                    else if (d == 'Job Title') {
                        return '500px';
                    }
                })
                .text(function (col) { return col; }).style('background-color', 'rgba(158, 158, 158, 0.5)');


            var rows = tabBody.selectAll('tr')
                .data(data)
                .enter()
                .append('tr').style('background-color', function (d, i) {
                    if (i % 2 == 0) {
                        return 'rgba(158, 158, 158, 0.05)';
                    }
                    else {
                        return 'rgba(158, 158, 158, 0.2)';
                    }
                });

            rows.selectAll('td')
                .data(function (row) {
                    return columns.map(function (column) {
                        return { column: column, value: row[column], OpportunityId: row["OpportunityId"] };
                    })
                })
                .enter()
                .append('td')
                .style('text-align', function (d) {
                    if (d.column == 'Created On' || d.column == 'Date' || d.column == 'Arup Start Date' || d.column == 'Date Won'
                        || d.column == 'Total Fee Income' || d.column == 'Prob. Proj Proceed %' || d.column == 'Probability of Win %') {
                        return 'center';
                    }
                })
                .html(function (d) {
                    if (div == '#top10OpenOportunities' && d.column == 'Title') {
                        return '<a href=\"' + GetGlobalContext().getClientUrl() + '/main.aspx?etc=3&pagetype=entityrecord&id=%7b' + d.OpportunityId + '%7d' + '\" target=\"_blank\">' + d.value + '</a>';
                    }
                    else {
                        return d.value;
                    }
                });
        }
        function DrawMatrixTable(div, data) {
            var nested = data.filter(function (currentValue, index, arr) { if (index >= arr.length - 10) return currentValue; });

            var columns = Object.keys(data[0]).slice(0, 2);

            var matrixData = [];

            var ContactRows = d3.nest()
                .key(function (d) { return d['Contact']; })
                .rollup(function (leaves) {
                    leaves.forEach(function (leave) {
                        matrixData.push({ key: leave['Contact'], value: leave['CRM User'] });

                    })
                    return leaves[0];
                })
                .entries(nested);

            var crmusers = d3.nest()
                .key(function (d) { return d['CRM User']; })
                .entries(nested);

            crmusers.sort(function (a, b) {

                if (a.key < b.key) {
                    return -1;
                }
                if (a.key > b.key) {
                    return 1;
                }
                // a must be equal to b
                return 0;
            }).map(function (d) { columns.push(d.key); });

            var relTable = d3.select(div).append('table');
            var tabHead = relTable.append('thead');
            var tabBody = relTable.append('tbody');

            tabHead.append('tr')
                .selectAll('th')
                .data(function (d) { return columns })
                .enter()
                .append('th')
                .text(function (col) { return col; }).style('background-color', 'lightgray');

            var rows = tabBody.selectAll('tr')
                .data(ContactRows)
                .enter()
                .append('tr');

            rows.selectAll('td')
                .data(function (row) {
                    return columns.map(function (column) {
                        //if (row['CRM User'] == column) {
                        //    return { column: column, value: row[column], Color: 'gray' };
                        //}
                        //else {
                        //    return { column: column, value: row[column], Color: 'lightgray' };
                        //}
                        var exist = matrixData.filter(function (c, i, a) {
                            if (c.value == column && c.key == row.key) { return c; }
                        })
                        if (exist.length > 0) {
                            return { column: column, value: "", Color: 'gray' };
                        }
                        else {
                            return { column: column, value: row.value[column], Color: 'lightgray' };
                        }
                    })
                })
                .enter()
                .append('td')
                .text(function (d) { return d.value }).style('background-color', function (d) { return d.Color });
        }
        var currentscale = 1.5;



        function DrawMatrixForceLayout(div, conData, isUserClick) {
            ////debugger;
            if (isUserClick == undefined)
                isUserClick = false;

            var nodelink = Object();
            nodelink.nodes = [];
            nodelink.links = [];

            if (!isUserClick) {
                nodelink.nodes.push({
                    id: accName, name: accName, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                    //id: accName, name: accName, group: 1, rad: 10, imageUrl: '/%7B637275430220018341%7D/WebResources/arup_collaborate',height:30, width:30
                });
            }

            for (var i = 0; i < conData.length; i++) {

                if (!isUserClick) {
                    nodelink.nodes.push({
                        id: conData[i].organizationid, name: conData[i].organizationname, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                    });
                }
            }
            //var user = { organizationname: fullname, organizationid: sysuserid, ccrm_clientgroupings: ccrm_clientgroupings };
            for (var i = 0; i < conData.length; i++) {
                if (conData[i].parentorganisationid == "") {
                    if (!isUserClick)
                        nodelink.links.push({ source: accName, target: conData[i].organizationid, value: 2 });
                }
            }
            for (var i = 0; i < conData.length; i++) {
                if (conData[i].parentorganisationid != "") {

                    var parentacchierarchy = '';
                    var _parentaccountid_value = '';
                    _parentaccountid_value = conData[i].parentorganisationid;
                    var hierarchyCount = 0;
                    do {
                        hierarchyCount++;
                        var req = new XMLHttpRequest();
                        req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v9.1/accounts(" + _parentaccountid_value + ")?$select=accountid,name,_parentaccountid_value,parentaccountid", false);
                        req.setRequestHeader("OData-MaxVersion", "4.0");
                        req.setRequestHeader("OData-Version", "4.0");
                        req.setRequestHeader("Accept", "application/json");
                        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                        req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
                        req.onreadystatechange = function () {
                            if (this.readyState === 4) {
                                req.onreadystatechange = null;
                                if (this.status === 200) {
                                    var result = JSON.parse(this.response);
                                    //
                                    var isNodeDuplicate = false;
                                    for (var k = 0; k < nodelink.nodes.length; k++) {
                                        if (nodelink.nodes[k].id == result["accountid"]) {
                                            isNodeDuplicate = true;
                                            break;
                                        }
                                    }
                                    if (isNodeDuplicate == false) {
                                        nodelink.nodes.push({
                                            id: conData[i].parentorganisationid, name: result["name"], group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                                        });
                                    }
                                    //
                                    _parentaccountid_value = result["_parentaccountid_value"];
                                    if (result["_parentaccountid_value"] != undefined && result["_parentaccountid_value"] != null) {
                                        _parentaccountid_value = result["_parentaccountid_value"];
                                        if (parentacchierarchy == '')
                                            parentacchierarchy = conData[i].organizationid + "," + conData[i].parentorganisationid + "," + _parentaccountid_value;
                                        else
                                            parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;
                                    }
                                    else {
                                        _parentaccountid_value = "nodata";
                                    }
                                } else {
                                    //console.(this.statusText);
                                }
                            }
                        };
                        req.send();

                        if (_parentaccountid_value == "nodata") {
                            if (hierarchyCount == 1)
                                parentacchierarchy = "nodata";
                            //break;
                        }
                        //if (parentacchierarchy == '')
                        //    parentacchierarchy = _parentaccountid_value;
                        //else if (parentacchierarchy != 'nodata' && _parentaccountid_value != "nodata")
                        //    parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;

                    } while (_parentaccountid_value != "nodata");

                    if (parentacchierarchy != "nodata" && parentacchierarchy != "" && parentacchierarchy != null && parentacchierarchy != undefined) {
                        var splithierarchy = parentacchierarchy.split(",");
                        splithierarchy.reverse();
                        for (var j = 0; j < splithierarchy.length; j++) {
                            if (j == 0) {
                                //nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == accName && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                }
                            }
                            else {
                                //nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == splithierarchy[j - 1] && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                }
                            }
                        }
                    }
                    else if (parentacchierarchy == "nodata") {
                        var isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == accName && nodelink.links[k].target == conData[i].parentorganisationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: accName, target: conData[i].parentorganisationid, value: 2 });
                        }

                        isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == conData[i].parentorganisationid && nodelink.links[k].target == conData[i].organizationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: conData[i].parentorganisationid, target: conData[i].organizationid, value: 2 });
                        }
                    }
                }
            }


            ////debugger;

            var svgwidth = $("#connForcelay").width()

            var svg = d3.select("#connForcelay"),
                width = +svgwidth,
                height = +svg.attr("height");

            var zoom = d3.zoom().scaleExtent([1 / 2, 4]).on("zoom", zoomed);

            svg.call(zoom);


            //svg.append("rect")
            //    .attr("width", width)
            //    .attr("height", height)
            //    .style("fill", "none")
            //    .style("pointer-events", "all");

            var g = svg.append("g");


            //////////////////////////
            var config = {
                "avatar_size": 10
            }

            var body = d3.select("body");
            var defs = svg.append('svg:defs');
            data = [{
                posx: 30,
                posy: 20,
                posx1: 25,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Client Grouping",
                width: 20
            }, {
                posx: 170,
                posy: 20,
                posx1: 165,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Organisations",
                width: 20
            }

            ];

            data.forEach(function (d, i) {
                svg.append("circle")
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)
                    .style("stroke-width", 1)
                    .attr("fill", d.color)
                    .style("stroke", d.color)

                svg.append('clipPath')
                    .attr('id', 'clipObj' + i)
                    .append('circle')
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)

            })

            data.forEach(function (d, i) {
                var xaxis, yaxis, width
                if (d.label == "Organisations" || d.label == "Client Grouping") {
                    width = config.avatar_size * 3;
                    xaxis = parseInt(d.posx - (config.avatar_size + config.avatar_size * .5));
                    yaxis = parseInt(d.posy - (config.avatar_size + config.avatar_size * .5));
                }
                else {
                    width = config.avatar_size + config.avatar_size * .1;
                    xaxis = parseInt(d.posx - config.avatar_size + config.avatar_size * .45);
                    yaxis = parseInt(d.posy - config.avatar_size + config.avatar_size * .45)
                }
                svg.append('image')
                    .attr('xlink:href', d.img)
                    .attr('width', width)
                    .attr('height', width)
                    .attr('x', xaxis)
                    .attr('y', yaxis)
                    // .attr('transform', 'translate(' + parseInt(d.posx1) + ',' + parseInt(d.posy1) + ')')
                    // .attr('transform', 'translate(' + parseInt(d.posx - config.avatar_size + config.avatar_size * .45) + ',' + parseInt(d.posy - config.avatar_size + config.avatar_size * .45) + ')')
                    .attr('clip-path', "url(#clipObj" + i + ")")

            })
            var text = svg.selectAll("text")
                .data(data)
                .enter()
                .append("text");


            var textLabels = text
                .attr("x", function (d) { return d.posx + 15; })
                .attr("y", function (d) { return d.posy + 5; })
                .text(function (d) { return d.label; });


            ////////////////////////////



            function zoomed() {
                g.attr('transform', 'translate(' + d3.event.transform.x + ',' + d3.event.transform.y + ') scale(' + d3.event.transform.k + ')');
                currentscale = d3.event.transform.k;
            };

            if (currentscale != "") {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleTo, currentscale);

            }

            function transition(zoomLevel) {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleBy, zoomLevel);
                //.call(zoom.transform, transform);
                //.on("end", function() { canvas.call(transition); });
            }

            d3.selectAll('button').on('click', function () {
                if (this.id === 'zoom_in') {
                    transition(1.2); // increase on 0.2 each time
                }
                if (this.id === 'zoom_out') {
                    transition(0.8); // deacrease on 0.2 each time
                }
                if (this.id === 'zoom_init') {
                    svg.transition()
                        .delay(100)
                        .duration(700)
                        .call(zoom.scaleTo, 1.5); // return to initial state
                }
                if (this.id === 'btnresize') {
                    if (sizetoggle == 0) {
                        $(div).css("height", "90%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "1100px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-10').addClass('col-md-9 ml-sm-auto col-lg-12');
                        //$('#seconddivgraph').hide();
                        $('#clientconnectionHelp').hide();
                        $('#showhideNav').hide();
                        $('#seconddivgraph').css({ 'margin-top': '0px' });

                        sizetoggle = 1;
                    }
                    else {
                        $(div).css("height", "75%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "800px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-12').addClass('col-md-9 ml-sm-auto col-lg-10');
                        //$('#seconddivgraph').show();
                        $('#clientconnectionHelp').show();
                        $('#showhideNav').show();
                        $('#seconddivgraph').css({ 'margin-top': '65px' });
                        sizetoggle = 0;
                    }
                }

            });

            var color = d3.scaleOrdinal(d3.schemeCategory20);


            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function (d) { return d.id; }).distance(function (d, i) { return 30 + i }))
                .force("charge", d3.forceManyBody().strength(-100))
                .force("center", d3.forceCenter(width / 2, height / 2));


            var link = g.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(nodelink.links)
                .enter().append("line")
                .style("stroke-dasharray", (0, function (d) {
                    if (d.value == 1) {
                        return 3;
                    }
                    else { return 0; }
                }))
                .style('stroke', function (d) {
                    //////debugger;
                    if (isManagedClient) {
                        if (d.source == relationshipManager || d.target == relationshipManager) {
                            return "#28AF73";
                        }
                        else if (relTeamMembers.indexOf(d.source) > -1 || relTeamMembers.indexOf(d.target) > -1) {
                            return "#A0235F";
                        }
                    }
                })
                .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = g.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodelink.nodes)
                .enter().append("g")
                .on('dblclick', releasenode)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            var circle = node.append("circle")
                .attr("r", function (d) { return d.rad; })
                .attr("fill", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke-width", function (d) { return GetNodeBackGrdStrokeWidth(d) })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent);
                    return tooltip.style("visibility", "visible");
                    // tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");

                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            // add circle clip
            var clipPath = node.append("clipPath")
                .attr("id", function (d, i) {
                    return "clipCircle_" + i
                })
                .append("circle")
                .attr("r", function (d) { return d.rad });


            var tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("z-index", "12")
                .style("visibility", "hidden")
                .style("background", "#5C9BD1")
                .style("color", "white")
                .style("padding", "5px")
                .style("margin", "2px")
                .style("font-size", "12px")
                .style("box-shadow", "0px 5px 15px 0px rgba(0,0,0,0.3)")
                .text("a simple tooltip");

            var image = node.append('svg:image').attr('class', 'entityImage').attr('xlink:href', function (d) {
                if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                    return d.imageUrl;
                }
                else {
                    return 'arup_/Images/Contact.png';
                }
            })
                .attr('width', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr('height', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr("clip-path", function (d, i) { return "url(#clipCircle_" + i + ")" })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent); return tooltip.style("visibility", "visible");

                    //  tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");
                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            var nodeText = node.append('svg:text').attr('class', 'nodetext').text(function (d) {
                var name = d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
                if (name.length > 20) {
                    name = name.substring(0, 20) + "...";
                }
                if (isManagedClient) {
                    if (d.id == relationshipManager) {
                        return name + " (RM)";
                    }
                    else if (relTeamMembers.indexOf(d.id) > -1) {
                        return name + " (RT)";
                    }
                    else {
                        return name;
                    }
                }
                return name;
            }).style("text-anchor", "middle");


            //var title = node.append("title")
            //     .text(function (d) { return d.id; });

            simulation
                .nodes(nodelink.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(nodelink.links);

            function ticked() {
                link
                    .attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                circle
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                clipPath
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                image
                    .attr("x", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.x - d.rad - d.rad * .5;
                        }
                        else {
                            return d.x - d.rad + d.rad * .45;
                        }
                    })
                    .attr("y", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.y - d.rad - d.rad * .5;
                        }
                        else {
                            return d.y - d.rad + d.rad * .45;
                        }

                    });


                nodeText
                    .attr("dx", function (d) { return d.x - function (d) { return d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "") }.length / 2 * 3; })
                    .attr("dy", function (d) {
                        if (d.group == 1) {
                            return d.y - 11;
                        }
                        else if (d.group == 2) {
                            return d.y - 8;
                        }
                        else if (d.group == 6) {
                            return d.y - 11;
                        }
                        else {
                            return d.y - 5;
                        }
                    });


            }


            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) simulation.alphaTarget(0);
                //d.fx = null;
                //d.fy = null;
                d.fx = d.x;
                d.fy = d.y;
            }

            function releasenode(d) {
                //d.fx = false; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
                //force.resume();
                if (!d3.event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            ////////////////////////////////////////////////////////////////////////////////

            function connectedNodes(d) {
                var connectedlinks = link.filter(function (e) {
                    //return e.source.id == d.id || e.target.id == d.id; //connected links
                    if (e.source.id == d.id || e.target.id == d.id) {
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.1);
                        return d.id;
                    }
                }).style('stroke', 'red')
                    .attr('r', 15);


                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.1)
                        .attr('r', 15);
            }
            function removehighlighting(d) {
                var connectedlinks = link.filter(function (e) {
                    if (e.source.id == d.id || e.target.id == d.id) { //connected links
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.6);
                        return d.id;
                    }
                })
                    .style('stroke', function (d) {
                        //////debugger;
                        if (isManagedClient) {
                            if (d.source.id == relationshipManager || d.target.id == relationshipManager) {
                                return "#28AF73";
                            }
                            else if (relTeamMembers.indexOf(d.source.id) > -1 || relTeamMembers.indexOf(d.target.id) > -1) {
                                return "#A0235F";
                            }
                            else return '#999'
                        }
                        else return '#999'

                    }).attr('r', 15)

                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.6)
                        .attr('r', 15);

            }
        }

        function DrawMatrixForceLayout1(div, conData, uniqueOrgList, activityList, isUserClick) {
            //debugger;
            if (isUserClick == undefined)
                isUserClick = false;

            var nodelink = Object();
            nodelink.nodes = [];
            nodelink.links = [];

            if (!isUserClick) {
                nodelink.nodes.push({
                    id: accName, name: accName, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                });
            }

            for (var i = 0; i < uniqueOrgList.length; i++) {

                if (!isUserClick) {
                    nodelink.nodes.push({
                        id: uniqueOrgList[i].organizationid, name: uniqueOrgList[i].organizationname, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                    });
                }
            }


            if (activityList.length > 0) {
                for (var i = 0; i < conData.length; i++) {
                    var hasActivitiesInLast6Months = 'No';
                    for (var j = 0; j < activityList.length; j++) {
                        if (conData[i].contactid == activityList[j].parentcustomerid) {
                            hasActivitiesInLast6Months = 'Yes';
                            nodelink.nodes.push({
                                id: conData[i].contactid, name: conData[i].contactname, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + conData[i].contactimage, role: conData[i].role, hasActivitiesInLast6Months: 'Yes'
                            });
                            break;
                        }
                    }
                    if (hasActivitiesInLast6Months == 'No') {
                        nodelink.nodes.push({
                            id: conData[i].contactid, name: conData[i].contactname, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + conData[i].contactimage, role: conData[i].role
                        });
                    }
                }
            }
            else {
                for (var i = 0; i < conData.length; i++) {
                    if (!isUserClick) {
                        nodelink.nodes.push({
                            id: conData[i].contactid, name: conData[i].contactname, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + conData[i].contactimage, role: conData[i].role
                        });
                    }
                }
            }

            //for (var i = 0; i < uniqueOrgList.length; i++) {

            //    if (!isUserClick)
            //        //nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid, value: 2 });
            //        nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid });
            //}

            //*****
            for (var i = 0; i < uniqueOrgList.length; i++) {
                if (uniqueOrgList[i].parentorganisationid == "") {
                    if (!isUserClick)
                        nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid, value: 2 });
                }
            }
            for (var i = 0; i < uniqueOrgList.length; i++) {
                if (uniqueOrgList[i].parentorganisationid != "") {

                    var parentacchierarchy = '';
                    var _parentaccountid_value = '';
                    _parentaccountid_value = uniqueOrgList[i].parentorganisationid;
                    var hierarchyCount = 0;
                    do {
                        hierarchyCount++;
                        var req = new XMLHttpRequest();
                        req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v9.1/accounts(" + _parentaccountid_value + ")?$select=accountid,name,_parentaccountid_value,parentaccountid", false);
                        req.setRequestHeader("OData-MaxVersion", "4.0");
                        req.setRequestHeader("OData-Version", "4.0");
                        req.setRequestHeader("Accept", "application/json");
                        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                        req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
                        req.onreadystatechange = function () {
                            if (this.readyState === 4) {
                                req.onreadystatechange = null;
                                if (this.status === 200) {
                                    var result = JSON.parse(this.response);
                                    //
                                    var isNodeDuplicate = false;
                                    for (var k = 0; k < nodelink.nodes.length; k++) {
                                        if (nodelink.nodes[k].id == result["accountid"]) {
                                            isNodeDuplicate = true;
                                            break;
                                        }
                                    }
                                    if (isNodeDuplicate == false) {
                                        nodelink.nodes.push({
                                            id: uniqueOrgList[i].parentorganisationid, name: result["name"], group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                                        });
                                    }
                                    //
                                    _parentaccountid_value = result["_parentaccountid_value"];
                                    if (result["_parentaccountid_value"] != undefined && result["_parentaccountid_value"] != null) {
                                        _parentaccountid_value = result["_parentaccountid_value"];
                                        if (parentacchierarchy == '')
                                            parentacchierarchy = uniqueOrgList[i].organizationid + "," + uniqueOrgList[i].parentorganisationid + "," + _parentaccountid_value;
                                        else
                                            parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;
                                    }
                                    else {
                                        _parentaccountid_value = "nodata";
                                    }
                                } else {
                                    //console.(this.statusText);
                                }
                            }
                        };
                        req.send();

                        if (_parentaccountid_value == "nodata") {
                            if (hierarchyCount == 1)
                                parentacchierarchy = "nodata";
                            //break;
                        }
                        //if (parentacchierarchy == '')
                        //    parentacchierarchy = _parentaccountid_value;
                        //else if (parentacchierarchy != 'nodata' && _parentaccountid_value != "nodata")
                        //    parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;

                    } while (_parentaccountid_value != "nodata");

                    if (parentacchierarchy != "nodata" && parentacchierarchy != "" && parentacchierarchy != null && parentacchierarchy != undefined) {
                        var splithierarchy = parentacchierarchy.split(",");
                        splithierarchy.reverse();
                        for (var j = 0; j < splithierarchy.length; j++) {
                            if (j == 0) {
                                //nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == accName && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                }
                            }
                            else {
                                //nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == splithierarchy[j - 1] && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                }
                            }
                        }
                    }
                    else if (parentacchierarchy == "nodata") {
                        var isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == accName && nodelink.links[k].target == uniqueOrgList[i].parentorganisationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: accName, target: uniqueOrgList[i].parentorganisationid, value: 2 });
                        }

                        isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == uniqueOrgList[i].parentorganisationid && nodelink.links[k].target == uniqueOrgList[i].organizationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: uniqueOrgList[i].parentorganisationid, target: uniqueOrgList[i].organizationid, value: 2 });
                        }
                    }
                }
            }
            //*****
            ////debugger;

            for (var i = 0; i < conData.length; i++) {
                for (var j = 0; j < uniqueOrgList.length; j++) {
                    if (conData[i].organizationid == uniqueOrgList[j].organizationid) {
                        if (!isUserClick) {
                            var nodelinkIndex = uniqueOrgList.length + 1 + i + 1;
                            //nodelink.links.push({ source: uniqueOrgList[j].organizationid, target: conData[i].contactid, value: nodelinkIndex });
                            nodelink.links.push({ source: uniqueOrgList[j].organizationid, target: conData[i].contactid });
                            break;
                        }
                    }
                }
            }

            var svgwidth = $("#connForcelay").width()

            var svg = d3.select("#connForcelay"),
                width = +svgwidth,
                height = +svg.attr("height");

            var zoom = d3.zoom().scaleExtent([1 / 2, 4]).on("zoom", zoomed);

            svg.call(zoom);

            var g = svg.append("g");


            //////////////////////////
            var config = {
                "avatar_size": 10
            }

            var body = d3.select("body");
            var defs = svg.append('svg:defs');
            data = [{
                posx: 30,
                posy: 20,
                posx1: 25,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Client Grouping",
                width: 20
            }, {
                posx: 170,
                posy: 20,
                posx1: 165,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Organisations",
                width: 20
            }, {
                posx: 310,
                posy: 20,
                posx1: 305,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#32325F",
                "label": "Contacts",
                width: 10
            }
                , {
                posx: 450,
                posy: 20,
                posx1: 445,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#28AF73",
                "label": "Decision Makers",
                width: 10
            },
            {
                posx: 590,
                posy: 20,
                posx1: 585,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                //color: "#F05023",
                color: "#FFA500",
                "label": "C-Suite",
                width: 10
            }
            ];

            data.forEach(function (d, i) {
                svg.append("circle")
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)
                    .style("stroke-width", 1)
                    .attr("fill", d.color)
                    .style("stroke", d.color)

                svg.append('clipPath')
                    .attr('id', 'clipObj' + i)
                    .append('circle')
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)

            })

            data.forEach(function (d, i) {
                var xaxis, yaxis, width
                if (d.label == "Organisations" || d.label == "Client Grouping") {
                    width = config.avatar_size * 3;
                    xaxis = parseInt(d.posx - (config.avatar_size + config.avatar_size * .5));
                    yaxis = parseInt(d.posy - (config.avatar_size + config.avatar_size * .5));
                }
                else {
                    width = config.avatar_size + config.avatar_size * .1;
                    xaxis = parseInt(d.posx - config.avatar_size + config.avatar_size * .45);
                    yaxis = parseInt(d.posy - config.avatar_size + config.avatar_size * .45)
                }
                svg.append('image')
                    .attr('xlink:href', d.img)
                    .attr('width', width)
                    .attr('height', width)
                    .attr('x', xaxis)
                    .attr('y', yaxis)
                    // .attr('transform', 'translate(' + parseInt(d.posx1) + ',' + parseInt(d.posy1) + ')')
                    // .attr('transform', 'translate(' + parseInt(d.posx - config.avatar_size + config.avatar_size * .45) + ',' + parseInt(d.posy - config.avatar_size + config.avatar_size * .45) + ')')
                    .attr('clip-path', "url(#clipObj" + i + ")")
            })

            var text = svg.selectAll("text")
                .data(data)
                .enter()
                .append("text");

            var textLabels = text
                .attr("x", function (d) { return d.posx + 15; })
                .attr("y", function (d) { return d.posy + 5; })
                .text(function (d) { return d.label; });

            ////////////////////////////

            function zoomed() {
                g.attr('transform', 'translate(' + d3.event.transform.x + ',' + d3.event.transform.y + ') scale(' + d3.event.transform.k + ')');
                currentscale = d3.event.transform.k;
            };

            if (currentscale != "") {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleTo, currentscale);

            }

            function transition(zoomLevel) {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleBy, zoomLevel);
                //.call(zoom.transform, transform);
                //.on("end", function() { canvas.call(transition); });
            }

            d3.selectAll('button').on('click', function () {
                if (this.id === 'zoom_in') {
                    transition(1.2); // increase on 0.2 each time
                }
                if (this.id === 'zoom_out') {
                    transition(0.8); // deacrease on 0.2 each time
                }
                if (this.id === 'zoom_init') {
                    svg.transition()
                        .delay(100)
                        .duration(700)
                        .call(zoom.scaleTo, 1.5); // return to initial state
                }
                if (this.id === 'btnresize') {
                    if (sizetoggle == 0) {
                        $(div).css("height", "90%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "1100px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-10').addClass('col-md-9 ml-sm-auto col-lg-12');
                        //$('#seconddivgraph').hide();
                        $('#clientconnectionHelp').hide();
                        $('#showhideNav').hide();
                        $('#seconddivgraph').css({ 'margin-top': '0px' });

                        sizetoggle = 1;
                    }
                    else {
                        $(div).css("height", "75%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "800px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-12').addClass('col-md-9 ml-sm-auto col-lg-10');
                        //$('#seconddivgraph').show();
                        $('#clientconnectionHelp').show();
                        $('#showhideNav').show();
                        $('#seconddivgraph').css({ 'margin-top': '65px' });
                        sizetoggle = 0;
                    }
                }

            });

            var color = d3.scaleOrdinal(d3.schemeCategory20);

            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function (d) { return d.id; }).distance(function (d, i) { return 30 + i }))
                .force("charge", d3.forceManyBody().strength(-100))
                .force("center", d3.forceCenter(width / 2, height / 2));

            var link = g.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(nodelink.links)
                .enter().append("line")
                .style("stroke-dasharray", (0, function (d) {
                    if (d.value == 1) {
                        return 3;
                    }
                    else { return 0; }
                }))
                .style('stroke', function (d) {
                    ////debugger;
                    if (isManagedClient) {
                        if (d.source == relationshipManager || d.target == relationshipManager) {
                            return "#28AF73";
                        }
                        else if (relTeamMembers.indexOf(d.source) > -1 || relTeamMembers.indexOf(d.target) > -1) {
                            return "#A0235F";
                        }
                    }
                    //If contacts has activities in last 6 months we need to render thick outline outside
                    //if (d.hasActivitiesInLast6Months != undefined && d.hasActivitiesInLast6Months != null && d.hasActivitiesInLast6Months == 'Yes') {
                    //    return "#FF0000";
                    //}
                })
                .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = g.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodelink.nodes)
                .enter().append("g")
                .on('dblclick', releasenode)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            var circle = node.append("circle")
                .attr("r", function (d) { return d.rad; })
                .attr("fill", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke", function (d) { return GetNodeStrokeClr(d, color) })
                .style("stroke-width", function (d) { return GetNodeBackGrdStrokeWidth(d) })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(200, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent);
                    return tooltip.style("visibility", "visible");
                    // tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");

                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            // add circle clip
            var clipPath = node.append("clipPath")
                .attr("id", function (d, i) {
                    return "clipCircle_" + i
                })
                .append("circle")
                .attr("r", function (d) { return d.rad });


            var tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("z-index", "12")
                .style("visibility", "hidden")
                .style("background", "#5C9BD1")
                .style("color", "white")
                .style("padding", "5px")
                .style("margin", "2px")
                .style("font-size", "12px")
                .style("box-shadow", "0px 5px 15px 0px rgba(0,0,0,0.3)")
                .text("a simple tooltip");

            var image = node.append('svg:image').attr('class', 'entityImage').attr('xlink:href', function (d) {
                if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                    return d.imageUrl;
                }
                else {
                    return 'arup_/Images/Contact.png';
                }
            })
                .attr('width', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr('height', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr("clip-path", function (d, i) { return "url(#clipCircle_" + i + ")" })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent); return tooltip.style("visibility", "visible");

                    //  tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");
                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            var nodeText = node.append('svg:text').attr('class', 'nodetext').text(function (d) {
                var name = d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
                if (name.length > 20) {
                    name = name.substring(0, 20) + "...";
                }
                if (isManagedClient) {
                    if (d.id == relationshipManager) {
                        return name + " (RM)";
                    }
                    else if (relTeamMembers.indexOf(d.id) > -1) {
                        return name + " (RT)";
                    }
                    else {
                        return name;
                    }
                }
                return name;
            }).style("text-anchor", "middle");


            //var title = node.append("title")
            //     .text(function (d) { return d.id; });

            simulation
                .nodes(nodelink.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(nodelink.links);

            function ticked() {
                link
                    .attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                circle
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                clipPath
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                image
                    .attr("x", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.x - d.rad - d.rad * .5;
                        }
                        else {
                            return d.x - d.rad + d.rad * .45;
                        }
                    })
                    .attr("y", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.y - d.rad - d.rad * .5;
                        }
                        else {
                            return d.y - d.rad + d.rad * .45;
                        }

                    });


                nodeText
                    .attr("dx", function (d) { return d.x - function (d) { return d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "") }.length / 2 * 3; })
                    .attr("dy", function (d) {
                        if (d.group == 1) {
                            return d.y - 11;
                        }
                        else if (d.group == 2) {
                            return d.y - 8;
                        }
                        else if (d.group == 6) {
                            return d.y - 11;
                        }
                        else {
                            return d.y - 5;
                        }
                    });


            }


            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) simulation.alphaTarget(0);
                //d.fx = null;
                //d.fy = null;
                d.fx = d.x;
                d.fy = d.y;
            }

            function releasenode(d) {
                //d.fx = false; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
                //force.resume();
                if (!d3.event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            ////////////////////////////////////////////////////////////////////////////////

            function connectedNodes(d) {
                var connectedlinks = link.filter(function (e) {
                    //return e.source.id == d.id || e.target.id == d.id; //connected links
                    if (e.source.id == d.id || e.target.id == d.id) {
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.1);
                        return d.id;
                    }
                }).style('stroke', 'red')
                    .attr('r', 15);


                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.1)
                        .attr('r', 15);
            }
            function removehighlighting(d) {
                var connectedlinks = link.filter(function (e) {
                    if (e.source.id == d.id || e.target.id == d.id) { //connected links
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.6);
                        return d.id;
                    }
                })
                    .style('stroke', function (d) {
                        //////debugger;
                        if (isManagedClient) {
                            if (d.source.id == relationshipManager || d.target.id == relationshipManager) {
                                return "#28AF73";
                            }
                            else if (relTeamMembers.indexOf(d.source.id) > -1 || relTeamMembers.indexOf(d.target.id) > -1) {
                                return "#A0235F";
                            }
                            else return '#999'
                        }
                        else return '#999'

                    }).attr('r', 15)

                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.6)
                        .attr('r', 15);

            }
            /////////////////////////////////////////////////////




            //var arupContact = d3.nest()
            //    .key(function (d) { return d['Name']; })
            //    .entries(conData);
            ////var clientContact = d3.nest()
            ////    .key(function (d) { return d['ccrm_clientgroupings']; })
            ////    .entries(conData);
            //arupContact.forEach(function (ac, i) {
            //    //var userpro = conData.filter(function (currentValue, index, arr) { if (currentValue['CRM User'] == ac.key) return true; });
            //    nodelink.nodes.push({
            //        id: ac.key, group: 2, rad: 7, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].UserImage, empstatus: ac.values[0].EmpStatus, name: ac.values[0].CRMUser
            //        , phone: ac.values[0].EmpPhone, jobtitleorCountry: ac.values[0].EmpCountry, userid: ac.values[0].userid,
            //        orgTownCity: ac.values[0].orgTownCity, orgDepartment: ac.values[0].orgDepartment, contactDepartment: ac.values[0].contactDepartment,
            //        contactEmail: ac.values[0].contactEmail, userCompanyCode: ac.values[0].userCompanyCode, userAccountingCode: ac.values[0].userAccountingCode,
            //        userRegion: ac.values[0].userRegion, orgOpenOpptys: ac.values[0].orgOpenOpptys, userTitle: ac.values[0].userTitle
            //    });
            //    if (!isUserClick)
            //        nodelink.links.push({ source: accName, target: ac.key, value: 2 });
            //})

            //var contactsids = [];
            //clientContact.forEach(function (ac, i) {
            //    //var contactpro = conData.filter(function (currentValue, index, arr) { if (currentValue['Contact'] == ac.key) return true; });
            //    var ContactRadius = 4;
            //    var ContactGroup = 3
            //    if (ac.values[0].AccountRole == "1")  // Decision Maker
            //    {
            //        ContactRadius = 10;
            //        ContactGroup = 6;
            //    }
            //    else if (ac.values[0].AccountRole == "3") // Influencer
            //    {
            //        ContactRadius = 10;
            //        ContactGroup = 6;
            //    }
            //    nodelink.nodes.push({
            //        id: ac.key, group: ContactGroup, rad: ContactRadius, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].ContactImage,
            //        name: ac.values[0].Contact, phone: ac.values[0].ContactPhone, jobtitleorCountry: ac.values[0].JobTitle, userid: "200",
            //        orgTownCity: ac.values[0].orgTownCity, orgDepartment: ac.values[0].orgDepartment, contactDepartment: ac.values[0].contactDepartment,
            //        contactEmail: ac.values[0].contactEmail, userCompanyCode: ac.values[0].userCompanyCode, userAccountingCode: ac.values[0].userAccountingCode,
            //        userRegion: ac.values[0].userRegion, orgOpenOpptys: ac.values[0].orgOpenOpptys, userTitle: ac.values[0].userTitle
            //    });
            //    //  contactsids.push(ac.values[0].ContactId);

            //})

            //conData.forEach(function (cc, i) {
            //    nodelink.links.push({ source: clientGroupingId, target: cc['UserId'], value: 1 });
            //})




        }

        function DrawMatrixForceLayoutForCSuiteAndDecisionMakers(div, conData, uniqueOrgList, activityList, isUserClick) {
            ////debugger;
            if (isUserClick == undefined)
                isUserClick = false;

            var nodelink = Object();
            nodelink.nodes = [];
            nodelink.links = [];

            if (!isUserClick) {
                nodelink.nodes.push({
                    id: accName, name: accName, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                });
            }

            for (var i = 0; i < uniqueOrgList.length; i++) {

                if (!isUserClick) {
                    nodelink.nodes.push({
                        id: uniqueOrgList[i].organizationid, name: uniqueOrgList[i].organizationname, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                    });
                }
            }

            //for (var i = 0; i < conData.length; i++) {

            //    if (!isUserClick) {
            //        nodelink.nodes.push({
            //            id: conData[i].contactid, name: conData[i].contactname, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + conData[i].contactimage, role: conData[i].role
            //        });
            //    }
            //}

            if (activityList.length > 0) {
                for (var i = 0; i < conData.length; i++) {
                    var hasActivitiesInLast6Months = 'No';
                    for (var j = 0; j < activityList.length; j++) {
                        if (conData[i].contactid == activityList[j].parentcustomerid) {
                            hasActivitiesInLast6Months = 'Yes';
                            nodelink.nodes.push({
                                id: conData[i].contactid, name: conData[i].contactname, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + conData[i].contactimage, role: conData[i].role, hasActivitiesInLast6Months: 'Yes'
                            });
                            break;
                        }
                    }
                    if (hasActivitiesInLast6Months == 'No') {
                        nodelink.nodes.push({
                            id: conData[i].contactid, name: conData[i].contactname, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + conData[i].contactimage, role: conData[i].role
                        });
                    }
                }
            }
            else {
                for (var i = 0; i < conData.length; i++) {
                    if (!isUserClick) {
                        nodelink.nodes.push({
                            id: conData[i].contactid, name: conData[i].contactname, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + conData[i].contactimage, role: conData[i].role
                        });
                    }
                }
            }

            //for (var i = 0; i < uniqueOrgList.length; i++) {

            //    if (!isUserClick)
            //        //nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid, value: 2 });
            //        nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid });
            //}

            //*****
            for (var i = 0; i < uniqueOrgList.length; i++) {
                if (uniqueOrgList[i].parentorganisationid == "") {
                    if (!isUserClick)
                        nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid, value: 2 });
                }
            }
            for (var i = 0; i < uniqueOrgList.length; i++) {
                if (uniqueOrgList[i].parentorganisationid != "") {

                    var parentacchierarchy = '';
                    var _parentaccountid_value = '';
                    _parentaccountid_value = uniqueOrgList[i].parentorganisationid;
                    var hierarchyCount = 0;
                    do {
                        hierarchyCount++;
                        var req = new XMLHttpRequest();
                        req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v9.1/accounts(" + _parentaccountid_value + ")?$select=accountid,name,_parentaccountid_value,parentaccountid", false);
                        req.setRequestHeader("OData-MaxVersion", "4.0");
                        req.setRequestHeader("OData-Version", "4.0");
                        req.setRequestHeader("Accept", "application/json");
                        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                        req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
                        req.onreadystatechange = function () {
                            if (this.readyState === 4) {
                                req.onreadystatechange = null;
                                if (this.status === 200) {
                                    var result = JSON.parse(this.response);
                                    //
                                    var isNodeDuplicate = false;
                                    for (var k = 0; k < nodelink.nodes.length; k++) {
                                        if (nodelink.nodes[k].id == result["accountid"]) {
                                            isNodeDuplicate = true;
                                            break;
                                        }
                                    }
                                    if (isNodeDuplicate == false) {
                                        nodelink.nodes.push({
                                            id: uniqueOrgList[i].parentorganisationid, name: result["name"], group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                                        });
                                    }
                                    //
                                    _parentaccountid_value = result["_parentaccountid_value"];
                                    if (result["_parentaccountid_value"] != undefined && result["_parentaccountid_value"] != null) {
                                        _parentaccountid_value = result["_parentaccountid_value"];
                                        if (parentacchierarchy == '')
                                            parentacchierarchy = uniqueOrgList[i].organizationid + "," + uniqueOrgList[i].parentorganisationid + "," + _parentaccountid_value;
                                        else
                                            parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;
                                    }
                                    else {
                                        _parentaccountid_value = "nodata";
                                    }
                                } else {
                                    //console.(this.statusText);
                                }
                            }
                        };
                        req.send();

                        if (_parentaccountid_value == "nodata") {
                            if (hierarchyCount == 1)
                                parentacchierarchy = "nodata";
                            //break;
                        }
                        //if (parentacchierarchy == '')
                        //    parentacchierarchy = _parentaccountid_value;
                        //else if (parentacchierarchy != 'nodata' && _parentaccountid_value != "nodata")
                        //    parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;

                    } while (_parentaccountid_value != "nodata");

                    if (parentacchierarchy != "nodata" && parentacchierarchy != "" && parentacchierarchy != null && parentacchierarchy != undefined) {
                        var splithierarchy = parentacchierarchy.split(",");
                        splithierarchy.reverse();
                        for (var j = 0; j < splithierarchy.length; j++) {
                            if (j == 0) {
                                //nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == accName && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                }
                            }
                            else {
                                //nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == splithierarchy[j - 1] && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                }
                            }
                        }
                    }
                    else if (parentacchierarchy == "nodata") {
                        var isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == accName && nodelink.links[k].target == uniqueOrgList[i].parentorganisationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: accName, target: uniqueOrgList[i].parentorganisationid, value: 2 });
                        }

                        isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == uniqueOrgList[i].parentorganisationid && nodelink.links[k].target == uniqueOrgList[i].organizationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: uniqueOrgList[i].parentorganisationid, target: uniqueOrgList[i].organizationid, value: 2 });
                        }
                    }
                }
            }
            //*****
            ////debugger;

            for (var i = 0; i < conData.length; i++) {
                for (var j = 0; j < uniqueOrgList.length; j++) {
                    if (conData[i].organizationid == uniqueOrgList[j].organizationid) {
                        if (!isUserClick) {
                            var nodelinkIndex = uniqueOrgList.length + 1 + i + 1;
                            //nodelink.links.push({ source: uniqueOrgList[j].organizationid, target: conData[i].contactid, value: nodelinkIndex });
                            nodelink.links.push({ source: uniqueOrgList[j].organizationid, target: conData[i].contactid });
                            break;
                        }
                    }
                }
            }

            var svgwidth = $("#connForcelay").width()

            var svg = d3.select("#connForcelay"),
                width = +svgwidth,
                height = +svg.attr("height");

            var zoom = d3.zoom().scaleExtent([1 / 2, 4]).on("zoom", zoomed);

            svg.call(zoom);

            var g = svg.append("g");


            //////////////////////////
            var config = {
                "avatar_size": 10
            }

            var body = d3.select("body");
            var defs = svg.append('svg:defs');
            data = [{
                posx: 30,
                posy: 20,
                posx1: 25,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Client Grouping",
                width: 20
            }, {
                posx: 170,
                posy: 20,
                posx1: 165,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Organisations",
                width: 20
            },
            {
                posx: 310,
                posy: 20,
                posx1: 305,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#28AF73",
                "label": "Decision Makers",
                width: 10
            },
            {
                posx: 450,
                posy: 20,
                posx1: 445,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#FFA500",
                "label": "C-Suite",
                width: 10
            }

            ];

            data.forEach(function (d, i) {
                svg.append("circle")
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)
                    .style("stroke-width", 1)
                    .attr("fill", d.color)
                    .style("stroke", d.color)

                svg.append('clipPath')
                    .attr('id', 'clipObj' + i)
                    .append('circle')
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)

            })

            data.forEach(function (d, i) {
                var xaxis, yaxis, width
                if (d.label == "Organisations" || d.label == "Client Grouping") {
                    width = config.avatar_size * 3;
                    xaxis = parseInt(d.posx - (config.avatar_size + config.avatar_size * .5));
                    yaxis = parseInt(d.posy - (config.avatar_size + config.avatar_size * .5));
                }
                else {
                    width = config.avatar_size + config.avatar_size * .1;
                    xaxis = parseInt(d.posx - config.avatar_size + config.avatar_size * .45);
                    yaxis = parseInt(d.posy - config.avatar_size + config.avatar_size * .45)
                }
                svg.append('image')
                    .attr('xlink:href', d.img)
                    .attr('width', width)
                    .attr('height', width)
                    .attr('x', xaxis)
                    .attr('y', yaxis)
                    // .attr('transform', 'translate(' + parseInt(d.posx1) + ',' + parseInt(d.posy1) + ')')
                    // .attr('transform', 'translate(' + parseInt(d.posx - config.avatar_size + config.avatar_size * .45) + ',' + parseInt(d.posy - config.avatar_size + config.avatar_size * .45) + ')')
                    .attr('clip-path', "url(#clipObj" + i + ")")

            })


            var text = svg.selectAll("text")
                .data(data)
                .enter()
                .append("text");


            var textLabels = text
                .attr("x", function (d) { return d.posx + 15; })
                .attr("y", function (d) { return d.posy + 5; })
                .text(function (d) { return d.label; });


            ////////////////////////////



            function zoomed() {
                g.attr('transform', 'translate(' + d3.event.transform.x + ',' + d3.event.transform.y + ') scale(' + d3.event.transform.k + ')');
                currentscale = d3.event.transform.k;
            };

            if (currentscale != "") {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleTo, currentscale);

            }

            function transition(zoomLevel) {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleBy, zoomLevel);
                //.call(zoom.transform, transform);
                //.on("end", function() { canvas.call(transition); });
            }

            d3.selectAll('button').on('click', function () {
                if (this.id === 'zoom_in') {
                    transition(1.2); // increase on 0.2 each time
                }
                if (this.id === 'zoom_out') {
                    transition(0.8); // deacrease on 0.2 each time
                }
                if (this.id === 'zoom_init') {
                    svg.transition()
                        .delay(100)
                        .duration(700)
                        .call(zoom.scaleTo, 1.5); // return to initial state
                }
                if (this.id === 'btnresize') {
                    if (sizetoggle == 0) {
                        $(div).css("height", "90%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "1100px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-10').addClass('col-md-9 ml-sm-auto col-lg-12');
                        //$('#seconddivgraph').hide();
                        $('#clientconnectionHelp').hide();
                        $('#showhideNav').hide();
                        $('#seconddivgraph').css({ 'margin-top': '0px' });

                        sizetoggle = 1;
                    }
                    else {
                        $(div).css("height", "75%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "800px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-12').addClass('col-md-9 ml-sm-auto col-lg-10');
                        //$('#seconddivgraph').show();
                        $('#clientconnectionHelp').show();
                        $('#showhideNav').show();
                        $('#seconddivgraph').css({ 'margin-top': '65px' });
                        sizetoggle = 0;
                    }
                }

            });

            var color = d3.scaleOrdinal(d3.schemeCategory20);


            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function (d) { return d.id; }).distance(function (d, i) { return 30 + i }))
                .force("charge", d3.forceManyBody().strength(-100))
                .force("center", d3.forceCenter(width / 2, height / 2));


            var link = g.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(nodelink.links)
                .enter().append("line")
                .style("stroke-dasharray", (0, function (d) {
                    if (d.value == 1) {
                        return 3;
                    }
                    else { return 0; }
                }))
                .style('stroke', function (d) {
                    //////debugger;
                    if (isManagedClient) {
                        if (d.source == relationshipManager || d.target == relationshipManager) {
                            return "#28AF73";
                        }
                        else if (relTeamMembers.indexOf(d.source) > -1 || relTeamMembers.indexOf(d.target) > -1) {
                            return "#A0235F";
                        }
                    }
                })
                .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = g.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodelink.nodes)
                .enter().append("g")
                .on('dblclick', releasenode)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            var circle = node.append("circle")
                .attr("r", function (d) { return d.rad; })
                .attr("fill", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke", function (d) { return GetNodeStrokeClr(d, color) })
                .style("stroke-width", function (d) { return GetNodeBackGrdStrokeWidth(d) })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(200, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent);
                    return tooltip.style("visibility", "visible");
                    // tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");

                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            // add circle clip
            var clipPath = node.append("clipPath")
                .attr("id", function (d, i) {
                    return "clipCircle_" + i
                })
                .append("circle")
                .attr("r", function (d) { return d.rad });


            var tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("z-index", "12")
                .style("visibility", "hidden")
                .style("background", "#5C9BD1")
                .style("color", "white")
                .style("padding", "5px")
                .style("margin", "2px")
                .style("font-size", "12px")
                .style("box-shadow", "0px 5px 15px 0px rgba(0,0,0,0.3)")
                .text("a simple tooltip");

            var image = node.append('svg:image').attr('class', 'entityImage').attr('xlink:href', function (d) {
                if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                    return d.imageUrl;
                }
                else {
                    return 'arup_/Images/Contact.png';
                }
            })
                .attr('width', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr('height', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr("clip-path", function (d, i) { return "url(#clipCircle_" + i + ")" })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent); return tooltip.style("visibility", "visible");

                    //  tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");
                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            var nodeText = node.append('svg:text').attr('class', 'nodetext').text(function (d) {
                var name = d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
                if (name.length > 20) {
                    name = name.substring(0, 20) + "...";
                }
                if (isManagedClient) {
                    if (d.id == relationshipManager) {
                        return name + " (RM)";
                    }
                    else if (relTeamMembers.indexOf(d.id) > -1) {
                        return name + " (RT)";
                    }
                    else {
                        return name;
                    }
                }
                return name;
            }).style("text-anchor", "middle");


            //var title = node.append("title")
            //     .text(function (d) { return d.id; });

            simulation
                .nodes(nodelink.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(nodelink.links);

            function ticked() {
                link
                    .attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                circle
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                clipPath
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                image
                    .attr("x", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.x - d.rad - d.rad * .5;
                        }
                        else {
                            return d.x - d.rad + d.rad * .45;
                        }
                    })
                    .attr("y", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.y - d.rad - d.rad * .5;
                        }
                        else {
                            return d.y - d.rad + d.rad * .45;
                        }

                    });


                nodeText
                    .attr("dx", function (d) { return d.x - function (d) { return d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "") }.length / 2 * 3; })
                    .attr("dy", function (d) {
                        if (d.group == 1) {
                            return d.y - 11;
                        }
                        else if (d.group == 2) {
                            return d.y - 8;
                        }
                        else if (d.group == 6) {
                            return d.y - 11;
                        }
                        else {
                            return d.y - 5;
                        }
                    });


            }


            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) simulation.alphaTarget(0);
                //d.fx = null;
                //d.fy = null;
                d.fx = d.x;
                d.fy = d.y;
            }

            function releasenode(d) {
                //d.fx = false; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
                //force.resume();
                if (!d3.event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            ////////////////////////////////////////////////////////////////////////////////

            function connectedNodes(d) {
                var connectedlinks = link.filter(function (e) {
                    //return e.source.id == d.id || e.target.id == d.id; //connected links
                    if (e.source.id == d.id || e.target.id == d.id) {
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.1);
                        return d.id;
                    }
                }).style('stroke', 'red')
                    .attr('r', 15);


                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.1)
                        .attr('r', 15);
            }
            function removehighlighting(d) {
                var connectedlinks = link.filter(function (e) {
                    if (e.source.id == d.id || e.target.id == d.id) { //connected links
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.6);
                        return d.id;
                    }
                })
                    .style('stroke', function (d) {
                        //////debugger;
                        if (isManagedClient) {
                            if (d.source.id == relationshipManager || d.target.id == relationshipManager) {
                                return "#28AF73";
                            }
                            else if (relTeamMembers.indexOf(d.source.id) > -1 || relTeamMembers.indexOf(d.target.id) > -1) {
                                return "#A0235F";
                            }
                            else return '#999'
                        }
                        else return '#999'

                    }).attr('r', 15)

                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.6)
                        .attr('r', 15);

            }
            /////////////////////////////////////////////////////




            //var arupContact = d3.nest()
            //    .key(function (d) { return d['Name']; })
            //    .entries(conData);
            ////var clientContact = d3.nest()
            ////    .key(function (d) { return d['ccrm_clientgroupings']; })
            ////    .entries(conData);
            //arupContact.forEach(function (ac, i) {
            //    //var userpro = conData.filter(function (currentValue, index, arr) { if (currentValue['CRM User'] == ac.key) return true; });
            //    nodelink.nodes.push({
            //        id: ac.key, group: 2, rad: 7, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].UserImage, empstatus: ac.values[0].EmpStatus, name: ac.values[0].CRMUser
            //        , phone: ac.values[0].EmpPhone, jobtitleorCountry: ac.values[0].EmpCountry, userid: ac.values[0].userid,
            //        orgTownCity: ac.values[0].orgTownCity, orgDepartment: ac.values[0].orgDepartment, contactDepartment: ac.values[0].contactDepartment,
            //        contactEmail: ac.values[0].contactEmail, userCompanyCode: ac.values[0].userCompanyCode, userAccountingCode: ac.values[0].userAccountingCode,
            //        userRegion: ac.values[0].userRegion, orgOpenOpptys: ac.values[0].orgOpenOpptys, userTitle: ac.values[0].userTitle
            //    });
            //    if (!isUserClick)
            //        nodelink.links.push({ source: accName, target: ac.key, value: 2 });
            //})

            //var contactsids = [];
            //clientContact.forEach(function (ac, i) {
            //    //var contactpro = conData.filter(function (currentValue, index, arr) { if (currentValue['Contact'] == ac.key) return true; });
            //    var ContactRadius = 4;
            //    var ContactGroup = 3
            //    if (ac.values[0].AccountRole == "1")  // Decision Maker
            //    {
            //        ContactRadius = 10;
            //        ContactGroup = 6;
            //    }
            //    else if (ac.values[0].AccountRole == "3") // Influencer
            //    {
            //        ContactRadius = 10;
            //        ContactGroup = 6;
            //    }
            //    nodelink.nodes.push({
            //        id: ac.key, group: ContactGroup, rad: ContactRadius, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].ContactImage,
            //        name: ac.values[0].Contact, phone: ac.values[0].ContactPhone, jobtitleorCountry: ac.values[0].JobTitle, userid: "200",
            //        orgTownCity: ac.values[0].orgTownCity, orgDepartment: ac.values[0].orgDepartment, contactDepartment: ac.values[0].contactDepartment,
            //        contactEmail: ac.values[0].contactEmail, userCompanyCode: ac.values[0].userCompanyCode, userAccountingCode: ac.values[0].userAccountingCode,
            //        userRegion: ac.values[0].userRegion, orgOpenOpptys: ac.values[0].orgOpenOpptys, userTitle: ac.values[0].userTitle
            //    });
            //    //  contactsids.push(ac.values[0].ContactId);

            //})

            //conData.forEach(function (cc, i) {
            //    nodelink.links.push({ source: clientGroupingId, target: cc['UserId'], value: 1 });
            //})




        }

        function DrawMatrixForceLayoutForDecisionMakers(div, conData, uniqueOrgList, isUserClick) {
            ////debugger;
            if (isUserClick == undefined)
                isUserClick = false;

            var nodelink = Object();
            nodelink.nodes = [];
            nodelink.links = [];

            if (!isUserClick) {
                nodelink.nodes.push({
                    id: accName, name: accName, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                });
            }

            for (var i = 0; i < uniqueOrgList.length; i++) {

                if (!isUserClick) {
                    nodelink.nodes.push({
                        id: uniqueOrgList[i].organizationid, name: uniqueOrgList[i].organizationname, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                    });
                }
            }

            for (var i = 0; i < conData.length; i++) {

                if (!isUserClick) {
                    nodelink.nodes.push({
                        id: conData[i].contactid, name: conData[i].contactname, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + conData[i].contactimage, role: conData[i].role
                    });
                }
            }

            //for (var i = 0; i < uniqueOrgList.length; i++) {

            //    if (!isUserClick)
            //        //nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid, value: 2 });
            //        nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid });
            //}

            //*****
            for (var i = 0; i < uniqueOrgList.length; i++) {
                if (uniqueOrgList[i].parentorganisationid == "") {
                    if (!isUserClick)
                        nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid, value: 2 });
                }
            }
            for (var i = 0; i < uniqueOrgList.length; i++) {
                if (uniqueOrgList[i].parentorganisationid != "") {

                    var parentacchierarchy = '';
                    var _parentaccountid_value = '';
                    _parentaccountid_value = uniqueOrgList[i].parentorganisationid;
                    var hierarchyCount = 0;
                    do {
                        hierarchyCount++;
                        var req = new XMLHttpRequest();
                        req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v9.1/accounts(" + _parentaccountid_value + ")?$select=accountid,name,_parentaccountid_value,parentaccountid", false);
                        req.setRequestHeader("OData-MaxVersion", "4.0");
                        req.setRequestHeader("OData-Version", "4.0");
                        req.setRequestHeader("Accept", "application/json");
                        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                        req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
                        req.onreadystatechange = function () {
                            if (this.readyState === 4) {
                                req.onreadystatechange = null;
                                if (this.status === 200) {
                                    var result = JSON.parse(this.response);
                                    //
                                    var isNodeDuplicate = false;
                                    for (var k = 0; k < nodelink.nodes.length; k++) {
                                        if (nodelink.nodes[k].id == result["accountid"]) {
                                            isNodeDuplicate = true;
                                            break;
                                        }
                                    }
                                    if (isNodeDuplicate == false) {
                                        nodelink.nodes.push({
                                            id: uniqueOrgList[i].parentorganisationid, name: result["name"], group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                                        });
                                    }
                                    //
                                    _parentaccountid_value = result["_parentaccountid_value"];
                                    if (result["_parentaccountid_value"] != undefined && result["_parentaccountid_value"] != null) {
                                        _parentaccountid_value = result["_parentaccountid_value"];
                                        if (parentacchierarchy == '')
                                            parentacchierarchy = uniqueOrgList[i].organizationid + "," + uniqueOrgList[i].parentorganisationid + "," + _parentaccountid_value;
                                        else
                                            parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;
                                    }
                                    else {
                                        _parentaccountid_value = "nodata";
                                    }
                                } else {
                                    //console.(this.statusText);
                                }
                            }
                        };
                        req.send();

                        if (_parentaccountid_value == "nodata") {
                            if (hierarchyCount == 1)
                                parentacchierarchy = "nodata";
                            //break;
                        }
                        //if (parentacchierarchy == '')
                        //    parentacchierarchy = _parentaccountid_value;
                        //else if (parentacchierarchy != 'nodata' && _parentaccountid_value != "nodata")
                        //    parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;

                    } while (_parentaccountid_value != "nodata");

                    if (parentacchierarchy != "nodata" && parentacchierarchy != "" && parentacchierarchy != null && parentacchierarchy != undefined) {
                        var splithierarchy = parentacchierarchy.split(",");
                        splithierarchy.reverse();
                        for (var j = 0; j < splithierarchy.length; j++) {
                            if (j == 0) {
                                //nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == accName && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                }
                            }
                            else {
                                //nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == splithierarchy[j - 1] && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                }
                            }
                        }
                    }
                    else if (parentacchierarchy == "nodata") {
                        var isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == accName && nodelink.links[k].target == uniqueOrgList[i].parentorganisationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: accName, target: uniqueOrgList[i].parentorganisationid, value: 2 });
                        }

                        isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == uniqueOrgList[i].parentorganisationid && nodelink.links[k].target == uniqueOrgList[i].organizationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: uniqueOrgList[i].parentorganisationid, target: uniqueOrgList[i].organizationid, value: 2 });
                        }
                    }
                }
            }
            //*****
            ////debugger;

            for (var i = 0; i < conData.length; i++) {
                for (var j = 0; j < uniqueOrgList.length; j++) {
                    if (conData[i].organizationid == uniqueOrgList[j].organizationid) {
                        if (!isUserClick) {
                            var nodelinkIndex = uniqueOrgList.length + 1 + i + 1;
                            //nodelink.links.push({ source: uniqueOrgList[j].organizationid, target: conData[i].contactid, value: nodelinkIndex });
                            nodelink.links.push({ source: uniqueOrgList[j].organizationid, target: conData[i].contactid });
                            break;
                        }
                    }
                }
            }

            var svgwidth = $("#connForcelay").width()

            var svg = d3.select("#connForcelay"),
                width = +svgwidth,
                height = +svg.attr("height");

            var zoom = d3.zoom().scaleExtent([1 / 2, 4]).on("zoom", zoomed);

            svg.call(zoom);

            var g = svg.append("g");


            //////////////////////////
            var config = {
                "avatar_size": 10
            }

            var body = d3.select("body");
            var defs = svg.append('svg:defs');
            data = [{
                posx: 30,
                posy: 20,
                posx1: 25,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Client Grouping",
                width: 20
            }, {
                posx: 170,
                posy: 20,
                posx1: 165,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Organisations",
                width: 20
            }, {
                posx: 310,
                posy: 20,
                posx1: 305,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#28AF73",
                "label": "Decision Makers",
                width: 10
            }

            ];

            data.forEach(function (d, i) {
                svg.append("circle")
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)
                    .style("stroke-width", 1)
                    .attr("fill", d.color)
                    .style("stroke", d.color)

                svg.append('clipPath')
                    .attr('id', 'clipObj' + i)
                    .append('circle')
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)

            })

            data.forEach(function (d, i) {
                var xaxis, yaxis, width
                if (d.label == "Organisations" || d.label == "Client Grouping") {
                    width = config.avatar_size * 3;
                    xaxis = parseInt(d.posx - (config.avatar_size + config.avatar_size * .5));
                    yaxis = parseInt(d.posy - (config.avatar_size + config.avatar_size * .5));
                }
                else {
                    width = config.avatar_size + config.avatar_size * .1;
                    xaxis = parseInt(d.posx - config.avatar_size + config.avatar_size * .45);
                    yaxis = parseInt(d.posy - config.avatar_size + config.avatar_size * .45)
                }
                svg.append('image')
                    .attr('xlink:href', d.img)
                    .attr('width', width)
                    .attr('height', width)
                    .attr('x', xaxis)
                    .attr('y', yaxis)
                    // .attr('transform', 'translate(' + parseInt(d.posx1) + ',' + parseInt(d.posy1) + ')')
                    // .attr('transform', 'translate(' + parseInt(d.posx - config.avatar_size + config.avatar_size * .45) + ',' + parseInt(d.posy - config.avatar_size + config.avatar_size * .45) + ')')
                    .attr('clip-path', "url(#clipObj" + i + ")")

            })


            var text = svg.selectAll("text")
                .data(data)
                .enter()
                .append("text");


            var textLabels = text
                .attr("x", function (d) { return d.posx + 15; })
                .attr("y", function (d) { return d.posy + 5; })
                .text(function (d) { return d.label; });


            ////////////////////////////



            function zoomed() {
                g.attr('transform', 'translate(' + d3.event.transform.x + ',' + d3.event.transform.y + ') scale(' + d3.event.transform.k + ')');
                currentscale = d3.event.transform.k;
            };

            if (currentscale != "") {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleTo, currentscale);

            }

            function transition(zoomLevel) {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleBy, zoomLevel);
                //.call(zoom.transform, transform);
                //.on("end", function() { canvas.call(transition); });
            }

            d3.selectAll('button').on('click', function () {
                if (this.id === 'zoom_in') {
                    transition(1.2); // increase on 0.2 each time
                }
                if (this.id === 'zoom_out') {
                    transition(0.8); // deacrease on 0.2 each time
                }
                if (this.id === 'zoom_init') {
                    svg.transition()
                        .delay(100)
                        .duration(700)
                        .call(zoom.scaleTo, 1.5); // return to initial state
                }
                if (this.id === 'btnresize') {
                    if (sizetoggle == 0) {
                        $(div).css("height", "90%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "1100px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-10').addClass('col-md-9 ml-sm-auto col-lg-12');
                        //$('#seconddivgraph').hide();
                        $('#clientconnectionHelp').hide();
                        $('#showhideNav').hide();
                        $('#seconddivgraph').css({ 'margin-top': '0px' });

                        sizetoggle = 1;
                    }
                    else {
                        $(div).css("height", "75%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "800px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-12').addClass('col-md-9 ml-sm-auto col-lg-10');
                        //$('#seconddivgraph').show();
                        $('#clientconnectionHelp').show();
                        $('#showhideNav').show();
                        $('#seconddivgraph').css({ 'margin-top': '65px' });
                        sizetoggle = 0;
                    }
                }

            });

            var color = d3.scaleOrdinal(d3.schemeCategory20);


            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function (d) { return d.id; }).distance(function (d, i) { return 30 + i }))
                .force("charge", d3.forceManyBody().strength(-100))
                .force("center", d3.forceCenter(width / 2, height / 2));


            var link = g.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(nodelink.links)
                .enter().append("line")
                .style("stroke-dasharray", (0, function (d) {
                    if (d.value == 1) {
                        return 3;
                    }
                    else { return 0; }
                }))
                .style('stroke', function (d) {
                    //////debugger;
                    if (isManagedClient) {
                        if (d.source == relationshipManager || d.target == relationshipManager) {
                            return "#28AF73";
                        }
                        else if (relTeamMembers.indexOf(d.source) > -1 || relTeamMembers.indexOf(d.target) > -1) {
                            return "#A0235F";
                        }
                    }
                })
                .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = g.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodelink.nodes)
                .enter().append("g")
                .on('dblclick', releasenode)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            var circle = node.append("circle")
                .attr("r", function (d) { return d.rad; })
                .attr("fill", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke-width", function (d) { return GetNodeBackGrdStrokeWidth(d) })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(200, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent);
                    return tooltip.style("visibility", "visible");
                    // tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");

                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            // add circle clip
            var clipPath = node.append("clipPath")
                .attr("id", function (d, i) {
                    return "clipCircle_" + i
                })
                .append("circle")
                .attr("r", function (d) { return d.rad });


            var tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("z-index", "12")
                .style("visibility", "hidden")
                .style("background", "#5C9BD1")
                .style("color", "white")
                .style("padding", "5px")
                .style("margin", "2px")
                .style("font-size", "12px")
                .style("box-shadow", "0px 5px 15px 0px rgba(0,0,0,0.3)")
                .text("a simple tooltip");

            var image = node.append('svg:image').attr('class', 'entityImage').attr('xlink:href', function (d) {
                if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                    return d.imageUrl;
                }
                else {
                    return 'arup_/Images/Contact.png';
                }
            })
                .attr('width', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr('height', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr("clip-path", function (d, i) { return "url(#clipCircle_" + i + ")" })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent); return tooltip.style("visibility", "visible");

                    //  tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");
                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            var nodeText = node.append('svg:text').attr('class', 'nodetext').text(function (d) {
                var name = d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
                if (name.length > 20) {
                    name = name.substring(0, 20) + "...";
                }
                if (isManagedClient) {
                    if (d.id == relationshipManager) {
                        return name + " (RM)";
                    }
                    else if (relTeamMembers.indexOf(d.id) > -1) {
                        return name + " (RT)";
                    }
                    else {
                        return name;
                    }
                }
                return name;
            }).style("text-anchor", "middle");


            //var title = node.append("title")
            //     .text(function (d) { return d.id; });

            simulation
                .nodes(nodelink.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(nodelink.links);

            function ticked() {
                link
                    .attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                circle
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                clipPath
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                image
                    .attr("x", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.x - d.rad - d.rad * .5;
                        }
                        else {
                            return d.x - d.rad + d.rad * .45;
                        }
                    })
                    .attr("y", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.y - d.rad - d.rad * .5;
                        }
                        else {
                            return d.y - d.rad + d.rad * .45;
                        }

                    });


                nodeText
                    .attr("dx", function (d) { return d.x - function (d) { return d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "") }.length / 2 * 3; })
                    .attr("dy", function (d) {
                        if (d.group == 1) {
                            return d.y - 11;
                        }
                        else if (d.group == 2) {
                            return d.y - 8;
                        }
                        else if (d.group == 6) {
                            return d.y - 11;
                        }
                        else {
                            return d.y - 5;
                        }
                    });


            }


            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) simulation.alphaTarget(0);
                //d.fx = null;
                //d.fy = null;
                d.fx = d.x;
                d.fy = d.y;
            }

            function releasenode(d) {
                //d.fx = false; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
                //force.resume();
                if (!d3.event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            ////////////////////////////////////////////////////////////////////////////////

            function connectedNodes(d) {
                var connectedlinks = link.filter(function (e) {
                    //return e.source.id == d.id || e.target.id == d.id; //connected links
                    if (e.source.id == d.id || e.target.id == d.id) {
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.1);
                        return d.id;
                    }
                }).style('stroke', 'red')
                    .attr('r', 15);


                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.1)
                        .attr('r', 15);
            }
            function removehighlighting(d) {
                var connectedlinks = link.filter(function (e) {
                    if (e.source.id == d.id || e.target.id == d.id) { //connected links
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.6);
                        return d.id;
                    }
                })
                    .style('stroke', function (d) {
                        //////debugger;
                        if (isManagedClient) {
                            if (d.source.id == relationshipManager || d.target.id == relationshipManager) {
                                return "#28AF73";
                            }
                            else if (relTeamMembers.indexOf(d.source.id) > -1 || relTeamMembers.indexOf(d.target.id) > -1) {
                                return "#A0235F";
                            }
                            else return '#999'
                        }
                        else return '#999'

                    }).attr('r', 15)

                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.6)
                        .attr('r', 15);

            }
            /////////////////////////////////////////////////////




            //var arupContact = d3.nest()
            //    .key(function (d) { return d['Name']; })
            //    .entries(conData);
            ////var clientContact = d3.nest()
            ////    .key(function (d) { return d['ccrm_clientgroupings']; })
            ////    .entries(conData);
            //arupContact.forEach(function (ac, i) {
            //    //var userpro = conData.filter(function (currentValue, index, arr) { if (currentValue['CRM User'] == ac.key) return true; });
            //    nodelink.nodes.push({
            //        id: ac.key, group: 2, rad: 7, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].UserImage, empstatus: ac.values[0].EmpStatus, name: ac.values[0].CRMUser
            //        , phone: ac.values[0].EmpPhone, jobtitleorCountry: ac.values[0].EmpCountry, userid: ac.values[0].userid,
            //        orgTownCity: ac.values[0].orgTownCity, orgDepartment: ac.values[0].orgDepartment, contactDepartment: ac.values[0].contactDepartment,
            //        contactEmail: ac.values[0].contactEmail, userCompanyCode: ac.values[0].userCompanyCode, userAccountingCode: ac.values[0].userAccountingCode,
            //        userRegion: ac.values[0].userRegion, orgOpenOpptys: ac.values[0].orgOpenOpptys, userTitle: ac.values[0].userTitle
            //    });
            //    if (!isUserClick)
            //        nodelink.links.push({ source: accName, target: ac.key, value: 2 });
            //})

            //var contactsids = [];
            //clientContact.forEach(function (ac, i) {
            //    //var contactpro = conData.filter(function (currentValue, index, arr) { if (currentValue['Contact'] == ac.key) return true; });
            //    var ContactRadius = 4;
            //    var ContactGroup = 3
            //    if (ac.values[0].AccountRole == "1")  // Decision Maker
            //    {
            //        ContactRadius = 10;
            //        ContactGroup = 6;
            //    }
            //    else if (ac.values[0].AccountRole == "3") // Influencer
            //    {
            //        ContactRadius = 10;
            //        ContactGroup = 6;
            //    }
            //    nodelink.nodes.push({
            //        id: ac.key, group: ContactGroup, rad: ContactRadius, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].ContactImage,
            //        name: ac.values[0].Contact, phone: ac.values[0].ContactPhone, jobtitleorCountry: ac.values[0].JobTitle, userid: "200",
            //        orgTownCity: ac.values[0].orgTownCity, orgDepartment: ac.values[0].orgDepartment, contactDepartment: ac.values[0].contactDepartment,
            //        contactEmail: ac.values[0].contactEmail, userCompanyCode: ac.values[0].userCompanyCode, userAccountingCode: ac.values[0].userAccountingCode,
            //        userRegion: ac.values[0].userRegion, orgOpenOpptys: ac.values[0].orgOpenOpptys, userTitle: ac.values[0].userTitle
            //    });
            //    //  contactsids.push(ac.values[0].ContactId);

            //})

            //conData.forEach(function (cc, i) {
            //    nodelink.links.push({ source: clientGroupingId, target: cc['UserId'], value: 1 });
            //})




        }

        function DrawMatrixForceLayoutForCSuite(div, conData, uniqueOrgList, isUserClick) {
            ////debugger;
            if (isUserClick == undefined)
                isUserClick = false;

            var nodelink = Object();
            nodelink.nodes = [];
            nodelink.links = [];

            if (!isUserClick) {
                nodelink.nodes.push({
                    id: accName, name: accName, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                });
            }

            for (var i = 0; i < uniqueOrgList.length; i++) {

                if (!isUserClick) {
                    nodelink.nodes.push({
                        id: uniqueOrgList[i].organizationid, name: uniqueOrgList[i].organizationname, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                    });
                }
            }

            for (var i = 0; i < conData.length; i++) {

                if (!isUserClick) {
                    nodelink.nodes.push({
                        id: conData[i].contactid, name: conData[i].contactname, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + conData[i].contactimage, role: conData[i].role
                    });
                }
            }

            //for (var i = 0; i < uniqueOrgList.length; i++) {

            //    if (!isUserClick)
            //        //nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid, value: 2 });
            //        nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid });
            //}

            //*****
            for (var i = 0; i < uniqueOrgList.length; i++) {
                if (uniqueOrgList[i].parentorganisationid == "") {
                    if (!isUserClick)
                        nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid, value: 2 });
                }
            }
            for (var i = 0; i < uniqueOrgList.length; i++) {
                if (uniqueOrgList[i].parentorganisationid != "") {

                    var parentacchierarchy = '';
                    var _parentaccountid_value = '';
                    _parentaccountid_value = uniqueOrgList[i].parentorganisationid;
                    var hierarchyCount = 0;
                    do {
                        hierarchyCount++;
                        var req = new XMLHttpRequest();
                        req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v9.1/accounts(" + _parentaccountid_value + ")?$select=accountid,name,_parentaccountid_value,parentaccountid", false);
                        req.setRequestHeader("OData-MaxVersion", "4.0");
                        req.setRequestHeader("OData-Version", "4.0");
                        req.setRequestHeader("Accept", "application/json");
                        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                        req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
                        req.onreadystatechange = function () {
                            if (this.readyState === 4) {
                                req.onreadystatechange = null;
                                if (this.status === 200) {
                                    var result = JSON.parse(this.response);
                                    //
                                    var isNodeDuplicate = false;
                                    for (var k = 0; k < nodelink.nodes.length; k++) {
                                        if (nodelink.nodes[k].id == result["accountid"]) {
                                            isNodeDuplicate = true;
                                            break;
                                        }
                                    }
                                    if (isNodeDuplicate == false) {
                                        nodelink.nodes.push({
                                            id: uniqueOrgList[i].parentorganisationid, name: result["name"], group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                                        });
                                    }
                                    //
                                    _parentaccountid_value = result["_parentaccountid_value"];
                                    if (result["_parentaccountid_value"] != undefined && result["_parentaccountid_value"] != null) {
                                        _parentaccountid_value = result["_parentaccountid_value"];
                                        if (parentacchierarchy == '')
                                            parentacchierarchy = uniqueOrgList[i].organizationid + "," + uniqueOrgList[i].parentorganisationid + "," + _parentaccountid_value;
                                        else
                                            parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;
                                    }
                                    else {
                                        _parentaccountid_value = "nodata";
                                    }
                                } else {
                                    //console.(this.statusText);
                                }
                            }
                        };
                        req.send();

                        if (_parentaccountid_value == "nodata") {
                            if (hierarchyCount == 1)
                                parentacchierarchy = "nodata";
                            //break;
                        }
                        //if (parentacchierarchy == '')
                        //    parentacchierarchy = _parentaccountid_value;
                        //else if (parentacchierarchy != 'nodata' && _parentaccountid_value != "nodata")
                        //    parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;

                    } while (_parentaccountid_value != "nodata");

                    if (parentacchierarchy != "nodata" && parentacchierarchy != "" && parentacchierarchy != null && parentacchierarchy != undefined) {
                        var splithierarchy = parentacchierarchy.split(",");
                        splithierarchy.reverse();
                        for (var j = 0; j < splithierarchy.length; j++) {
                            if (j == 0) {
                                //nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == accName && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                }
                            }
                            else {
                                //nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == splithierarchy[j - 1] && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                }
                            }
                        }
                    }
                    else if (parentacchierarchy == "nodata") {
                        var isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == accName && nodelink.links[k].target == uniqueOrgList[i].parentorganisationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: accName, target: uniqueOrgList[i].parentorganisationid, value: 2 });
                        }

                        isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == uniqueOrgList[i].parentorganisationid && nodelink.links[k].target == uniqueOrgList[i].organizationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: uniqueOrgList[i].parentorganisationid, target: uniqueOrgList[i].organizationid, value: 2 });
                        }
                    }
                }
            }
            //*****
            ////debugger;

            for (var i = 0; i < conData.length; i++) {
                for (var j = 0; j < uniqueOrgList.length; j++) {
                    if (conData[i].organizationid == uniqueOrgList[j].organizationid) {
                        if (!isUserClick) {
                            var nodelinkIndex = uniqueOrgList.length + 1 + i + 1;
                            //nodelink.links.push({ source: uniqueOrgList[j].organizationid, target: conData[i].contactid, value: nodelinkIndex });
                            nodelink.links.push({ source: uniqueOrgList[j].organizationid, target: conData[i].contactid });
                            break;
                        }
                    }
                }
            }

            var svgwidth = $("#connForcelay").width()

            var svg = d3.select("#connForcelay"),
                width = +svgwidth,
                height = +svg.attr("height");

            var zoom = d3.zoom().scaleExtent([1 / 2, 4]).on("zoom", zoomed);

            svg.call(zoom);

            var g = svg.append("g");


            //////////////////////////
            var config = {
                "avatar_size": 10
            }

            var body = d3.select("body");
            var defs = svg.append('svg:defs');
            data = [{
                posx: 30,
                posy: 20,
                posx1: 25,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Client Grouping",
                width: 20
            }, {
                posx: 170,
                posy: 20,
                posx1: 165,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Organisations",
                width: 20
            }, {
                posx: 310,
                posy: 20,
                posx1: 305,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                //color: "#F05023",
                color: "#FFA500",
                "label": "C-Suite",
                width: 10
            }

            ];

            data.forEach(function (d, i) {
                svg.append("circle")
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)
                    .style("stroke-width", 1)
                    .attr("fill", d.color)
                    .style("stroke", d.color)

                svg.append('clipPath')
                    .attr('id', 'clipObj' + i)
                    .append('circle')
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)

            })

            data.forEach(function (d, i) {
                var xaxis, yaxis, width
                if (d.label == "Organisations" || d.label == "Client Grouping") {
                    width = config.avatar_size * 3;
                    xaxis = parseInt(d.posx - (config.avatar_size + config.avatar_size * .5));
                    yaxis = parseInt(d.posy - (config.avatar_size + config.avatar_size * .5));
                }
                else {
                    width = config.avatar_size + config.avatar_size * .1;
                    xaxis = parseInt(d.posx - config.avatar_size + config.avatar_size * .45);
                    yaxis = parseInt(d.posy - config.avatar_size + config.avatar_size * .45)
                }
                svg.append('image')
                    .attr('xlink:href', d.img)
                    .attr('width', width)
                    .attr('height', width)
                    .attr('x', xaxis)
                    .attr('y', yaxis)
                    // .attr('transform', 'translate(' + parseInt(d.posx1) + ',' + parseInt(d.posy1) + ')')
                    // .attr('transform', 'translate(' + parseInt(d.posx - config.avatar_size + config.avatar_size * .45) + ',' + parseInt(d.posy - config.avatar_size + config.avatar_size * .45) + ')')
                    .attr('clip-path', "url(#clipObj" + i + ")")

            })


            var text = svg.selectAll("text")
                .data(data)
                .enter()
                .append("text");


            var textLabels = text
                .attr("x", function (d) { return d.posx + 15; })
                .attr("y", function (d) { return d.posy + 5; })
                .text(function (d) { return d.label; });


            ////////////////////////////



            function zoomed() {
                g.attr('transform', 'translate(' + d3.event.transform.x + ',' + d3.event.transform.y + ') scale(' + d3.event.transform.k + ')');
                currentscale = d3.event.transform.k;
            };

            if (currentscale != "") {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleTo, currentscale);

            }

            function transition(zoomLevel) {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleBy, zoomLevel);
                //.call(zoom.transform, transform);
                //.on("end", function() { canvas.call(transition); });
            }

            d3.selectAll('button').on('click', function () {
                if (this.id === 'zoom_in') {
                    transition(1.2); // increase on 0.2 each time
                }
                if (this.id === 'zoom_out') {
                    transition(0.8); // deacrease on 0.2 each time
                }
                if (this.id === 'zoom_init') {
                    svg.transition()
                        .delay(100)
                        .duration(700)
                        .call(zoom.scaleTo, 1.5); // return to initial state
                }
                if (this.id === 'btnresize') {
                    if (sizetoggle == 0) {
                        $(div).css("height", "90%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "1100px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-10').addClass('col-md-9 ml-sm-auto col-lg-12');
                        //$('#seconddivgraph').hide();
                        $('#clientconnectionHelp').hide();
                        $('#showhideNav').hide();
                        $('#seconddivgraph').css({ 'margin-top': '0px' });

                        sizetoggle = 1;
                    }
                    else {
                        $(div).css("height", "75%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "800px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-12').addClass('col-md-9 ml-sm-auto col-lg-10');
                        //$('#seconddivgraph').show();
                        $('#clientconnectionHelp').show();
                        $('#showhideNav').show();
                        $('#seconddivgraph').css({ 'margin-top': '65px' });
                        sizetoggle = 0;
                    }
                }

            });

            var color = d3.scaleOrdinal(d3.schemeCategory20);


            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function (d) { return d.id; }).distance(function (d, i) { return 30 + i }))
                .force("charge", d3.forceManyBody().strength(-100))
                .force("center", d3.forceCenter(width / 2, height / 2));


            var link = g.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(nodelink.links)
                .enter().append("line")
                .style("stroke-dasharray", (0, function (d) {
                    if (d.value == 1) {
                        return 3;
                    }
                    else { return 0; }
                }))
                .style('stroke', function (d) {
                    //////debugger;
                    if (isManagedClient) {
                        if (d.source == relationshipManager || d.target == relationshipManager) {
                            return "#28AF73";
                        }
                        else if (relTeamMembers.indexOf(d.source) > -1 || relTeamMembers.indexOf(d.target) > -1) {
                            return "#A0235F";
                        }
                    }
                })
                .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = g.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodelink.nodes)
                .enter().append("g")
                .on('dblclick', releasenode)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            var circle = node.append("circle")
                .attr("r", function (d) { return d.rad; })
                .attr("fill", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke-width", function (d) { return GetNodeBackGrdStrokeWidth(d) })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(200, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent);
                    return tooltip.style("visibility", "visible");
                    // tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");

                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            // add circle clip
            var clipPath = node.append("clipPath")
                .attr("id", function (d, i) {
                    return "clipCircle_" + i
                })
                .append("circle")
                .attr("r", function (d) { return d.rad });


            var tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("z-index", "12")
                .style("visibility", "hidden")
                .style("background", "#5C9BD1")
                .style("color", "white")
                .style("padding", "5px")
                .style("margin", "2px")
                .style("font-size", "12px")
                .style("box-shadow", "0px 5px 15px 0px rgba(0,0,0,0.3)")
                .text("a simple tooltip");

            var image = node.append('svg:image').attr('class', 'entityImage').attr('xlink:href', function (d) {
                if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                    return d.imageUrl;
                }
                else {
                    return 'arup_/Images/Contact.png';
                }
            })
                .attr('width', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr('height', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr("clip-path", function (d, i) { return "url(#clipCircle_" + i + ")" })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent); return tooltip.style("visibility", "visible");

                    //  tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");
                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            var nodeText = node.append('svg:text').attr('class', 'nodetext').text(function (d) {
                var name = d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
                if (name.length > 20) {
                    name = name.substring(0, 20) + "...";
                }
                if (isManagedClient) {
                    if (d.id == relationshipManager) {
                        return name + " (RM)";
                    }
                    else if (relTeamMembers.indexOf(d.id) > -1) {
                        return name + " (RT)";
                    }
                    else {
                        return name;
                    }
                }
                return name;
            }).style("text-anchor", "middle");


            //var title = node.append("title")
            //     .text(function (d) { return d.id; });

            simulation
                .nodes(nodelink.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(nodelink.links);

            function ticked() {
                link
                    .attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                circle
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                clipPath
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                image
                    .attr("x", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.x - d.rad - d.rad * .5;
                        }
                        else {
                            return d.x - d.rad + d.rad * .45;
                        }
                    })
                    .attr("y", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.y - d.rad - d.rad * .5;
                        }
                        else {
                            return d.y - d.rad + d.rad * .45;
                        }

                    });


                nodeText
                    .attr("dx", function (d) { return d.x - function (d) { return d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "") }.length / 2 * 3; })
                    .attr("dy", function (d) {
                        if (d.group == 1) {
                            return d.y - 11;
                        }
                        else if (d.group == 2) {
                            return d.y - 8;
                        }
                        else if (d.group == 6) {
                            return d.y - 11;
                        }
                        else {
                            return d.y - 5;
                        }
                    });


            }


            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) simulation.alphaTarget(0);
                //d.fx = null;
                //d.fy = null;
                d.fx = d.x;
                d.fy = d.y;
            }

            function releasenode(d) {
                //d.fx = false; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
                //force.resume();
                if (!d3.event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            ////////////////////////////////////////////////////////////////////////////////

            function connectedNodes(d) {
                var connectedlinks = link.filter(function (e) {
                    //return e.source.id == d.id || e.target.id == d.id; //connected links
                    if (e.source.id == d.id || e.target.id == d.id) {
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.1);
                        return d.id;
                    }
                }).style('stroke', 'red')
                    .attr('r', 15);


                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.1)
                        .attr('r', 15);
            }
            function removehighlighting(d) {
                var connectedlinks = link.filter(function (e) {
                    if (e.source.id == d.id || e.target.id == d.id) { //connected links
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.6);
                        return d.id;
                    }
                })
                    .style('stroke', function (d) {
                        //////debugger;
                        if (isManagedClient) {
                            if (d.source.id == relationshipManager || d.target.id == relationshipManager) {
                                return "#28AF73";
                            }
                            else if (relTeamMembers.indexOf(d.source.id) > -1 || relTeamMembers.indexOf(d.target.id) > -1) {
                                return "#A0235F";
                            }
                            else return '#999'
                        }
                        else return '#999'

                    }).attr('r', 15)

                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.6)
                        .attr('r', 15);

            }
            /////////////////////////////////////////////////////
        }

        function DrawMatrixForceLayout2(div, conData, uniqueOrgList, activityList, isUserClick) {
            ////debugger;
            if (isUserClick == undefined)
                isUserClick = false;

            var nodelink = Object();
            nodelink.nodes = [];
            nodelink.links = [];

            if (!isUserClick) {
                nodelink.nodes.push({
                    id: accName, name: accName, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                });
            }

            for (var i = 0; i < uniqueOrgList.length; i++) {

                if (!isUserClick) {
                    nodelink.nodes.push({
                        id: uniqueOrgList[i].organizationid, name: uniqueOrgList[i].organizationname, group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                    });
                }
            }

            for (var i = 0; i < conData.length; i++) {

                if (!isUserClick) {
                    nodelink.nodes.push({
                        id: conData[i].contactid, name: conData[i].contactname, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + conData[i].contactimage, role: conData[i].role
                    });
                }
            }

            for (var i = 0; i < activityList.length; i++) {

                if (!isUserClick) {
                    nodelink.nodes.push({
                        id: activityList[i].activityid, name: activityList[i].subject, group: 1, rad: 10, userid: "500", imageUrl: 'arup_graphActivities', activitytype: activityList[i].actvititytypecode
                    });
                }
            }

            //for (var i = 0; i < uniqueOrgList.length; i++) {

            //    if (!isUserClick)
            //        //nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid, value: 2 });
            //        nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid });
            //}

            //*****Start - Populating Org hierarchy
            for (var i = 0; i < uniqueOrgList.length; i++) {
                if (uniqueOrgList[i].parentorganisationid == "") {
                    if (!isUserClick)
                        nodelink.links.push({ source: accName, target: uniqueOrgList[i].organizationid, value: 2 });
                }
            }
            for (var i = 0; i < uniqueOrgList.length; i++) {
                if (uniqueOrgList[i].parentorganisationid != "") {

                    var parentacchierarchy = '';
                    var _parentaccountid_value = '';
                    _parentaccountid_value = uniqueOrgList[i].parentorganisationid;
                    var hierarchyCount = 0;
                    do {
                        hierarchyCount++;
                        var req = new XMLHttpRequest();
                        req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v9.1/accounts(" + _parentaccountid_value + ")?$select=accountid,name,_parentaccountid_value,parentaccountid", false);
                        req.setRequestHeader("OData-MaxVersion", "4.0");
                        req.setRequestHeader("OData-Version", "4.0");
                        req.setRequestHeader("Accept", "application/json");
                        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                        req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
                        req.onreadystatechange = function () {
                            if (this.readyState === 4) {
                                req.onreadystatechange = null;
                                if (this.status === 200) {
                                    var result = JSON.parse(this.response);
                                    //
                                    var isNodeDuplicate = false;
                                    for (var k = 0; k < nodelink.nodes.length; k++) {
                                        if (nodelink.nodes[k].id == result["accountid"]) {
                                            isNodeDuplicate = true;
                                            break;
                                        }
                                    }
                                    if (isNodeDuplicate == false) {
                                        nodelink.nodes.push({
                                            id: uniqueOrgList[i].parentorganisationid, name: result["name"], group: 1, rad: 10, imageUrl: 'arup_graphOrg'
                                        });
                                    }
                                    //
                                    _parentaccountid_value = result["_parentaccountid_value"];
                                    if (result["_parentaccountid_value"] != undefined && result["_parentaccountid_value"] != null) {
                                        _parentaccountid_value = result["_parentaccountid_value"];
                                        if (parentacchierarchy == '')
                                            parentacchierarchy = uniqueOrgList[i].organizationid + "," + uniqueOrgList[i].parentorganisationid + "," + _parentaccountid_value;
                                        else
                                            parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;
                                    }
                                    else {
                                        _parentaccountid_value = "nodata";
                                    }
                                } else {
                                    //console.(this.statusText);
                                }
                            }
                        };
                        req.send();

                        if (_parentaccountid_value == "nodata") {
                            if (hierarchyCount == 1)
                                parentacchierarchy = "nodata";
                            //break;
                        }
                        //if (parentacchierarchy == '')
                        //    parentacchierarchy = _parentaccountid_value;
                        //else if (parentacchierarchy != 'nodata' && _parentaccountid_value != "nodata")
                        //    parentacchierarchy = parentacchierarchy + "," + _parentaccountid_value;

                    } while (_parentaccountid_value != "nodata");

                    if (parentacchierarchy != "nodata" && parentacchierarchy != "" && parentacchierarchy != null && parentacchierarchy != undefined) {
                        var splithierarchy = parentacchierarchy.split(",");
                        splithierarchy.reverse();
                        for (var j = 0; j < splithierarchy.length; j++) {
                            if (j == 0) {
                                //nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == accName && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: accName, target: splithierarchy[j], value: 2 });
                                }
                            }
                            else {
                                //nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                var isNodeLinkDuplicate = false;
                                for (var k = 0; k < nodelink.links.length; k++) {
                                    if (nodelink.links[k].source == splithierarchy[j - 1] && nodelink.links[k].target == splithierarchy[j]) {
                                        isNodeLinkDuplicate = true;
                                        break;
                                    }
                                }
                                if (isNodeLinkDuplicate == false) {
                                    nodelink.links.push({ source: splithierarchy[j - 1], target: splithierarchy[j], value: 2 });
                                }
                            }
                        }
                    }
                    else if (parentacchierarchy == "nodata") {
                        var isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == accName && nodelink.links[k].target == uniqueOrgList[i].parentorganisationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: accName, target: uniqueOrgList[i].parentorganisationid, value: 2 });
                        }

                        isNodeLinkDuplicate = false;
                        for (var k = 0; k < nodelink.links.length; k++) {
                            if (nodelink.links[k].source == uniqueOrgList[i].parentorganisationid && nodelink.links[k].target == uniqueOrgList[i].organizationid) {
                                isNodeLinkDuplicate = true;
                                break;
                            }
                        }
                        if (isNodeLinkDuplicate == false) {
                            nodelink.links.push({ source: uniqueOrgList[i].parentorganisationid, target: uniqueOrgList[i].organizationid, value: 2 });
                        }
                    }
                }
            }
            //*****End - Populating Org hierarchy
            ////debugger;

            //Linking Contacts with Related Organization
            for (var i = 0; i < conData.length; i++) {
                for (var j = 0; j < uniqueOrgList.length; j++) {
                    if (conData[i].organizationid == uniqueOrgList[j].organizationid) {
                        if (!isUserClick) {
                            var nodelinkIndex = uniqueOrgList.length + 1 + i + 1;
                            //nodelink.links.push({ source: uniqueOrgList[j].organizationid, target: conData[i].contactid, value: nodelinkIndex });
                            nodelink.links.push({ source: uniqueOrgList[j].organizationid, target: conData[i].contactid });
                            break;
                        }
                    }
                }
            }
            ////debugger;
            //Linking Activities with Related Contacts
            for (var i = 0; i < activityList.length; i++) {
                for (var j = 0; j < conData.length; j++) {
                    if (activityList[i].parentcustomerid == conData[j].contactid) {
                        if (!isUserClick) {
                            var nodelinkIndex = uniqueOrgList.length + 1 + i + 1;
                            //nodelink.links.push({ source: uniqueOrgList[j].organizationid, target: conData[i].contactid, value: nodelinkIndex });
                            nodelink.links.push({ source: conData[j].contactid, target: activityList[i].activityid });
                            break;
                        }
                    }
                }
            }

            var svgwidth = $("#connForcelay").width()

            var svg = d3.select("#connForcelay"),
                width = +svgwidth,
                height = +svg.attr("height");

            var zoom = d3.zoom().scaleExtent([1 / 2, 4]).on("zoom", zoomed);

            svg.call(zoom);


            //svg.append("rect")
            //    .attr("width", width)
            //    .attr("height", height)
            //    .style("fill", "none")
            //    .style("pointer-events", "all");

            var g = svg.append("g");


            //////////////////////////
            var config = {
                "avatar_size": 10
            }

            var body = d3.select("body");
            var defs = svg.append('svg:defs');
            data = [{
                posx: 30,
                posy: 20,
                posx1: 25,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Client Grouping",
                width: 20
            }, {
                posx: 170,
                posy: 20,
                posx1: 165,
                posy1: 15,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Organisations",
                width: 20
            }, {
                posx: 310,
                posy: 20,
                posx1: 305,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#32325F",
                "label": "Contacts",
                width: 10
            },
            {
                posx: 450,
                posy: 20,
                posx1: 445,
                posy1: 6,
                img: "arup_graphphonecall",
                color: "#1D8657",
                "label": "Phone Calls",
                width: 16
            },
            {
                posx: 590,
                posy: 20,
                posx1: 585,
                posy1: 6,
                img: "arup_graphtask",
                color: "#1D8657",
                "label": "Tasks",
                width: 16
            },
            {
                posx: 730,
                posy: 20,
                posx1: 725,
                posy1: 6,
                img: "arup_graphappointment",
                color: "#1D8657",
                "label": "Appointments",
                width: 16
            },
            {
                posx: 870,
                posy: 20,
                posx1: 865,
                posy1: 6,
                img: "arup_graphemail",
                color: "#1D8657",
                "label": "Emails",
                width: 16
            },
            {
                posx: 1010,
                posy: 20,
                posx1: 1005,
                posy1: 6,
                img: "arup_graphActivities",
                color: "#1D8657",
                "label": "Other Activities",
                width: 20
            },
            {
                posx: 30,
                posy: 60,
                posx1: 25,
                posy1: 6,
                img: "arup_/Images/Contact.png",
                color: "#28AF73",
                "label": "Decision Makers",
                width: 20
            },
            {
                posx: 170,
                posy: 60,
                posx1: 165,
                posy1: 6,
                img: "arup_/Images/Contact.png",
                color: "#FFA500",
                "label": "C-Suite",
                width: 20
            }

            ];

            data.forEach(function (d, i) {
                svg.append("circle")
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)
                    .style("stroke-width", 1)
                    .attr("fill", d.color)
                    .style("stroke", d.color)

                svg.append('clipPath')
                    .attr('id', 'clipObj' + i)
                    .append('circle')
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)

            })

            data.forEach(function (d, i) {
                var xaxis, yaxis, width
                if (d.label == "Organisations" || d.label == "Phone Calls" || d.label == "Tasks" || d.label == "Appointments" || d.label == "Emails" || d.label == "Other Activities" || d.label == "Client Grouping") {
                    width = config.avatar_size * 3;
                    xaxis = parseInt(d.posx - (config.avatar_size + config.avatar_size * .5));
                    yaxis = parseInt(d.posy - (config.avatar_size + config.avatar_size * .5));
                }
                else {
                    width = config.avatar_size + config.avatar_size * .1;
                    xaxis = parseInt(d.posx - config.avatar_size + config.avatar_size * .45);
                    yaxis = parseInt(d.posy - config.avatar_size + config.avatar_size * .45)
                }
                svg.append('image')
                    .attr('xlink:href', d.img)
                    .attr('width', width)
                    .attr('height', width)
                    .attr('x', xaxis)
                    .attr('y', yaxis)
                    // .attr('transform', 'translate(' + parseInt(d.posx1) + ',' + parseInt(d.posy1) + ')')
                    // .attr('transform', 'translate(' + parseInt(d.posx - config.avatar_size + config.avatar_size * .45) + ',' + parseInt(d.posy - config.avatar_size + config.avatar_size * .45) + ')')
                    .attr('clip-path', "url(#clipObj" + i + ")")

            })
            var text = svg.selectAll("text")
                .data(data)
                .enter()
                .append("text");


            var textLabels = text
                .attr("x", function (d) { return d.posx + 15; })
                .attr("y", function (d) { return d.posy + 5; })
                .text(function (d) { return d.label; });


            ////////////////////////////



            function zoomed() {
                g.attr('transform', 'translate(' + d3.event.transform.x + ',' + d3.event.transform.y + ') scale(' + d3.event.transform.k + ')');
                currentscale = d3.event.transform.k;
            };

            if (currentscale != "") {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleTo, currentscale);

            }

            function transition(zoomLevel) {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleBy, zoomLevel);
                //.call(zoom.transform, transform);
                //.on("end", function() { canvas.call(transition); });
            }

            d3.selectAll('button').on('click', function () {
                if (this.id === 'zoom_in') {
                    transition(1.2); // increase on 0.2 each time
                }
                if (this.id === 'zoom_out') {
                    transition(0.8); // deacrease on 0.2 each time
                }
                if (this.id === 'zoom_init') {
                    svg.transition()
                        .delay(100)
                        .duration(700)
                        .call(zoom.scaleTo, 1.5); // return to initial state
                }
                if (this.id === 'btnresize') {
                    if (sizetoggle == 0) {
                        $(div).css("height", "90%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "1100px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-10').addClass('col-md-9 ml-sm-auto col-lg-12');
                        //$('#seconddivgraph').hide();
                        $('#clientconnectionHelp').hide();
                        $('#showhideNav').hide();
                        $('#seconddivgraph').css({ 'margin-top': '0px' });

                        sizetoggle = 1;
                    }
                    else {
                        $(div).css("height", "75%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "800px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-12').addClass('col-md-9 ml-sm-auto col-lg-10');
                        //$('#seconddivgraph').show();
                        $('#clientconnectionHelp').show();
                        $('#showhideNav').show();
                        $('#seconddivgraph').css({ 'margin-top': '65px' });
                        sizetoggle = 0;
                    }
                }

            });

            var color = d3.scaleOrdinal(d3.schemeCategory20);


            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function (d) { return d.id; }).distance(function (d, i) { return 30 + i }))
                .force("charge", d3.forceManyBody().strength(-100))
                .force("center", d3.forceCenter(width / 2, height / 2));


            var link = g.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(nodelink.links)
                .enter().append("line")
                .style("stroke-dasharray", (0, function (d) {
                    if (d.value == 1) {
                        return 3;
                    }
                    else { return 0; }
                }))
                .style('stroke', function (d) {
                    //////debugger;
                    if (isManagedClient) {
                        if (d.source == relationshipManager || d.target == relationshipManager) {
                            return "#28AF73";
                        }
                        else if (relTeamMembers.indexOf(d.source) > -1 || relTeamMembers.indexOf(d.target) > -1) {
                            return "#A0235F";
                        }
                    }
                })
                .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = g.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodelink.nodes)
                .enter().append("g")
                .on('dblclick', releasenode)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            var circle = node.append("circle")
                .attr("r", function (d) { return d.rad; })
                .attr("fill", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke-width", function (d) { return GetNodeBackGrdStrokeWidth(d) })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent);
                    return tooltip.style("visibility", "visible");
                    // tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");

                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            // add circle clip
            var clipPath = node.append("clipPath")
                .attr("id", function (d, i) {
                    return "clipCircle_" + i
                })
                .append("circle")
                .attr("r", function (d) { return d.rad });


            var tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("z-index", "12")
                .style("visibility", "hidden")
                .style("background", "#5C9BD1")
                .style("color", "white")
                .style("padding", "5px")
                .style("margin", "2px")
                .style("font-size", "12px")
                .style("box-shadow", "0px 5px 15px 0px rgba(0,0,0,0.3)")
                .text("a simple tooltip");

            var image = node.append('svg:image').attr('class', 'entityImage').attr('xlink:href', function (d) {
                if (d.userid == "500") {
                    if (d.activitytype == "Appointment") {
                        // appointment
                        return 'arup_graphappointment'
                    }
                    else if (d.activitytype == "Email") {
                        // Email
                        return 'arup_graphemail'
                    }
                    else if (d.activitytype == "Task") {
                        // task
                        return 'arup_graphtask'
                    }
                    else if (d.activitytype == "Phone Call") {
                        // phone call
                        return 'arup_graphphonecall'
                    }
                    else
                        return 'arup_graphActivities'
                }
                if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                    return d.imageUrl;
                }
                else {
                    return 'arup_/Images/Contact.png';
                }
            })
                .attr('width', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr('height', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr("clip-path", function (d, i) { return "url(#clipCircle_" + i + ")" })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent); return tooltip.style("visibility", "visible");

                    //  tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");
                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            var nodeText = node.append('svg:text').attr('class', 'nodetext').text(function (d) {
                var name = d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
                if (name.length > 20) {
                    name = name.substring(0, 20) + "...";
                }
                if (isManagedClient) {
                    if (d.id == relationshipManager) {
                        return name + " (RM)";
                    }
                    else if (relTeamMembers.indexOf(d.id) > -1) {
                        return name + " (RT)";
                    }
                    else {
                        return name;
                    }
                }
                return name;
            }).style("text-anchor", "middle");


            //var title = node.append("title")
            //     .text(function (d) { return d.id; });

            simulation
                .nodes(nodelink.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(nodelink.links);

            function ticked() {
                link
                    .attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                circle
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                clipPath
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                image
                    .attr("x", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.x - d.rad - d.rad * .5;
                        }
                        else {
                            return d.x - d.rad + d.rad * .45;
                        }
                    })
                    .attr("y", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.y - d.rad - d.rad * .5;
                        }
                        else {
                            return d.y - d.rad + d.rad * .45;
                        }

                    });


                nodeText
                    .attr("dx", function (d) { return d.x - function (d) { return d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "") }.length / 2 * 3; })
                    .attr("dy", function (d) {
                        if (d.group == 1) {
                            return d.y - 11;
                        }
                        else if (d.group == 2) {
                            return d.y - 8;
                        }
                        else if (d.group == 6) {
                            return d.y - 11;
                        }
                        else {
                            return d.y - 5;
                        }
                    });


            }


            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) simulation.alphaTarget(0);
                //d.fx = null;
                //d.fy = null;
                d.fx = d.x;
                d.fy = d.y;
            }

            function releasenode(d) {
                //d.fx = false; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
                //force.resume();
                if (!d3.event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            ////////////////////////////////////////////////////////////////////////////////

            function connectedNodes(d) {
                var connectedlinks = link.filter(function (e) {
                    //return e.source.id == d.id || e.target.id == d.id; //connected links
                    if (e.source.id == d.id || e.target.id == d.id) {
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.1);
                        return d.id;
                    }
                }).style('stroke', 'red')
                    .attr('r', 15);


                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.1)
                        .attr('r', 15);
            }
            function removehighlighting(d) {
                var connectedlinks = link.filter(function (e) {
                    if (e.source.id == d.id || e.target.id == d.id) { //connected links
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.6);
                        return d.id;
                    }
                })
                    .style('stroke', function (d) {
                        //////debugger;
                        if (isManagedClient) {
                            if (d.source.id == relationshipManager || d.target.id == relationshipManager) {
                                return "#28AF73";
                            }
                            else if (relTeamMembers.indexOf(d.source.id) > -1 || relTeamMembers.indexOf(d.target.id) > -1) {
                                return "#A0235F";
                            }
                            else return '#999'
                        }
                        else return '#999'

                    }).attr('r', 15)

                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.6)
                        .attr('r', 15);

            }
            /////////////////////////////////////////////////////




            //var arupContact = d3.nest()
            //    .key(function (d) { return d['Name']; })
            //    .entries(conData);
            ////var clientContact = d3.nest()
            ////    .key(function (d) { return d['ccrm_clientgroupings']; })
            ////    .entries(conData);
            //arupContact.forEach(function (ac, i) {
            //    //var userpro = conData.filter(function (currentValue, index, arr) { if (currentValue['CRM User'] == ac.key) return true; });
            //    nodelink.nodes.push({
            //        id: ac.key, group: 2, rad: 7, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].UserImage, empstatus: ac.values[0].EmpStatus, name: ac.values[0].CRMUser
            //        , phone: ac.values[0].EmpPhone, jobtitleorCountry: ac.values[0].EmpCountry, userid: ac.values[0].userid,
            //        orgTownCity: ac.values[0].orgTownCity, orgDepartment: ac.values[0].orgDepartment, contactDepartment: ac.values[0].contactDepartment,
            //        contactEmail: ac.values[0].contactEmail, userCompanyCode: ac.values[0].userCompanyCode, userAccountingCode: ac.values[0].userAccountingCode,
            //        userRegion: ac.values[0].userRegion, orgOpenOpptys: ac.values[0].orgOpenOpptys, userTitle: ac.values[0].userTitle
            //    });
            //    if (!isUserClick)
            //        nodelink.links.push({ source: accName, target: ac.key, value: 2 });
            //})

            //var contactsids = [];
            //clientContact.forEach(function (ac, i) {
            //    //var contactpro = conData.filter(function (currentValue, index, arr) { if (currentValue['Contact'] == ac.key) return true; });
            //    var ContactRadius = 4;
            //    var ContactGroup = 3
            //    if (ac.values[0].AccountRole == "1")  // Decision Maker
            //    {
            //        ContactRadius = 10;
            //        ContactGroup = 6;
            //    }
            //    else if (ac.values[0].AccountRole == "3") // Influencer
            //    {
            //        ContactRadius = 10;
            //        ContactGroup = 6;
            //    }
            //    nodelink.nodes.push({
            //        id: ac.key, group: ContactGroup, rad: ContactRadius, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].ContactImage,
            //        name: ac.values[0].Contact, phone: ac.values[0].ContactPhone, jobtitleorCountry: ac.values[0].JobTitle, userid: "200",
            //        orgTownCity: ac.values[0].orgTownCity, orgDepartment: ac.values[0].orgDepartment, contactDepartment: ac.values[0].contactDepartment,
            //        contactEmail: ac.values[0].contactEmail, userCompanyCode: ac.values[0].userCompanyCode, userAccountingCode: ac.values[0].userAccountingCode,
            //        userRegion: ac.values[0].userRegion, orgOpenOpptys: ac.values[0].orgOpenOpptys, userTitle: ac.values[0].userTitle
            //    });
            //    //  contactsids.push(ac.values[0].ContactId);

            //})

            //conData.forEach(function (cc, i) {
            //    nodelink.links.push({ source: clientGroupingId, target: cc['UserId'], value: 1 });
            //})




        }

        function DrawMatrixForceLayout4(div, conData, connections) {
            ////debugger;

            //if (connections.length == 0)
            //    return;

            var nodelink = Object();
            nodelink.nodes = [];
            nodelink.links = [];

            nodelink.nodes.push({
                id: conData[0].contactid, name: conData[0].contactname, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + conData[0].contactimage
                //id: accName, name: accName, group: 1, rad: 10, imageUrl: '/%7B637275430220018341%7D/WebResources/arup_collaborate',height:30, width:30
            });

            if (connections.length > 0) {
                for (var i = 0; i < connections.length; i++) {
                    nodelink.nodes.push({
                        id: connections[i].CRMUserId, name: connections[i].CRMUser, recordtype: connections[i].recordtype, EmpStatus: connections[i].EmpStatus, group: 1, rad: 10, imageUrl: GetGlobalContext().getClientUrl() + connections[i].ContactImage
                    });
                }

                //var user = { organizationname: fullname, organizationid: sysuserid, ccrm_clientgroupings: ccrm_clientgroupings };
                for (var i = 0; i < connections.length; i++) {
                    nodelink.links.push({ source: conData[0].contactid, target: connections[i].CRMUserId, value: 2 });
                }
            }


            ////debugger;

            var svgwidth = $("#connForcelay").width()

            var svg = d3.select("#connForcelay"),
                width = +svgwidth,
                height = +svg.attr("height");

            var zoom = d3.zoom().scaleExtent([1 / 2, 4]).on("zoom", zoomed);

            svg.call(zoom);


            //svg.append("rect")
            //    .attr("width", width)
            //    .attr("height", height)
            //    .style("fill", "none")
            //    .style("pointer-events", "all");

            var g = svg.append("g");


            //////////////////////////
            var config = {
                "avatar_size": 10
            }

            var body = d3.select("body");
            var defs = svg.append('svg:defs');
            data = [{
                posx: 30,
                posy: 20,
                posx1: 25,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#32325F",
                "label": "Contacts",
                width: 10
            },
            {
                posx: 170,
                posy: 20,
                posx1: 165,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#666666",
                "label": "Arup Non-Employee",
                width: 10
            },
            {
                posx: 310,
                posy: 20,
                posx1: 305,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#1982AF",
                "label": "Arup Contacts",
                width: 10
            },
            {
                posx: 450,
                posy: 20,
                posx1: 445,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#A0235F",
                "label": "Arup Users",
                width: 10
            }
            ];

            data.forEach(function (d, i) {
                svg.append("circle")
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)
                    .style("stroke-width", 1)
                    .attr("fill", d.color)
                    .style("stroke", d.color)

                svg.append('clipPath')
                    .attr('id', 'clipObj' + i)
                    .append('circle')
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)

            })

            data.forEach(function (d, i) {
                var xaxis, yaxis, width
                if (d.label == "Organisations" || d.label == "Client Grouping") {
                    width = config.avatar_size * 3;
                    xaxis = parseInt(d.posx - (config.avatar_size + config.avatar_size * .5));
                    yaxis = parseInt(d.posy - (config.avatar_size + config.avatar_size * .5));
                }
                else {
                    width = config.avatar_size + config.avatar_size * .1;
                    xaxis = parseInt(d.posx - config.avatar_size + config.avatar_size * .45);
                    yaxis = parseInt(d.posy - config.avatar_size + config.avatar_size * .45)
                }
                svg.append('image')
                    .attr('xlink:href', d.img)
                    .attr('width', width)
                    .attr('height', width)
                    .attr('x', xaxis)
                    .attr('y', yaxis)
                    // .attr('transform', 'translate(' + parseInt(d.posx1) + ',' + parseInt(d.posy1) + ')')
                    // .attr('transform', 'translate(' + parseInt(d.posx - config.avatar_size + config.avatar_size * .45) + ',' + parseInt(d.posy - config.avatar_size + config.avatar_size * .45) + ')')
                    .attr('clip-path', "url(#clipObj" + i + ")")

            })
            var text = svg.selectAll("text")
                .data(data)
                .enter()
                .append("text");


            var textLabels = text
                .attr("x", function (d) { return d.posx + 15; })
                .attr("y", function (d) { return d.posy + 5; })
                .text(function (d) { return d.label; });


            ////////////////////////////



            function zoomed() {
                g.attr('transform', 'translate(' + d3.event.transform.x + ',' + d3.event.transform.y + ') scale(' + d3.event.transform.k + ')');
                currentscale = d3.event.transform.k;
            };

            if (currentscale != "") {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleTo, currentscale);

            }

            function transition(zoomLevel) {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleBy, zoomLevel);
                //.call(zoom.transform, transform);
                //.on("end", function() { canvas.call(transition); });
            }

            d3.selectAll('button').on('click', function () {
                if (this.id === 'zoom_in') {
                    transition(1.2); // increase on 0.2 each time
                }
                if (this.id === 'zoom_out') {
                    transition(0.8); // deacrease on 0.2 each time
                }
                if (this.id === 'zoom_init') {
                    svg.transition()
                        .delay(100)
                        .duration(700)
                        .call(zoom.scaleTo, 1.5); // return to initial state
                }
                if (this.id === 'btnresize') {
                    if (sizetoggle == 0) {
                        $(div).css("height", "90%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "1100px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-10').addClass('col-md-9 ml-sm-auto col-lg-12');
                        //$('#seconddivgraph').hide();
                        $('#clientconnectionHelp').hide();
                        $('#showhideNav').hide();
                        $('#seconddivgraph').css({ 'margin-top': '0px' });

                        sizetoggle = 1;
                    }
                    else {
                        $(div).css("height", "75%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "500px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-12').addClass('col-md-9 ml-sm-auto col-lg-10');
                        //$('#seconddivgraph').show();
                        $('#clientconnectionHelp').show();
                        $('#showhideNav').show();
                        $('#seconddivgraph').css({ 'margin-top': '65px' });
                        sizetoggle = 0;
                    }
                }

            });

            var color = d3.scaleOrdinal(d3.schemeCategory20);


            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function (d) { return d.id; }).distance(function (d, i) { return 30 + i }))
                .force("charge", d3.forceManyBody().strength(-100))
                .force("center", d3.forceCenter(width / 2, height / 2));


            var link = g.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(nodelink.links)
                .enter().append("line")
                .style("stroke-dasharray", (0, function (d) {
                    if (d.value == 1) {
                        return 3;
                    }
                    else { return 0; }
                }))
                .style('stroke', function (d) {
                    //////debugger;
                    if (isManagedClient) {
                        if (d.source == relationshipManager || d.target == relationshipManager) {
                            return "#28AF73";
                        }
                        else if (relTeamMembers.indexOf(d.source) > -1 || relTeamMembers.indexOf(d.target) > -1) {
                            return "#A0235F";
                        }
                    }
                })
                .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = g.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodelink.nodes)
                .enter().append("g")
                .on('dblclick', releasenode)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            var circle = node.append("circle")
                .attr("r", function (d) { return d.rad; })
                .attr("fill", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke-width", function (d) { return GetNodeBackGrdStrokeWidth(d) })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent);
                    return tooltip.style("visibility", "visible");
                    // tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");

                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            // add circle clip
            var clipPath = node.append("clipPath")
                .attr("id", function (d, i) {
                    return "clipCircle_" + i
                })
                .append("circle")
                .attr("r", function (d) { return d.rad });


            var tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("z-index", "12")
                .style("visibility", "hidden")
                .style("background", "#5C9BD1")
                .style("color", "white")
                .style("padding", "5px")
                .style("margin", "2px")
                .style("font-size", "12px")
                .style("box-shadow", "0px 5px 15px 0px rgba(0,0,0,0.3)")
                .text("a simple tooltip");

            var image = node.append('svg:image').attr('class', 'entityImage').attr('xlink:href', function (d) {
                if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                    return d.imageUrl;
                }
                else {
                    return 'arup_/Images/Contact.png';
                }
            })
                .attr('width', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        //return d.rad * 3;
                        return d.rad + d.rad * .1;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr('height', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        //return d.rad * 3;
                        return d.rad + d.rad * .1;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr("clip-path", function (d, i) { return "url(#clipCircle_" + i + ")" })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent); return tooltip.style("visibility", "visible");

                    //  tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");
                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            var nodeText = node.append('svg:text').attr('class', 'nodetext').text(function (d) {
                var name = d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
                if (name.length > 20) {
                    name = name.substring(0, 20) + "...";
                }
                if (isManagedClient) {
                    if (d.id == relationshipManager) {
                        return name + " (RM)";
                    }
                    else if (relTeamMembers.indexOf(d.id) > -1) {
                        return name + " (RT)";
                    }
                    else {
                        return name;
                    }
                }
                return name;
            }).style("text-anchor", "middle");


            //var title = node.append("title")
            //     .text(function (d) { return d.id; });

            simulation
                .nodes(nodelink.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(nodelink.links);

            function ticked() {
                link
                    .attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                circle
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                clipPath
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                image
                    .attr("x", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.x - d.rad - d.rad * .5;
                        }
                        else {
                            return d.x - d.rad + d.rad * .45;
                        }
                    })
                    .attr("y", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.y - d.rad - d.rad * .5;
                        }
                        else {
                            return d.y - d.rad + d.rad * .45;
                        }

                    });


                nodeText
                    .attr("dx", function (d) { return d.x - function (d) { return d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "") }.length / 2 * 3; })
                    .attr("dy", function (d) {
                        if (d.group == 1) {
                            return d.y - 11;
                        }
                        else if (d.group == 2) {
                            return d.y - 8;
                        }
                        else if (d.group == 6) {
                            return d.y - 11;
                        }
                        else {
                            return d.y - 5;
                        }
                    });


            }


            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) simulation.alphaTarget(0);
                //d.fx = null;
                //d.fy = null;
                d.fx = d.x;
                d.fy = d.y;
            }

            function releasenode(d) {
                //d.fx = false; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
                //force.resume();
                if (!d3.event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            ////////////////////////////////////////////////////////////////////////////////

            function connectedNodes(d) {
                var connectedlinks = link.filter(function (e) {
                    //return e.source.id == d.id || e.target.id == d.id; //connected links
                    if (e.source.id == d.id || e.target.id == d.id) {
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.1);
                        return d.id;
                    }
                }).style('stroke', 'red')
                    .attr('r', 15);


                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.1)
                        .attr('r', 15);
            }
            function removehighlighting(d) {
                var connectedlinks = link.filter(function (e) {
                    if (e.source.id == d.id || e.target.id == d.id) { //connected links
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.6);
                        return d.id;
                    }
                })
                    .style('stroke', function (d) {
                        //////debugger;
                        if (isManagedClient) {
                            if (d.source.id == relationshipManager || d.target.id == relationshipManager) {
                                return "#28AF73";
                            }
                            else if (relTeamMembers.indexOf(d.source.id) > -1 || relTeamMembers.indexOf(d.target.id) > -1) {
                                return "#A0235F";
                            }
                            else return '#999'
                        }
                        else return '#999'

                    }).attr('r', 15)

                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.6)
                        .attr('r', 15);

            }
        }

        function getDataforUser(userid, id) {
            ////debugger;
            userid = "200";
            if (userid === "100") {
                PopulateConnection(true, true, true, true, true);
            }
            else if (userid === "200") {
                PopulateConnectionForContact(id);
            }
            else if (userid == "400" || userid == "500" || userid == "1000") {
                return;
            }
            if (userid != "" && userid != "100" && userid != "200") {
                $('#chkShowAllConnectionsforUser').prop('checked', false);
                PopulateConnectionForuser(userid);
                currentselectedUserid = userid;
            }
        }

        var currentorgid = "";
        var currentorgname = "";
        var currentOpportunityid = "";
        function getDataforOpportunity(userid, id, name) {
            $('#chkShowBidTeam').prop('checked', false);
            var chkShowInternal = $("#chkShowInternal").is(':checked') ? true : false;
            var chkShowBidTeam = $("#chkShowBidTeam").is(':checked') ? true : false;
            $("input[name=opportunitystatus]").prop("checked", false);
            if (userid == "600") {
                currentOpportunityid = id;
                OpportunityMatrix(currentorgid, currentorgname, id, chkShowBidTeam, "", chkShowInternal);
            }
            else if (userid == "100") {
                currentorgid = id;
                currentorgname = name;
                currentOpportunityid = "";
                OpportunityMatrix(id, name, "", chkShowBidTeam, "", chkShowInternal);
                //PopulateOpportunities();
            }

        }

        function PopulateConnectionForContact(clickcontactid) {
            ////debugger;
            ConnectionContactData = "";
            $("#Connectionfilters").show();
            $("#Accountfilters").hide();
            $("#Userfilters").hide();

            InititializeGraphDivs();

            InitializeHomeButtonClick();
            var contactLst = [];
            var contactFetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='contact'>" +
                "<attribute name='fullname' />" +
                "<attribute name='telephone1' />" +
                "<attribute name='jobtitle' />" +
                "<attribute name='mobilephone' />" +
                "<attribute name='emailaddress1' />" +
                "<attribute name='address1_city' />" +
                "<attribute name='address1_line1' />" +
                "<attribute name='entityimage_url' alias='contactimage' />" +
                "<attribute name='address1_county' />" +
                "<attribute name='contactid' />" +
                "<order attribute='fullname' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='contactid' operator='eq' value='" + clickcontactid + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            var req = new XMLHttpRequest();
            req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v9.1/contacts?fetchXml=" + encodeURIComponent(contactFetchXML), false);
            req.setRequestHeader("OData-MaxVersion", "4.0");
            req.setRequestHeader("OData-Version", "4.0");
            req.setRequestHeader("Accept", "application/json");
            req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
            req.onreadystatechange = function () {
                if (this.readyState === 4) {
                    req.onreadystatechange = null;
                    if (this.status === 200) {
                        var results = JSON.parse(this.response);
                        contact = results.value;

                        if (contact.length > 0) {
                            var contactid = contact[0].contactid;
                            var contactname = contact[0].fullname != undefined ? contact[0].fullname : "";
                            var contactimage = contact[0].contactimage != undefined ? contact[0].contactimage : "";
                            var contact = { contactid: contactid, contactname: contactname, contactimage: contactimage };
                            contactLst.push(contact);
                        }
                        else {
                            //Xrm.Utility.alertDialog(this.statusText);
                        }
                    }
                }
            };
            req.send();

            //new fectxml -  everything is same just modified to populate user/contact image url
            var fetchXML = "<fetch distinct='true' >" +
                "<entity name='connection' >" +
                "<attribute name='record1id' alias='Contact' />" +
                "<attribute name='record2id' alias='CRM_User' />" +
                "<order attribute='record1id' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='statuscodename' operator='eq' value='Active' />" +
                "<condition attribute='record1objecttypecode' operator='eq' value='2' />" +
                "<filter type='or'>" +
                "<condition attribute='record2objecttypecode' operator='eq' value='2' />" +
                "<condition attribute='record2objecttypecode' operator='eq' value='8' />" +
                "</filter>" +
                "</filter>" +
                "<link-entity name='contact' from='contactid' to='record1id' link-type='inner' alias='co' >" +
                "<attribute name='accountrolecode' />" +
                "<attribute name='jobtitle' />" +
                "<attribute name='department' alias = 'contactdepartment'  />" +
                "<attribute name='emailaddress1' alias ='contactemail'/>" +
                "<attribute name='telephone1' alias = 'contactphone' />" +
                "<attribute name='emailaddress1' />" +
                "<attribute name='ccrm_countryid' />" +
                "<attribute name='accountrolecodename' />" +
                "<attribute name='contactid' />" +
                "<attribute name='entityimage_url' alias='contactimage' />" +
                "<filter type='and' >" +
                "<condition attribute='statuscodename' operator='eq' value='Active' />" +
                "<condition attribute='contactid' operator='eq' value='" + clickcontactid + "' />" +
                "</filter>" +
                "</link-entity>" +
                "<link-entity name='systemuser' from='systemuserid' to='record2id' link-type='outer' >" +
                "<attribute name='arup_employmentstatus' alias='employmentstatus' />" +
                "<attribute name='entityimage_url' alias='userimage' />" +
                "<attribute name='title' />" +
                "<attribute name='systemuserid' />" +
                "<attribute name='entityimage_url' />" +
                "<attribute name='address1_country' alias='usercountry' />" +
                "<attribute name='mobilephone' />" +
                "<attribute name='address1_telephone1' alias='userphone' />" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";
            var connectionLst = [];
            var req = new XMLHttpRequest();
            req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v9.1/connections?fetchXml=" + encodeURIComponent(fetchXML), false);
            req.setRequestHeader("OData-MaxVersion", "4.0");
            req.setRequestHeader("OData-Version", "4.0");
            req.setRequestHeader("Accept", "application/json");
            req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
            req.onreadystatechange = function () {
                if (this.readyState === 4) {
                    req.onreadystatechange = null;
                    if (this.status === 200) {
                        var results = JSON.parse(this.response);
                        connections = results.value;
                        //var connections = XrmServiceToolkit.Soap.Fetch(fetchXML);

                        var connectionLstTbl = [];

                        if (connections.length > 0) {
                            for (var i = 0; i < connections.length; i++) {
                                //////debugger;
                                var connection = connections[i];
                                var contact = connection["Contact"] != undefined ? connection["Contact@OData.Community.Display.V1.FormattedValue"] : "";
                                var contactid = connection["Contact"] != undefined ? connection["Contact"] : "";
                                //var contactcountry = connection.attributes.ccrm_countryid != undefined ? connection.attributes.ccrm_countryid.name : "";
                                var contactphone = connection["contactphone"] != undefined ? connection["contactphone"] : "";
                                var contactDepartment = connection["contactdepartment"] != undefined ? connection["contactdepartment"] : "";
                                var contactEmail = connection["contactemail"] != undefined ? connection["contactemail"] : "";
                                var jobTitle = connection['co.jobtitle'] != undefined ? connection['co.jobtitle'] : "";
                                var recordtype = connection["CRM_User"] != undefined ? connection["CRM_User@Microsoft.Dynamics.CRM.lookuplogicalname"] : "";
                                var userName = connection["CRM_User"] != undefined ? connection["CRM_User@OData.Community.Display.V1.FormattedValue"] : "";
                                var userid = connection["CRM_User"] != undefined ? connection["CRM_User"] : "";
                                var contactimage = connection["contactimage"] != undefined ? connection["contactimage"] : "";
                                var userimage = connection["userimage"] != undefined ? connection["userimage"] : "";
                                var employmentstatus = connection["employmentstatus"] != undefined ? connection["employmentstatus@OData.Community.Display.V1.FormattedValue"] : "";
                                var userPhone = connection["userphone"] != undefined ? connection["userphone"] : "";
                                var usercountry = connection["usercountry"] != undefined ? connection["usercountry"] : "";
                                var accountRole = connection['co.accountrolecode'] != undefined ? connection['co.accountrolecode'] : "";
                                var listid = connection["memberlistid"] != undefined ? connection["memberlistid"] : "";
                                var listName = connection["memberlistname"] != undefined ? connection["memberlistname"] : "";
                                var mlcreatedon = connection["mlcreatedon"] != undefined ? Date.parse(connection["mlcreatedon"]) : "";
                                var mlOwner = connection["mlownerid"] != undefined ? connection["mlcreatedon@OData.Community.Display.V1.FormattedValue"] : "";
                                //var MlOffice = connection["mlarupoffice"] != undefined ? connection.attributes.mlarupoffice.name : "";
                                var MlOffice = connection["mlarupoffice"] != undefined ? connection["mlarupoffice"] : "";
                                var activityid = connection["activityid"] != undefined ? connection["activityid"] : "";
                                var activitysubject = connection["activitysubject"] != undefined ? connection["activitysubject"] : "";
                                var activityowner = connection["activityowner"] != undefined ? connection["activityowner@OData.Community.Display.V1.FormattedValue"] : "";
                                var activityduedate = connection["activityduedate"] != undefined ? connection["activityduedate"] : "";
                                var activitypriority = connection["activitypriority"] != undefined ? connection["activitypriority@OData.Community.Display.V1.FormattedValue"] : "";
                                var activitystatus = connection["activitystatecode"] != undefined ? connection["activitystatecode@OData.Community.Display.V1.FormattedValue"] : "";
                                var actvititytypecode = connection["activitytypecode"] != undefined ? connection["activitytypecode@OData.Community.Display.V1.FormattedValue"] : "";
                                var conn = {
                                    "Contact": contact, "ContactId": contactid, "JobTitle": jobTitle, "ContactPhone": contactphone, "contactDepartment": contactDepartment,
                                    "contactEmail": contactEmail, "CRMUser": userName, "CRMUserId": userid, "recordtype": recordtype, "ContactImage": contactimage,
                                    "UserImage": userimage, "EmpStatus": employmentstatus, "EmpPhone": userPhone,
                                    "EmpCountry": usercountry, "userid": userid, "AccountRole": accountRole,
                                    "MemberListId": listid, "MemberListName": listName
                                    , "MLCreatedon": mlcreatedon, "MLOwner": mlOwner, "MLOffice": MlOffice
                                    , "ActivityId": activityid, "ActivitySubject": activitysubject, "ActivityDueDate": activityduedate,
                                    "ActivityOwner": activityowner, "ActivityPriority": activitypriority, "ActivityStatus": activitystatus,
                                    "ActivityTypeCode": actvititytypecode
                                };
                                connectionLst.push(conn);
                            }
                            ConnectionContactData = "";
                            $('#chkMarketingList').prop('checked', true);
                            $('#chkContactActivities').prop('checked', false);

                        }
                    } else {
                        Xrm.Utility.alertDialog(this.statusText);
                    }
                }
            };
            req.send();

            DrawMatrixForceLayout4("#connectionMatrix", contactLst, connectionLst, true, false);
        }

        var ChildOrgids = [];
        function getChildOrganisations(organisationid) {

            var fetchxml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='account'>" +
                "<attribute name='accountid' />" +
                "<filter type='and'>" +
                "<condition attribute='parentaccountid' operator='eq' value='" + organisationid + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>"
            var Orgaccounts = XrmServiceToolkit.Soap.Fetch(fetchxml);

            if (Orgaccounts.length > 0) {
                for (var i = 0; i < Orgaccounts.length; i++) {
                    var accountid = Orgaccounts[i].attributes.accountid != undefined ? Orgaccounts[i].attributes.accountid.value : "";
                    if (accountid != "") {
                        ChildOrgids.push(accountid);
                        getChildOrganisations(accountid);
                    }
                }

            }
        }

        function PopulateConnectionForuser(clickuserid, HasOrg) {

            if (HasOrg == undefined)
                HasOrg = true;

            ConnectionContactData = "";
            $("#Connectionfilters").hide();
            $("#Accountfilters").hide();
            $("#Userfilters").show();

            InititializeGraphDivs();
            InitializeHomeButtonClick();

            var hasOrgCondition = "";
            if (HasOrg)
                hasOrgCondition = "<condition attribute='accountid' operator='eq' value='" + accId + "' />";
            else {
                // find all child organisations
                if (ChildOrgids.length == 0) {
                    ChildOrgids = [];
                    ChildOrgids.push(accId);
                    getChildOrganisations(accId);
                }
                // form filter condition for below fetchxml
                hasOrgCondition = "<condition attribute='accountid' operator='in'>";
                for (var i = 0; i < ChildOrgids.length; i++) {
                    hasOrgCondition = hasOrgCondition + "<value>" + ChildOrgids[i] + "</value>";
                }
                hasOrgCondition = hasOrgCondition + " </condition>";
            }
            var fetchXML = "<fetch distinct='true' >" +
                "<entity name='connection' >" +
                "<attribute name='record1id' alias='Contact' />" +
                "<attribute name='record2id' alias='CRM_User' />" +
                "<order attribute='record1id' descending='false' />" +
                "<filter>" +
                "<condition attribute='statuscodename' operator='eq' value='Active' />" +
                "<condition attribute='record1objecttypecode' operator='eq' value='2' />" +
                "<condition attribute='record2objecttypecode' operator='eq' value='8' />" +
                "</filter>" +
                "<link-entity name='contact' from='contactid' to='record1id' link-type='inner' alias='co' >" +
                "<attribute name='accountrolecode' />" +
                "<attribute name='jobtitle' />" +
                "<attribute name='department' alias = 'contactdepartment'  />" +
                "<attribute name='emailaddress1' alias ='contactemail'/>" +
                "<attribute name='telephone1' alias = 'contactphone' />" +
                "<attribute name='ccrm_countryid' />" +
                "<attribute name='accountrolecodename' />" +
                "<attribute name='contactid' />" +
                "<attribute name='entityimage_url' alias='contactimage' />" +
                "<filter type='and' >" +
                "<condition attribute='statuscodename' operator='eq' value='Active' />" +
                "</filter>" +
                "<link-entity name='account' from='accountid' to='parentcustomerid' link-type='inner' alias='ac' >" +
                "<attribute name='accountid' />" +
                "<attribute name='name' />" +
                "<attribute name='address1_city' alias = 'orgtowncity' />" +
                "<attribute name='ccrm_address1attentiondepartment' alias = 'orgdepartment' />" +
                "<attribute name='arup_openopportunitiescalc' alias = 'orgopenopptys' />" +
                "<filter type='and' >" +
                hasOrgCondition +
                "</filter>" +
                "</link-entity>" +
                "</link-entity>" +
                "<link-entity name='systemuser' from='systemuserid' to='record2id' >" +
                "<attribute name='arup_employmentstatus' alias='employmentstatus' />" +
                "<attribute name='entityimage_url' alias='userimage' />" +
                "<attribute name='title' alias = 'usertitle' />" +
                "<attribute name='systemuserid' />" +
                "<attribute name='entityimage_url' />" +
                "<attribute name='address1_country' alias = 'usercountry' />" +
                "<attribute name='mobilephone' />" +
                "<attribute name='address1_telephone1' alias = 'userphone' />" +
                "<link-entity name='ccrm_arupaccountingcode' from='ccrm_arupaccountingcodeid' to='ccrm_accountingcentreid' link-type='outer' alias='User_ACC' >" +
                "<attribute name='ccrm_arupcompanycode' alias='usercompanycode'/>" +
                "<attribute name='ccrm_arupaccountingcode' alias ='useraccountingcode' /> " +
                "<attribute name='ccrm_name' />" +
                "</link-entity>" +
                "<link-entity name='ccrm_arupregion' from='ccrm_arupregionid' to='ccrm_arupregionid' link-type='outer' alias='User_AR' >" +
                "<attribute name='ccrm_name' alias = 'userregion' />" +
                "</link-entity>" +
                "<filter type='and'>" +
                "<condition attribute='systemuserid' operator='eq' value='" + clickuserid + "' />" +
                "</filter>" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";

            var fetchXMLCon = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>" +
                "<entity name='contact'>" +
                "<attribute name='fullname' />" +
                "<attribute name='parentcustomerid' />" +
                "<attribute name='emailaddress1' />" +
                "<attribute name='jobtitle' />" +
                "<attribute name='ccrm_countryid' />" +
                "<attribute name='address1_city' />" +
                "<attribute name='address1_line1' />" +
                "<attribute name='address1_postalcode' />" +
                "<attribute name='contactid' />" +
                "<order attribute='fullname' descending='false' />" +
                "<link-entity name='account' from='accountid' to='parentcustomerid' alias='aj' link-type='inner'>" +
                "<attribute name='accountid' />" +
                "<attribute name='name' />" +
                "</link-entity>" +
                "<filter type='and'>" +
                "<condition attribute='statecode' operator='eq' value='0' />" +
                //"<condition attribute='parentcustomerid' operator='eq' value='{051A6371-B843-E211-BDB4-78E7D1652028}' />" +
                "<condition entityname= 'aj' attribute='accountid' operator='eq' uitype='account' value='" + accId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            //////debugger;
            var connections = XrmServiceToolkit.Soap.Fetch(fetchXML);
            var contacts = XrmServiceToolkit.Soap.Fetch(fetchXMLCon);
            var connectionLst = [];
            var connectionLstTbl = [];
            var contactLst = [];

            if (connections.length > 0) {
                for (var i = 0; i < connections.length; i++) {
                    //////debugger;
                    var connection = connections[i];
                    var orgTownCity = connection.attributes.orgtowncity != undefined ? connection.attributes.orgtowncity.value : "";
                    var orgDepartment = connection.attributes.orgdepartment != undefined ? connection.attributes.orgdepartment.value : "";
                    var orgOpenOpptys = connection.attributes.orgopenopptys != undefined ? connection.attributes.orgopenopptys.value : "";

                    var contact = connection.attributes.Contact != undefined ? connection.attributes.Contact.name : "";
                    var contactid = connection.attributes.Contact != undefined ? connection.attributes.Contact.id : "";

                    var contactDepartment = connection.attributes.contactdepartment != undefined ? connection.attributes.contactdepartment.value : "";
                    var contactEmail = connection.attributes.contactemail != undefined ? connection.attributes.contactemail.value : "";

                    //var contactcountry = connection.attributes.ccrm_countryid != undefined ? connection.attributes.ccrm_countryid.name : "";
                    var contactphone = connection.attributes.contactphone != undefined ? connection.attributes.contactphone.value : "";
                    var jobTitle = connection.attributes['co.jobtitle'] != undefined ? connection.attributes['co.jobtitle'].value : "";
                    var userName = connection.attributes.CRM_User != undefined ? connection.attributes.CRM_User.name : "";
                    var userid = connection.attributes.CRM_User != undefined ? connection.attributes.CRM_User.id : "";
                    var contactimage = connection.attributes.contactimage != undefined ? connection.attributes.contactimage.value : "";
                    var userimage = connection.attributes.userimage != undefined ? connection.attributes.userimage.value : "";
                    var employmentstatus = connection.attributes.employmentstatus != undefined ? connection.attributes.employmentstatus.value : "";
                    var userPhone = connection.attributes.userphone != undefined ? connection.attributes.userphone.value : "";
                    var usercountry = connection.attributes.usercountry != undefined ? connection.attributes.usercountry.value : "";
                    var accountRole = connection.attributes['co.accountrolecode'] != undefined ? connection.attributes['co.accountrolecode'].value : "";

                    var userCompanyCode = connection.attributes.usercompanycode != undefined ? connection.attributes.usercompanycode.value : "";
                    var userAccountingCode = connection.attributes.useraccountingcode != undefined ? connection.attributes.useraccountingcode.value : "";
                    var userRegion = connection.attributes.userregion != undefined ? connection.attributes.userregion.value : "";
                    var userTitle = connection.attributes.usertitle != undefined ? connection.attributes.usertitle.value : "";
                    var organisationid = connection.attributes['ac.accountid'] != undefined ? connection.attributes['ac.accountid'].value : "";
                    var organisationame = connection.attributes['ac.name'] != undefined ? connection.attributes['ac.name'].value : "";
                    var conn = {
                        "Contact": contact, "ContactId": contactid, "JobTitle": jobTitle, "ContactPhone": contactphone,
                        "CRMUser": userName, "CRM UserId": userid, "ContactImage": contactimage,
                        "UserImage": userimage, "EmpStatus": employmentstatus, "EmpPhone": userPhone,
                        "EmpCountry": usercountry, "userid": userid, "AccountRole": accountRole,
                        "orgTownCity": orgTownCity, "orgDepartment": orgDepartment, "contactDepartment": contactDepartment,
                        "contactEmail": contactEmail, "userCompanyCode": userCompanyCode, "userAccountingCode": userAccountingCode,
                        "userRegion": userRegion, "orgOpenOpptys": orgOpenOpptys, "userTitle": userTitle,
                        "OrganisationName": organisationame, "OrganisationId": organisationid
                    };
                    if (userid == clickuserid) {
                        connectionLst.push(conn);
                    }
                    var conntable = {
                        "Contact": contact, "Job Title": jobTitle, "CRM User": userName
                    };

                    connectionLstTbl.push(conntable);

                }

                //  DrawMatrixTable("#connectionMatrixtable", connectionLstTbl);
                if (HasOrg == "") {
                    DrawMatrixForceLayoutForAllUsers("#connectionMatrix", connectionLst, true);
                }
                else {
                    DrawMatrixForceLayout("#connectionMatrix", connectionLst, true);
                }
            }

            if (contacts.length > 0) {
                for (var j = 0; j < contacts.length; j++) {
                    var contact = contacts[j];
                    var contFound = contExists(contact.attributes.contactid.value);

                    if (!contFound) {
                        var fullName = contact.attributes.fullname != undefined ? contact.attributes.fullname.value : "";
                        //var orgId = connection.attributes['co.jobtitle'] != undefined ? connection.attributes['co.jobtitle'].value : "";
                        var jobTitle = contact.attributes.jobtitle != undefined ? contact.attributes.jobtitle.value : "";
                        var email = contact.attributes.emailaddress1 != undefined ? contact.attributes.emailaddress1.value : "";

                        var contarray = {
                            "Full Name": fullName, "Job Title": jobTitle, "Email": email
                        };

                        contactLst.push(contarray);
                    }

                    function contExists(contid) {
                        return connectionLst.some(function (el) {
                            return el.ContactId === contid;
                        });
                    }
                }


            }
        }

        function DrawMatrixForceLayoutForAllUsers(div, conData, isUserClick) {

            if (isUserClick == undefined)
                isUserClick = false;

            var nodelink = Object();
            nodelink.nodes = [];
            nodelink.links = [];


            var arupContact = d3.nest()
                .key(function (d) { return d['CRM UserId']; })
                .entries(conData);

            var arupOrganisation = d3.nest()
                .key(function (d) { return d['OrganisationId']; })
                .entries(conData);
            var clientContact = d3.nest()
                .key(function (d) { return d['ContactId']; })
                .entries(conData);

            arupOrganisation.forEach(function (ac, i) {
                nodelink.nodes.push({
                    id: ac.key, group: 1, rad: 7, imageUrl: 'arup_graphOrg', empstatus: ac.values[0].EmpStatus, name: ac.values[0].OrganisationName
                    , phone: ac.values[0].EmpPhone, jobtitleorCountry: ac.values[0].EmpCountry, userid: "1000",
                    orgTownCity: ac.values[0].orgTownCity, orgDepartment: ac.values[0].orgDepartment, contactDepartment: ac.values[0].contactDepartment,
                    contactEmail: ac.values[0].contactEmail, userCompanyCode: ac.values[0].userCompanyCode, userAccountingCode: ac.values[0].userAccountingCode,
                    userRegion: ac.values[0].userRegion, orgOpenOpptys: ac.values[0].orgOpenOpptys, userTitle: ac.values[0].userTitle
                });
            })

            arupContact.forEach(function (ac, i) {
                nodelink.nodes.push({
                    id: ac.key, group: 1, rad: 8, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].UserImage, empstatus: ac.values[0].EmpStatus, name: ac.values[0].CRMUser
                    , phone: ac.values[0].EmpPhone, jobtitleorCountry: ac.values[0].EmpCountry, userid: ac.values[0].userid,
                    orgTownCity: ac.values[0].orgTownCity, orgDepartment: ac.values[0].orgDepartment, contactDepartment: ac.values[0].contactDepartment,
                    contactEmail: ac.values[0].contactEmail, userCompanyCode: ac.values[0].userCompanyCode, userAccountingCode: ac.values[0].userAccountingCode,
                    userRegion: ac.values[0].userRegion, orgOpenOpptys: ac.values[0].orgOpenOpptys, userTitle: ac.values[0].userTitle
                });
            })

            conData.forEach(function (cc, i) {
                nodelink.links.push({ source: cc['CRM UserId'], target: cc['OrganisationId'], value: 2 });
            })


            var contactsids = [];
            clientContact.forEach(function (ac, i) {
                //var contactpro = conData.filter(function (currentValue, index, arr) { if (currentValue['Contact'] == ac.key) return true; });
                var ContactRadius = 4;
                var ContactGroup = 3
                if (ac.values[0].AccountRole == "1")  // Decision Maker
                {
                    ContactRadius = 10;
                    ContactGroup = 6;
                }
                else if (ac.values[0].AccountRole == "3") // Influencer
                {
                    ContactRadius = 10;
                    ContactGroup = 6;
                }
                nodelink.nodes.push({
                    id: ac.key, group: ContactGroup, rad: ContactRadius, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].ContactImage,
                    name: ac.values[0].Contact, phone: ac.values[0].ContactPhone, jobtitleorCountry: ac.values[0].JobTitle, userid: "200",
                    orgTownCity: ac.values[0].orgTownCity, orgDepartment: ac.values[0].orgDepartment, contactDepartment: ac.values[0].contactDepartment,
                    contactEmail: ac.values[0].contactEmail, userCompanyCode: ac.values[0].userCompanyCode, userAccountingCode: ac.values[0].userAccountingCode,
                    userRegion: ac.values[0].userRegion, orgOpenOpptys: ac.values[0].orgOpenOpptys, userTitle: ac.values[0].userTitle
                });
                //  contactsids.push(ac.values[0].ContactId);

            })

            conData.forEach(function (cc, i) {
                nodelink.links.push({ source: cc['OrganisationId'], target: cc['ContactId'], value: 1 });
            })


            var svgwidth = $("#connForcelay").width()

            var svg = d3.select("#connForcelay"),
                width = +svgwidth,
                height = +svg.attr("height");

            var zoom = d3.zoom().scaleExtent([1 / 2, 4]).on("zoom", zoomed);

            svg.call(zoom);


            svg.append("rect")
                .attr("width", width)
                .attr("height", height)
                .style("fill", "none")
                .style("pointer-events", "all");

            var g = svg.append("g");


            //////////////////////////
            var config = {
                "avatar_size": 10
            }

            var body = d3.select("body");
            var defs = svg.append('svg:defs');
            data = [{
                posx: 30,
                posy: 20,
                posx1: 25,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#28AF73",
                "label": "Relationship Manager",
                width: 10
            }, {
                posx: 170,
                posy: 20,
                posx1: 165,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#A0235F",
                "label": "Relationship Team",
                width: 10
            }, {
                posx: 310,
                posy: 20,
                posx1: 305,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#666666",
                "label": "Arup Non-Employee",
                width: 10
            },
            {
                posx: 450,
                posy: 20,
                posx1: 445,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#1982AF",
                "label": "Arup Contacts",
                width: 10
            },
            {
                posx: 590,
                posy: 20,
                posx1: 585,
                posy1: 15,
                img: "arup_/Images/Contact.png",
                color: "#32325F",
                "label": "Arup Users",
                width: 10
            },
            {
                posx: 730,
                posy: 20,
                posx1: 718,
                posy1: 10,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Organisations",
                width: 20
            }

            ];

            data.forEach(function (d, i) {
                svg.append("circle")
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)
                    .style("stroke-width", 1)
                    .attr("fill", d.color)
                    .style("stroke", d.color)

                svg.append('clipPath')
                    .attr('id', 'clipObj' + i)
                    .append('circle')
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)

            })

            data.forEach(function (d, i) {
                var xaxis, yaxis, width
                if (d.label == "Organisations") {
                    width = config.avatar_size * 3;
                    xaxis = parseInt(d.posx - (config.avatar_size + config.avatar_size * .5));
                    yaxis = parseInt(d.posy - (config.avatar_size + config.avatar_size * .5));
                }
                else {
                    width = config.avatar_size + config.avatar_size * .1;
                    xaxis = parseInt(d.posx - config.avatar_size + config.avatar_size * .45);
                    yaxis = parseInt(d.posy - config.avatar_size + config.avatar_size * .45)
                }
                svg.append('image')
                    .attr('xlink:href', d.img)
                    .attr('width', width)
                    .attr('height', width)
                    .attr('x', xaxis)
                    .attr('y', yaxis)
                    // .attr('transform', 'translate(' + parseInt(d.posx1) + ',' + parseInt(d.posy1) + ')')
                    // .attr('transform', 'translate(' + parseInt(d.posx - config.avatar_size + config.avatar_size * .45) + ',' + parseInt(d.posy - config.avatar_size + config.avatar_size * .45) + ')')
                    .attr('clip-path', "url(#clipObj" + i + ")")

            })
            var text = svg.selectAll("text")
                .data(data)
                .enter()
                .append("text");


            var textLabels = text
                .attr("x", function (d) { return d.posx + 15; })
                .attr("y", function (d) { return d.posy + 5; })
                .text(function (d) { return d.label; });


            ////////////////////////////



            function zoomed() {
                g.attr('transform', 'translate(' + d3.event.transform.x + ',' + d3.event.transform.y + ') scale(' + d3.event.transform.k + ')');
                currentscale = d3.event.transform.k;
            };

            if (currentscale != "") {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleTo, currentscale);

            }

            function transition(zoomLevel) {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleBy, zoomLevel);
                //.call(zoom.transform, transform);
                //.on("end", function() { canvas.call(transition); });
            }

            d3.selectAll('button').on('click', function () {
                if (this.id === 'zoom_in') {
                    transition(1.2); // increase on 0.2 each time
                }
                if (this.id === 'zoom_out') {
                    transition(0.8); // deacrease on 0.2 each time
                }
                if (this.id === 'zoom_init') {
                    svg.transition()
                        .delay(100)
                        .duration(700)
                        .call(zoom.scaleTo, 1.5); // return to initial state
                }
                if (this.id === 'btnresize') {
                    if (sizetoggle == 0) {
                        $(div).css("height", "90%");
                        $(div).css("width", "100%");
                        $('#connForcelay').css("height", "1100px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-10').addClass('col-md-9 ml-sm-auto col-lg-12');
                        //$('#seconddivgraph').hide();
                        $('#clientconnectionHelp').hide();
                        $('#showhideNav').hide();
                        $('#seconddivgraph').css({ 'margin-top': '0px' });

                        sizetoggle = 1;
                    }
                    else {
                        $(div).css("height", "70%");
                        $(div).css("width", "100%");

                        $('#connForcelay').css("height", "800px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-12').addClass('col-md-9 ml-sm-auto col-lg-10');
                        //$('#seconddivgraph').show();
                        $('#clientconnectionHelp').show();
                        $('#showhideNav').show();
                        $('#seconddivgraph').css({ 'margin-top': '65px' });
                        sizetoggle = 0;
                    }
                }
            });

            var color = d3.scaleOrdinal(d3.schemeCategory20);


            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function (d) { return d.id; }).distance(function (d, i) { return 30 + i }))
                .force("charge", d3.forceManyBody().strength(-100))
                .force("center", d3.forceCenter(width / 2, height / 2));


            var link = g.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(nodelink.links)
                .enter().append("line")
                .style("stroke-dasharray", (0, function (d) {
                    if (d.value == 1) {
                        return 3;
                    }
                    else { return 0; }
                }))
                .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = g.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodelink.nodes)
                .enter().append("g")
                .on('dblclick', releasenode)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            var circle = node.append("circle")
                .attr("r", function (d) { return d.rad; })
                .attr("fill", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke-width", function (d) { return GetNodeBackGrdStrokeWidth(d) })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent);
                    return tooltip.style("visibility", "visible");
                    // tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");

                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            // add circle clip
            var clipPath = node.append("clipPath")
                .attr("id", function (d, i) {
                    return "clipCircle_" + i
                })
                .append("circle")
                .attr("r", function (d) { return d.rad });


            var tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("z-index", "12")
                .style("visibility", "hidden")
                .style("background", "#5C9BD1")
                .style("color", "white")
                .style("padding", "5px")
                .style("margin", "2px")
                .style("font-size", "12px")
                .style("box-shadow", "0px 5px 15px 0px rgba(0,0,0,0.3)")
                .text("a simple tooltip");

            var image = node.append('svg:image').attr('class', 'entityImage').attr('xlink:href', function (d) {
                if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                    return d.imageUrl;
                }
                else {
                    return 'arup_/Images/Contact.png';
                }
            })
                .attr('width', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr('height', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr("clip-path", function (d, i) { return "url(#clipCircle_" + i + ")" })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforUser(d.userid, d.id)
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForConnection(d);
                    tooltip.html(tooltipcontent); return tooltip.style("visibility", "visible");

                    //  tooltip.html(d.name + "<br/>" + d.jobtitleorCountry + "<br/>" + d.phone); return tooltip.style("visibility", "visible");
                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) { removehighlighting(d); return tooltip.style("visibility", "hidden"); });

            var nodeText = node.append('svg:text').attr('class', 'nodetext').text(function (d) {
                var name = d.name != undefined ? d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "") : "";

                if (name.length > 20) {
                    name = name.substring(0, 20) + "...";
                }
                if (isManagedClient) {
                    if (d.id == relationshipManager) {
                        return name + " (RM)";
                    }
                    else if (relTeamMembers.indexOf(d.id) > -1) {
                        return name + " (RT)";
                    }
                    else {
                        return name;
                    }
                }
                return name;
            }).style("text-anchor", "middle");


            //var title = node.append("title")
            //     .text(function (d) { return d.id; });

            simulation
                .nodes(nodelink.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(nodelink.links);

            function ticked() {
                link
                    .attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                circle
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                clipPath
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                image
                    .attr("x", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.x - d.rad - d.rad * .5;
                        }
                        else {
                            return d.x - d.rad + d.rad * .45;
                        }
                    })
                    .attr("y", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.y - d.rad - d.rad * .5;
                        }
                        else {
                            return d.y - d.rad + d.rad * .45;
                        }

                    });


                nodeText
                    .attr("dx", function (d) { return d.x - function (d) { return d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "") }.length / 2 * 3; })
                    .attr("dy", function (d) {
                        if (d.group == 1) {
                            return d.y - 11;
                        }
                        else if (d.group == 2) {
                            return d.y - 8;
                        }
                        else if (d.group == 6) {
                            return d.y - 11;
                        }
                        else {
                            return d.y - 5;
                        }
                    });


            }


            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) simulation.alphaTarget(0);
                //d.fx = null;
                //d.fy = null;
                d.fx = d.x;
                d.fy = d.y;
            }

            function releasenode(d) {
                //d.fx = false; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
                //force.resume();
                if (!d3.event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            ////////////////////////////////////////////////////////////////////////////////

            function connectedNodes(d) {
                var connectedlinks = link.filter(function (e) {
                    //return e.source.id == d.id || e.target.id == d.id; //connected links
                    if (e.source.id == d.id || e.target.id == d.id) {
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.1);
                        return d.id;
                    }
                }).style('stroke', 'red')
                    .attr('r', 15);


                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.1)
                        .attr('r', 15);
            }
            function removehighlighting(d) {
                var connectedlinks = link.filter(function (e) {
                    if (e.source.id == d.id || e.target.id == d.id) { //connected links
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.6);
                        return d.id;
                    }
                }).style('stroke', '#999')
                    .attr('r', 15)

                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.6)
                        .attr('r', 15);

            }
            /////////////////////////////////////////////////////



        }
        function GetNodeBackGrdStrokeWidth(d) {
            if (d.hasActivitiesInLast6Months == 'Yes') {
                return 2;
            }
            if (isManagedClient) {
                if (d.id == relationshipManager) {
                    return 2;
                }
                else if (relTeamMembers.indexOf(d.id) > -1) {
                    return 2;
                }
                else return 1;
            }
            else return 1;

        }
        function GetNodeBackGrdClr(d, color) {
            //debugger;
            if (d.recordtype == "systemuser") {
                if (d.EmpStatus != undefined && d.EmpStatus != null && d.EmpStatus == 'Employee') {
                    //Employee
                    return '#A0235F';
                }
                else if (d.EmpStatus != undefined && d.EmpStatus != null && d.EmpStatus != 'Employee') {
                    return '#666666';
                }
            }
            else if (d.recordtype == "contact") {
                return '#1982AF';
            }
            if (d.role != undefined && d.role != null && d.role == 'Decision Maker') {
                return '#28AF73';
            }
            if (d.role != undefined && d.role != null && d.role == 'C-Suite') {
                return '#FFA500';
            }
            if (isManagedClient) {
                if (d.id == relationshipManager) {
                    return "#28AF73";
                }
                else if (relTeamMembers.indexOf(d.id) > -1) {
                    return "#A0235F";
                }
            }
            if (d.userid == "100") {
                return "#875005";
            }
            else if (d.userid == "200") {
                return "#1982AF";
            }
            else if (d.userid == "400") {
                return "#F05023";
            }
            else if (d.userid == "500") {
                return "#1D8657";
            }
            else if (d.userid == "600") {
                if (d.OpptyInternal == "Yes") {
                    return '#fcfda5';
                }
                else {
                    return "#FDD7A5";
                }
            }
            else if (d.userid == "700") {
                return "#46488C";
            }
            else {
                return "#32325F";
            }
            //debugger;
            if (d.hasActivitiesInLast6Months != undefined && d.hasActivitiesInLast6Months != null && d.hasActivitiesInLast6Months == 'Yes') {
                //Employee
                return '#FF0000';
            }
            return color(d.group);
        }
        function GetNodeStrokeClr(d, color) {
            //debugger;
            if (d.hasActivitiesInLast6Months != undefined && d.hasActivitiesInLast6Months != null && d.hasActivitiesInLast6Months == 'Yes') {
                //Employee
                return '#FF0000';
            }
            if (d.recordtype == "systemuser") {
                if (d.EmpStatus != undefined && d.EmpStatus != null && d.EmpStatus == 'Employee') {
                    //Employee
                    return '#A0235F';
                }
                else if (d.EmpStatus != undefined && d.EmpStatus != null && d.EmpStatus != 'Employee') {
                    return '#666666';
                }
            }
            else if (d.recordtype == "contact") {
                return '#1982AF';
            }
            if (d.role != undefined && d.role != null && d.role == 'Decision Maker') {
                return '#28AF73';
            }
            if (d.role != undefined && d.role != null && d.role == 'C-Suite') {
                return '#FFA500';
            }
            if (isManagedClient) {
                if (d.id == relationshipManager) {
                    return "#28AF73";
                }
                else if (relTeamMembers.indexOf(d.id) > -1) {
                    return "#A0235F";
                }
            }
            if (d.userid == "100") {
                return "#875005";
            }
            else if (d.userid == "200") {
                return "#1982AF";
            }
            else if (d.userid == "400") {
                return "#F05023";
            }
            else if (d.userid == "500") {
                return "#1D8657";
            }
            else if (d.userid == "600") {
                if (d.OpptyInternal == "Yes") {
                    return '#fcfda5';
                }
                else {
                    return "#FDD7A5";
                }
            }
            else if (d.userid == "700") {
                return "#46488C";
            }
            else {
                return "#32325F";
            }

            return color(d.group);
        }

        var ConnectionContactData = "";
        function DrawMatrixForceLayoutContacts(div, conData, ShowMarketingList, ShowActivities) {
            var fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' >" +
                "<entity name='contact' >" +
                "<attribute name='fullname' />" +
                "<attribute name='parentcustomerid' />" +
                "<attribute name='contactid' />" +
                "<attribute name='accountrolecode' />" +
                "<attribute name='entityimage_url' alias='contactimage' />" +
                "<order attribute='fullname' descending='false' />" +
                "<link-entity name='account' from='accountid' to='parentcustomerid' link-type='inner' alias='ParentCustomer' >" +
                "<attribute name='name' />" +
                "<attribute name='accountid' />" +
                "<filter type='and' >" +
                "<condition attribute='ccrm_clientgroupings' operator='eq' value='" + clientGroupingId + "' />" +
                "</filter>" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";
            ////debugger;
            fetchXML = "?fetchXml=" + encodeURIComponent(fetchXML);
            var contactList = [];
            var organizationList = [];
            var organizations = [];
            initialContactList = [];
            Xrm.WebApi.retrieveMultipleRecords('contact', fetchXML
            ).then(function success(result) {
                for (var i = 0; i < result.entities.length; i++) {
                    //console.log(result.entities[i]);
                    var contactid = result.entities[i]["contactid"];
                    var fullname = result.entities[i]["fullname"] != undefined ? result.entities[i]["fullname"] : "";
                    var contactimage = result.entities[i]["contactimage"] != undefined ? result.entities[i]["contactimage"] : "";
                    var role = result.entities[i]["accountrolecode"] != undefined ? result.entities[i]["accountrolecode@OData.Community.Display.V1.FormattedValue"] : "";
                    var parentcustomerid = result.entities[i]["_parentcustomerid_value"] != undefined ? result.entities[i]["_parentcustomerid_value"] : "";
                    var parentcustomername = result.entities[i]["_parentcustomerid_value@OData.Community.Display.V1.FormattedValue"] != undefined ? result.entities[i]["_parentcustomerid_value@OData.Community.Display.V1.FormattedValue"] : "";
                    var contact = { contactname: fullname, contactid: contactid, organizationid: parentcustomerid, organizationname: parentcustomername, contactimage: contactimage, role: role };
                    contactList.push(contact);
                    initialContactList.push(contact);
                    var organizationid = result.entities[i]["ParentCustomer.accountid"];
                    organizations[i] = organizationid;
                }

                var uniqueOrgList = getUnique(organizations);
                for (var i = 0; i < uniqueOrgList.length; i++) {
                    for (var j = 0; j < result.entities.length; j++) {
                        //console.log(result.entities[i]);
                        if (uniqueOrgList[i] == result.entities[j]["ParentCustomer.accountid"]) {
                            var organizationid = result.entities[j]["ParentCustomer.accountid"];
                            var organizationname = result.entities[j]["ParentCustomer.name"] != undefined ? result.entities[j]["ParentCustomer.name"] : "";
                            var org = { organizationid: organizationid, organizationname: organizationname };
                            organizationList.push(org);
                            break;
                        }
                    }
                }
                //debugger;
                fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                    "<entity name='activitypointer'>" +
                    "<attribute name='subject' />" +
                    "<attribute name='activityid' />" +
                    "<attribute name='activitytypecode' />" +
                    "<filter type='and'>" +
                    "<filter type='or'>" +
                    "<condition attribute='activitytypecode' operator='eq' value='4201' />" +
                    "<condition attribute='activitytypecode' operator='eq' value='4210' />" +
                    "</filter>" +
                    "<condition attribute='createdon' operator='last-x-months' value='6' />" +
                    "</filter>" +
                    "<link-entity name='contact' from='contactid' to='regardingobjectid' link-type='inner' alias='ParentContact'>" +
                    "<attribute name='contactid' />" +
                    "<attribute name='accountrolecode' />" +
                    "<link-entity name='account' from='accountid' to='parentcustomerid' link-type='inner' alias='ae'>" +
                    "<filter type='and'>" +
                    "<condition attribute='ccrm_clientgroupings' operator='eq' value='" + clientGroupingId + "' />" +
                    "</filter>" +
                    "</link-entity>" +
                    "</link-entity>" +
                    "</entity>" +
                    "</fetch>";
                fetchXML = "?fetchXml=" + encodeURIComponent(fetchXML);
                var activityList = [];
                Xrm.WebApi.retrieveMultipleRecords('activitypointer', fetchXML
                ).then(function success(result) {
                    for (var i = 0; i < result.entities.length; i++) {
                        //console.log(result.entities[i]);
                        var activityid = result.entities[i]["activityid"];
                        var subject = result.entities[i]["subject"] != undefined ? result.entities[i]["subject"] : "";
                        var parentcustomerid = result.entities[i]["ParentContact.contactid"] != undefined ? result.entities[i]["ParentContact.contactid"] : "";
                        var actvititytypecode = result.entities[i]["activitytypecode@OData.Community.Display.V1.FormattedValue"] != undefined ? result.entities[i]["activitytypecode@OData.Community.Display.V1.FormattedValue"] : "";
                        var activity = { activityid: activityid, subject: subject, parentcustomerid: parentcustomerid, actvititytypecode: actvititytypecode };
                        activityList.push(activity);
                    }
                    if (contactList.length > 0) {
                        //DrawMatrixForceLayout1("#connectionMatrix", contactList, organizationList, false);
                        //DrawMatrixForceLayout1("#connectionMatrix", contactList, initialOrgList, false);
                        DrawMatrixForceLayout1("#connectionMatrix", contactList, initialOrgList, activityList, false);
                    }
                    else {
                        $("#p").text("No contact records found");
                    }

                },
                    function (error) {
                        console.log(error.message);
                    });


            },
                function (error) {
                    console.log(error.message);
                });


            //var userRecords = XrmServiceToolkit.Soap.Fetch(fetchXML);
            //var contactList = [];
            //if (userRecords.length > 0) {
            //    for (var i = 0; i < userRecords.length; i++) {
            //        //////debugger;
            //        var contactid = userRecords[i].attributes.contactid.value;
            //        var fullname = userRecords[i].attributes.fullname != undefined ? userRecords[i].attributes.fullname.value : "";
            //        var parentcustomerid = userRecords[i].attributes.parentcustomerid != undefined ? userRecords[i].attributes.parentcustomerid.value : "";
            //        var contact = { "Name": fullname, contactId: contactid, parentcustomerid: parentcustomerid,  };
            //        contactList.push(contact);
            //    }
            //    //DrawTable("#relationshipTeam", userList, Object.keys(userList[0]));
            //}

            //bindCountsforGraph(connectionLstTbl.length, accOpenOpptys, decisionmakercount);
            //  DrawMatrixTable("#connectionMatrixtable", connectionLstTbl);

        }

        function DrawMatrixForceLayoutCSuiteAndDecisionMakers(div, conData, ShowMarketingList, ShowActivities) {
            var fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' >" +
                "<entity name='contact' >" +
                "<attribute name='fullname' />" +
                "<attribute name='parentcustomerid' />" +
                "<attribute name='contactid' />" +
                "<attribute name='accountrolecode' />" +
                "<attribute name='entityimage_url' alias='contactimage' />" +
                "<order attribute='fullname' descending='false' />" +
                "<filter type='or' >" +
                "<condition attribute='accountrolecode' operator='eq' value='1' />" +
                "<condition attribute='accountrolecode' operator='eq' value='770000000' />" +
                "</filter>" +
                "<link-entity name='account' from='accountid' to='parentcustomerid' link-type='inner' alias='ParentCustomer' >" +
                "<attribute name='name' />" +
                "<attribute name='accountid' />" +
                "<filter type='and' >" +
                "<condition attribute='ccrm_clientgroupings' operator='eq' value='" + clientGroupingId + "' />" +
                "</filter>" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";
            ////debugger;
            fetchXML = "?fetchXml=" + encodeURIComponent(fetchXML);
            var contactList = [];
            var organizationList = [];
            var organizations = [];
            initialContactList = [];
            Xrm.WebApi.retrieveMultipleRecords('contact', fetchXML
            ).then(function success(result) {
                for (var i = 0; i < result.entities.length; i++) {
                    //console.log(result.entities[i]);
                    var contactid = result.entities[i]["contactid"];
                    var fullname = result.entities[i]["fullname"] != undefined ? result.entities[i]["fullname"] : "";
                    var contactimage = result.entities[i]["contactimage"] != undefined ? result.entities[i]["contactimage"] : "";
                    var parentcustomerid = result.entities[i]["_parentcustomerid_value"] != undefined ? result.entities[i]["_parentcustomerid_value"] : "";
                    var parentcustomername = result.entities[i]["_parentcustomerid_value@OData.Community.Display.V1.FormattedValue"] != undefined ? result.entities[i]["_parentcustomerid_value@OData.Community.Display.V1.FormattedValue"] : "";
                    var role = result.entities[i]["accountrolecode"] != undefined ? result.entities[i]["accountrolecode@OData.Community.Display.V1.FormattedValue"] : "";
                    //var role = "Decision Maker";
                    var contact = { contactname: fullname, contactid: contactid, organizationid: parentcustomerid, organizationname: parentcustomername, contactimage: contactimage, role: role };
                    contactList.push(contact);
                    initialContactList.push(contact);
                    var organizationid = result.entities[i]["ParentCustomer.accountid"];
                    organizations[i] = organizationid;
                }

                var uniqueOrgList = getUnique(organizations);
                for (var i = 0; i < uniqueOrgList.length; i++) {
                    for (var j = 0; j < result.entities.length; j++) {
                        //console.log(result.entities[i]);
                        if (uniqueOrgList[i] == result.entities[j]["ParentCustomer.accountid"]) {
                            var organizationid = result.entities[j]["ParentCustomer.accountid"];
                            var organizationname = result.entities[j]["ParentCustomer.name"] != undefined ? result.entities[j]["ParentCustomer.name"] : "";
                            var org = { organizationid: organizationid, organizationname: organizationname };
                            organizationList.push(org);
                            break;
                        }
                    }
                }

                //debugger;
                fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                    "<entity name='activitypointer'>" +
                    "<attribute name='subject' />" +
                    "<attribute name='activityid' />" +
                    "<attribute name='activitytypecode' />" +
                    "<filter type='and'>" +
                    "<filter type='or'>" +
                    "<condition attribute='activitytypecode' operator='eq' value='4201' />" +
                    "<condition attribute='activitytypecode' operator='eq' value='4210' />" +
                    "</filter>" +
                    "<condition attribute='createdon' operator='last-x-months' value='6' />" +
                    "</filter>" +
                    "<link-entity name='contact' from='contactid' to='regardingobjectid' link-type='inner' alias='ParentContact'>" +
                    "<attribute name='contactid' />" +
                    "<attribute name='accountrolecode' />" +
                    "<filter type='or' >" +
                    "<condition attribute='accountrolecode' operator='eq' value='1' />" +
                    "<condition attribute='accountrolecode' operator='eq' value='770000000' />" +
                    "</filter>" +
                    "<link-entity name='account' from='accountid' to='parentcustomerid' link-type='inner' alias='ae'>" +
                    "<filter type='and'>" +
                    "<condition attribute='ccrm_clientgroupings' operator='eq' value='" + clientGroupingId + "' />" +
                    "</filter>" +
                    "</link-entity>" +
                    "</link-entity>" +
                    "</entity>" +
                    "</fetch>";
                fetchXML = "?fetchXml=" + encodeURIComponent(fetchXML);
                var activityList = [];
                Xrm.WebApi.retrieveMultipleRecords('activitypointer', fetchXML
                ).then(function success(result) {
                    for (var i = 0; i < result.entities.length; i++) {
                        //console.log(result.entities[i]);
                        var activityid = result.entities[i]["activityid"];
                        var subject = result.entities[i]["subject"] != undefined ? result.entities[i]["subject"] : "";
                        var parentcustomerid = result.entities[i]["ParentContact.contactid"] != undefined ? result.entities[i]["ParentContact.contactid"] : "";
                        var actvititytypecode = result.entities[i]["activitytypecode@OData.Community.Display.V1.FormattedValue"] != undefined ? result.entities[i]["activitytypecode@OData.Community.Display.V1.FormattedValue"] : "";
                        var activity = { activityid: activityid, subject: subject, parentcustomerid: parentcustomerid, actvititytypecode: actvititytypecode };
                        activityList.push(activity);
                    }
                    if (contactList.length > 0) {
                        //DrawMatrixForceLayout1("#connectionMatrix", contactList, organizationList, false);
                        DrawMatrixForceLayoutForCSuiteAndDecisionMakers("#connectionMatrix", contactList, initialOrgList, activityList, false);
                    }
                    else {
                        $("#p").text("No Decision maker contact records found");
                    }

                },
                    function (error) {
                        console.log(error.message);
                    });
            },
                function (error) {
                    console.log(error.message);
                });
        }

        function DrawMatrixForceLayoutDecisionMakers(div, conData, ShowMarketingList, ShowActivities) {
            var fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' >" +
                "<entity name='contact' >" +
                "<attribute name='fullname' />" +
                "<attribute name='parentcustomerid' />" +
                "<attribute name='contactid' />" +
                "<attribute name='accountrolecode' />" +
                "<attribute name='entityimage_url' alias='contactimage' />" +
                "<order attribute='fullname' descending='false' />" +
                "<filter type='and' >" +
                "<condition attribute='accountrolecode' operator='eq' value='1' />" +
                "</filter>" +
                "<link-entity name='account' from='accountid' to='parentcustomerid' link-type='inner' alias='ParentCustomer' >" +
                "<attribute name='name' />" +
                "<attribute name='accountid' />" +
                "<filter type='and' >" +
                "<condition attribute='ccrm_clientgroupings' operator='eq' value='" + clientGroupingId + "' />" +
                "</filter>" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";
            ////debugger;
            fetchXML = "?fetchXml=" + encodeURIComponent(fetchXML);
            var contactList = [];
            var organizationList = [];
            var organizations = [];
            initialContactList = [];
            Xrm.WebApi.retrieveMultipleRecords('contact', fetchXML
            ).then(function success(result) {
                for (var i = 0; i < result.entities.length; i++) {
                    //console.log(result.entities[i]);
                    var contactid = result.entities[i]["contactid"];
                    var fullname = result.entities[i]["fullname"] != undefined ? result.entities[i]["fullname"] : "";
                    var contactimage = result.entities[i]["contactimage"] != undefined ? result.entities[i]["contactimage"] : "";
                    var parentcustomerid = result.entities[i]["_parentcustomerid_value"] != undefined ? result.entities[i]["_parentcustomerid_value"] : "";
                    var parentcustomername = result.entities[i]["_parentcustomerid_value@OData.Community.Display.V1.FormattedValue"] != undefined ? result.entities[i]["_parentcustomerid_value@OData.Community.Display.V1.FormattedValue"] : "";
                    var role = result.entities[i]["accountrolecode"] != undefined ? result.entities[i]["accountrolecode@OData.Community.Display.V1.FormattedValue"] : "";
                    //var role = "Decision Maker";
                    var contact = { contactname: fullname, contactid: contactid, organizationid: parentcustomerid, organizationname: parentcustomername, contactimage: contactimage, role: role };
                    contactList.push(contact);
                    initialContactList.push(contact);
                    var organizationid = result.entities[i]["ParentCustomer.accountid"];
                    organizations[i] = organizationid;
                }

                var uniqueOrgList = getUnique(organizations);
                for (var i = 0; i < uniqueOrgList.length; i++) {
                    for (var j = 0; j < result.entities.length; j++) {
                        //console.log(result.entities[i]);
                        if (uniqueOrgList[i] == result.entities[j]["ParentCustomer.accountid"]) {
                            var organizationid = result.entities[j]["ParentCustomer.accountid"];
                            var organizationname = result.entities[j]["ParentCustomer.name"] != undefined ? result.entities[j]["ParentCustomer.name"] : "";
                            var org = { organizationid: organizationid, organizationname: organizationname };
                            organizationList.push(org);
                            break;
                        }
                    }
                }
                if (contactList.length > 0) {
                    //DrawMatrixForceLayout1("#connectionMatrix", contactList, organizationList, false);
                    DrawMatrixForceLayoutForDecisionMakers("#connectionMatrix", contactList, initialOrgList, false);
                }
                else {
                    $("#p").text("No Decision maker contact records found");
                }
            },
                function (error) {
                    console.log(error.message);
                });
        }

        function DrawMatrixForceLayoutCSuite(div, conData, ShowMarketingList, ShowActivities) {
            var fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' >" +
                "<entity name='contact' >" +
                "<attribute name='fullname' />" +
                "<attribute name='parentcustomerid' />" +
                "<attribute name='contactid' />" +
                "<attribute name='accountrolecode' />" +
                "<attribute name='entityimage_url' alias='contactimage' />" +
                "<order attribute='fullname' descending='false' />" +
                "<filter type='and' >" +
                "<condition attribute='accountrolecode' operator='eq' value='770000000' />" +
                "</filter>" +
                "<link-entity name='account' from='accountid' to='parentcustomerid' link-type='inner' alias='ParentCustomer' >" +
                "<attribute name='name' />" +
                "<attribute name='accountid' />" +
                "<filter type='and' >" +
                "<condition attribute='ccrm_clientgroupings' operator='eq' value='" + clientGroupingId + "' />" +
                "</filter>" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";
            ////debugger;
            fetchXML = "?fetchXml=" + encodeURIComponent(fetchXML);
            var contactList = [];
            var organizationList = [];
            var organizations = [];
            initialContactList = [];
            Xrm.WebApi.retrieveMultipleRecords('contact', fetchXML
            ).then(function success(result) {
                for (var i = 0; i < result.entities.length; i++) {
                    //console.log(result.entities[i]);
                    var contactid = result.entities[i]["contactid"];
                    var fullname = result.entities[i]["fullname"] != undefined ? result.entities[i]["fullname"] : "";
                    var contactimage = result.entities[i]["contactimage"] != undefined ? result.entities[i]["contactimage"] : "";
                    var parentcustomerid = result.entities[i]["_parentcustomerid_value"] != undefined ? result.entities[i]["_parentcustomerid_value"] : "";
                    var parentcustomername = result.entities[i]["_parentcustomerid_value@OData.Community.Display.V1.FormattedValue"] != undefined ? result.entities[i]["_parentcustomerid_value@OData.Community.Display.V1.FormattedValue"] : "";
                    //var role = "C-Suite";
                    var role = result.entities[i]["accountrolecode"] != undefined ? result.entities[i]["accountrolecode@OData.Community.Display.V1.FormattedValue"] : "";
                    var contact = { contactname: fullname, contactid: contactid, organizationid: parentcustomerid, organizationname: parentcustomername, contactimage: contactimage, role: role };
                    contactList.push(contact);
                    initialContactList.push(contact);
                    var organizationid = result.entities[i]["ParentCustomer.accountid"];
                    organizations[i] = organizationid;
                }

                var uniqueOrgList = getUnique(organizations);
                for (var i = 0; i < uniqueOrgList.length; i++) {
                    for (var j = 0; j < result.entities.length; j++) {
                        //console.log(result.entities[i]);
                        if (uniqueOrgList[i] == result.entities[j]["ParentCustomer.accountid"]) {
                            var organizationid = result.entities[j]["ParentCustomer.accountid"];
                            var organizationname = result.entities[j]["ParentCustomer.name"] != undefined ? result.entities[j]["ParentCustomer.name"] : "";
                            var org = { organizationid: organizationid, organizationname: organizationname };
                            organizationList.push(org);
                            break;
                        }
                    }
                }
                if (contactList.length > 0) {
                    //DrawMatrixForceLayout1("#connectionMatrix", contactList, organizationList, false);
                    DrawMatrixForceLayoutForCSuite("#connectionMatrix", contactList, initialOrgList, false);
                }
                else {
                    $("#p").text("No C-Suite contact records found");
                }
            },
                function (error) {
                    console.log(error.message);
                });
        }

        function DrawMatrixForceLayoutActivities(div, conData, ShowMarketingList, ShowActivities) {
            ////debugger;
            //if (isActivitiesChecked == 1)
            //return;
            //var chkContacts = $("#chkContacts").is(':checked') ? true : false;
            //var chkDecisionMakers = $("#chkDecisionMakers").is(':checked') ? true : false;
            //var chkCSuite = $("#chkCSuite").is(':checked') ? true : false;

            //var fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
            //    "<entity name='activitypointer'>" +
            //    "<attribute name='subject' />" +
            //    "<attribute name='activityid' />" +
            //    "<attribute name='activitytypecode' />" +
            //    "<link-entity name='contact' from='contactid' to='regardingobjectid' link-type='inner' alias='ParentContact'>" +
            //    "<attribute name='contactid' />" +
            //    "<attribute name='accountrolecode' />";
            //    if (chkDecisionMakers == true) {
            //        fetchXML = fetchXML + "<filter type='and' >" +
            //            "<condition attribute='accountrolecode' operator='eq' value='1' />" +
            //            "</filter>";
            //    }
            //    else if (chkCSuite == true) {
            //        fetchXML = fetchXML + "<filter type='and' >" +
            //            "<condition attribute='accountrolecode' operator='eq' value='770000000' />" +
            //            "</filter>";
            //    }
            //    fetchXML = fetchXML + "<link-entity name='account' from='accountid' to='parentcustomerid' link-type='inner' alias='ae'>" +
            //    "<filter type='and'>" +
            //    "<condition attribute='ccrm_clientgroupings' operator='eq' value='" + clientGroupingId + "' />" +
            //    "</filter>" +
            //    "</link-entity>" +
            //    "</link-entity>" +
            //    "</entity>" +
            //    "</fetch>";

            var chkCSuiteAndDecisionMakers = $("#chkCSuiteAndDecisionMakers").is(':checked') ? true : false;

            var fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='activitypointer'>" +
                "<attribute name='subject' />" +
                "<attribute name='activityid' />" +
                "<attribute name='activitytypecode' />" +
                "<link-entity name='contact' from='contactid' to='regardingobjectid' link-type='inner' alias='ParentContact'>" +
                "<attribute name='contactid' />" +
                "<attribute name='accountrolecode' />";
            if (chkCSuiteAndDecisionMakers == true) {
                fetchXML = fetchXML + "<filter type='or' >" +
                    "<condition attribute='accountrolecode' operator='eq' value='1' />" +
                    "<condition attribute='accountrolecode' operator='eq' value='770000000' />" +
                    "</filter>";
            }
            fetchXML = fetchXML + "<link-entity name='account' from='accountid' to='parentcustomerid' link-type='inner' alias='ae'>" +
                "<filter type='and'>" +
                "<condition attribute='ccrm_clientgroupings' operator='eq' value='" + clientGroupingId + "' />" +
                "</filter>" +
                "</link-entity>" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";
            fetchXML = "?fetchXml=" + encodeURIComponent(fetchXML);
            var activityList = [];
            Xrm.WebApi.retrieveMultipleRecords('activitypointer', fetchXML
            ).then(function success(result) {
                for (var i = 0; i < result.entities.length; i++) {
                    //console.log(result.entities[i]);
                    var activityid = result.entities[i]["activityid"];
                    var subject = result.entities[i]["subject"] != undefined ? result.entities[i]["subject"] : "";
                    var parentcustomerid = result.entities[i]["ParentContact.contactid"] != undefined ? result.entities[i]["ParentContact.contactid"] : "";
                    var actvititytypecode = result.entities[i]["activitytypecode@OData.Community.Display.V1.FormattedValue"] != undefined ? result.entities[i]["activitytypecode@OData.Community.Display.V1.FormattedValue"] : "";
                    var activity = { activityid: activityid, subject: subject, parentcustomerid: parentcustomerid, actvititytypecode: actvititytypecode };
                    activityList.push(activity);
                }

                if (initialContactList.length > 0) {
                    //DrawMatrixForceLayout1("#connectionMatrix", contactList, organizationList, false);
                    DrawMatrixForceLayout2("#connectionMatrix", initialContactList, initialOrgList, activityList, false);
                }
            },
                function (error) {
                    console.log(error.message);
                });

            isActivitiesChecked = 1;
        }
        function getUnique(array) {
            var uniqueArray = [];

            // Loop through array values
            for (i = 0; i < array.length; i++) {
                if (uniqueArray.indexOf(array[i]) === -1) {
                    uniqueArray.push(array[i]);
                }
            }
            return uniqueArray;
        }

        var opportunitiesData = "";
        function PopulateOpportunities(OrganisationId, Opptid, opptystatuscode, showArupInternal) {
            opportunitiesData = "";
            var xmlOpptycondition = "";
            var xmlOpptyInternalcondition = "";
            var xmlOpptyconditionstatus = "";
            if (Opptid == undefined || Opptid == "") {
                xmlOpptycondition = "";
            }
            else {
                xmlOpptycondition = "<condition attribute='opportunityid' operator='eq' value='" + Opptid + "' />"
            }
            if (opptystatuscode == undefined || opptystatuscode == "") {
                xmlOpptyconditionstatus = "";
            }
            else {
                opptystatusresults = opptystatuscode.split(",");
                if (opptystatusresults.length == 1)
                    xmlOpptyconditionstatus = "<condition attribute='statuscode' operator='eq' value='" + opptystatuscode + "' />"
                else {
                    xmlOpptyconditionstatus = "<condition attribute='statuscode' operator='in'>";
                    for (i = 0; i < opptystatusresults.length; i++) {
                        xmlOpptyconditionstatus += "<value>" + opptystatusresults[i] + "</value>";
                    }
                    xmlOpptyconditionstatus += " </condition>";
                }
            }
            if (showArupInternal == undefined || showArupInternal == "" || showArupInternal == "false") {
                xmlOpptyInternalcondition = "<condition attribute='ccrm_arupinternal' operator='eq' value='0' />";
            }
            else {
                xmlOpptyInternalcondition = "";
            }



            //new fectxml -  everything is same just modified to populate user/contact image url
            var fetchXML = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' >" +
                "<entity name='opportunity' >" +
                "<attribute name='name' alias = 'opptyname' />" +
                "<attribute name='statuscode' alias = 'opptystatus' />" +
                "<attribute name='estimatedvalue' alias = 'opptyestimatedvalue' />" +
                "<attribute name='ccrm_arupbusinessid' alias = 'opptybusiness' />" +
                "<attribute name='opportunityid' alias = 'opptyid' />" +
                "<attribute name='ccrm_arupinternal' alias = 'opptyarupinternal' />" +
                "<order attribute='name' descending='false' />" +
                "<filter type='and' >" +
                "<condition attribute='parentaccountid' operator='eq' uitype='account' value='" + OrganisationId + "' />" +
                xmlOpptycondition + xmlOpptyconditionstatus + xmlOpptyInternalcondition +
                "<condition attribute='statecode' operator='eq' value='0' />" +
                "</filter>" +
                "<link-entity name='systemuser' from='systemuserid' to='ccrm_bidmanager_userid' visible='false' link-type='outer' alias='bm' >" +
                "<attribute name='mobilephone' />" +
                "<attribute name='fullname' />" +
                "<attribute name='systemuserid' alias='ccrm_bidmanager_userid' />" +
                "<attribute name='entityimage_url' alias='bidmanager_image' />" +
                "<attribute name='title' alias = 'bidmanager_title' />" +
                "<attribute name='address1_telephone1' alias = 'bidmanager_phone' />" +
                "<attribute name='ccrm_accountingcentreid' alias = 'bidmanager_accountingcode' />" +
                "<attribute name='ccrm_arupregionid' alias = 'bidmanager_region' />" +
                "</link-entity>" +
                "<link-entity name='systemuser' from='systemuserid' to='ccrm_biddirector_userid' visible='false' link-type='outer' alias='bd' >" +
                "<attribute name='mobilephone' />" +
                "<attribute name='fullname' />" +
                "<attribute name='systemuserid' alias='ccrm_biddirector_userid' />" +
                "<attribute name='entityimage_url' alias='biddirector_image' />" +
                "<attribute name='title' alias = 'biddirector_title' />" +
                "<attribute name='address1_telephone1' alias = 'biddirector_phone' />" +
                "<attribute name='ccrm_accountingcentreid' alias = 'biddirector_accountingcode' />" +
                "<attribute name='ccrm_arupregionid' alias = 'biddirector_region' />" +
                "</link-entity>" +
                "<link-entity name='systemuser' from='systemuserid' to='ccrm_bidreviewchair_userid' visible='false' link-type='outer' alias='brc' >" +
                "<attribute name='mobilephone' />" +
                "<attribute name='fullname' />" +
                "<attribute name='systemuserid' alias='ccrm_bidreviewchair_userid' />" +
                "<attribute name='entityimage_url' alias='bidreviewchair_image' />" +
                "<attribute name='title' alias = 'bidreviewchair_title' />" +
                "<attribute name='address1_telephone1' alias = 'bidreviewchair_phone' />" +
                "<attribute name='ccrm_accountingcentreid' alias = 'bidreviewchair_accountingcode' />" +
                "<attribute name='ccrm_arupregionid' alias = 'bidreviewchair_region' />" +
                "</link-entity>" +
                "<link-entity name='systemuser' from='systemuserid' to='ccrm_projectdirector_userid' visible='false' link-type='outer' alias='pd' >" +
                "<attribute name='mobilephone' />" +
                "<attribute name='fullname' />" +
                "<attribute name='systemuserid' alias='ccrm_projectdirector_userid' />" +
                "<attribute name='entityimage_url' alias='projectdirector_image' />" +
                "<attribute name='title' alias = 'projectdirector_title' />" +
                "<attribute name='address1_telephone1' alias = 'projectdirector_phone' />" +
                "<attribute name='ccrm_accountingcentreid' alias = 'projectdirector_accountingcode' />" +
                "<attribute name='ccrm_arupregionid' alias = 'projectdirector_region' />" +
                "</link-entity>" +
                "<link-entity name='systemuser' from='systemuserid' to='ccrm_projectmanager_userid' visible='false' link-type='outer' alias='pm' >" +
                "<attribute name='mobilephone' />" +
                "<attribute name='fullname' />" +
                "<attribute name='systemuserid' alias='ccrm_projectmanager_userid' />" +
                "<attribute name='entityimage_url' alias='projectmanager_image' />" +
                "<attribute name='title' alias = 'projectmanager_title' />" +
                "<attribute name='address1_telephone1' alias = 'projectmanager_phone' />" +
                "<attribute name='ccrm_accountingcentreid' alias = 'projectmanager_accountingcode' />" +
                "<attribute name='ccrm_arupregionid' alias = 'projectmanager_region' />" +
                "</link-entity>" +
                "<link-entity name='systemuser' from='systemuserid' to='ccrm_businessadministrator_userid' visible='false' link-type='outer' alias='ba' >" +
                "<attribute name='mobilephone' />" +
                "<attribute name='fullname' />" +
                "<attribute name='systemuserid' alias='ccrm_businessadministrator_userid' />" +
                "<attribute name='entityimage_url' alias='businessadministrator_image' />" +
                "<attribute name='title' alias = 'businessadministrator_title' />" +
                "<attribute name='address1_telephone1' alias = 'businessadministrator_phone' />" +
                "<attribute name='ccrm_accountingcentreid' alias = 'businessadministrator_accountingcode' />" +
                "<attribute name='ccrm_arupregionid' alias = 'businessadministrator_region' />" +
                "</link-entity>" +
                "<link-entity name='systemuser' from='systemuserid' to='ccrm_commercialmanager_userid' visible='false' link-type='outer' alias='cm' >" +
                "<attribute name='mobilephone' />" +
                "<attribute name='fullname' />" +
                "<attribute name='systemuserid' alias='ccrm_commercialmanager_userid' />" +
                "<attribute name='entityimage_url' alias='commercialmanager_image' />" +
                "<attribute name='title' alias = 'commercialmanager_title' />" +
                "<attribute name='address1_telephone1' alias = 'commercialmanager_phone' />" +
                "<attribute name='ccrm_accountingcentreid' alias = 'commercialmanager_accountingcode' />" +
                "<attribute name='ccrm_arupregionid' alias = 'commercialmanager_region' />" +
                "</link-entity>" +
                "<link-entity name='contact' from='contactid' to='ccrm_clientcontactid' visible='false' link-type='outer' alias='cc' >" +
                "<attribute name='address1_telephone1' />" +
                "<attribute name='fullname' />" +
                "<attribute name='contactid' alias='ccrm_clientcontactid' />" +
                "<attribute name='entityimage_url' alias='clientcontact_image' />" +
                "</link-entity>" +
                "<link-entity name='systemuser' from='systemuserid' to='ccrm_aruplocalcontact_userid' visible='false' link-type='outer' alias='alc' >" +
                "<attribute name='mobilephone' />" +
                "<attribute name='fullname' />" +
                "<attribute name='systemuserid' alias='ccrm_aruplocalcontact_userid' />" +
                "<attribute name='entityimage_url' alias='aruplocalcontact_image' />" +
                "<attribute name='title' alias = 'aruplocalcontact_title' />" +
                "<attribute name='address1_telephone1' alias = 'aruplocalcontact_phone' />" +
                "<attribute name='ccrm_accountingcentreid' alias = 'aruplocalcontact_accountingcode' />" +
                "<attribute name='ccrm_arupregionid' alias = 'aruplocalcontact_region' />" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";


            var connections = XrmServiceToolkit.Soap.Fetch(fetchXML);
            var connectionLst = [];
            var connectionLstTbl = [];
            var contactLst = [];

            if (connections.length > 0) {
                for (var i = 0; i < connections.length; i++) {
                    //////debugger;
                    var connection = connections[i];
                    var Opportunityid = connection.attributes.opptyid != undefined ? connection.attributes.opptyid.value : "";
                    var OpportunityName = connection.attributes.opptyname != undefined ? connection.attributes.opptyname.value : "";
                    var Opportunitystatus = connection.attributes.opptystatus != undefined ? connection.attributes.opptystatus.formattedValue : "";
                    var OpportunityBusiness = connection.attributes.opptybusiness != undefined ? connection.attributes.opptybusiness.name : "";
                    var OpportunityFees = connection.attributes.opptyestimatedvalue != undefined ? connection.attributes.opptyestimatedvalue.formattedValue : "";
                    var OpportunityInternal = connection.attributes.opptyarupinternal != undefined ? connection.attributes.opptyarupinternal.formattedValue : "";

                    var bidmanager_userid = connection.attributes.ccrm_bidmanager_userid != undefined ? connection.attributes.ccrm_bidmanager_userid.value + ":bm" + OrganisationId : "";
                    var bidmanager_name = connection.attributes['bm.fullname'] != undefined ? connection.attributes['bm.fullname'].value : "";
                    // var bidmanager_phone = connection.attributes['bm.mobilephone'] != undefined ? connection.attributes['bm.mobilephone'].value : "";
                    var bidmanager_image = connection.attributes.bidmanager_image != undefined ? connection.attributes.bidmanager_image.value : "";
                    var bidmanager_Phone = connection.attributes.bidmanager_phone != undefined ? connection.attributes.bidmanager_phone.value : "";
                    //  var bidmanager_CompanyCode = connection.attributes.bidmanager_companycode != undefined ? connection.attributes.bidmanager_companycode.value : "";
                    var bidmanager_AccountingCode = connection.attributes.bidmanager_accountingcode != undefined ? connection.attributes.bidmanager_accountingcode.name : "";
                    var bidmanager_Region = connection.attributes.bidmanager_region != undefined ? connection.attributes.bidmanager_region.name : "";
                    var bidmanager_Title = connection.attributes.bidmanager_title != undefined ? connection.attributes.bidmanager_title.value : "";

                    var biddirector_userid = connection.attributes.ccrm_biddirector_userid != undefined ? connection.attributes.ccrm_biddirector_userid.value + ":bd" + OrganisationId : "";
                    var biddirector_name = connection.attributes['bd.fullname'] != undefined ? connection.attributes['bd.fullname'].value : "";
                    // var biddirector_phone = connection.attributes['bd.mobilephone'] != undefined ? connection.attributes['bd.mobilephone'].value : "";
                    var biddirector_image = connection.attributes.biddirector_image != undefined ? connection.attributes.biddirector_image.value : "";
                    var biddirector_Phone = connection.attributes.biddirector_phone != undefined ? connection.attributes.biddirector_phone.value : "";
                    //var biddirector_CompanyCode = connection.attributes.biddirector_companycode != undefined ? connection.attributes.biddirector_companycode.value : "";
                    var biddirector_AccountingCode = connection.attributes.biddirector_accountingcode != undefined ? connection.attributes.biddirector_accountingcode.name : "";
                    var biddirector_Region = connection.attributes.biddirector_region != undefined ? connection.attributes.biddirector_region.name : "";
                    var biddirector_Title = connection.attributes.biddirector_title != undefined ? connection.attributes.biddirector_title.value : "";


                    var bidreviewchair_userid = connection.attributes.ccrm_bidreviewchair_userid != undefined ? connection.attributes.ccrm_bidreviewchair_userid.value + ":brc" + OrganisationId : "";
                    var bidreviewchair_name = connection.attributes['brc.fullname'] != undefined ? connection.attributes['brc.fullname'].value : "";
                    //var bidreviewchair_phone = connection.attributes['brc.mobilephone'] != undefined ? connection.attributes['brc.mobilephone'].value : "";
                    var bidreviewchair_image = connection.attributes.bidreviewchair_image != undefined ? connection.attributes.bidreviewchair_image.value : "";
                    var bidreviewchair_Phone = connection.attributes.bidreviewchair_phone != undefined ? connection.attributes.bidreviewchair_phone.value : "";
                    // var bidreviewchair_CompanyCode = connection.attributes.bidreviewchair_companycode != undefined ? connection.attributes.bidreviewchair_companycode.value : "";
                    var bidreviewchair_AccountingCode = connection.attributes.bidreviewchair_accountingcode != undefined ? connection.attributes.bidreviewchair_accountingcode.name : "";
                    var bidreviewchair_Region = connection.attributes.bidreviewchair_region != undefined ? connection.attributes.bidreviewchair_region.name : "";
                    var bidreviewchair_Title = connection.attributes.bidreviewchair_title != undefined ? connection.attributes.bidreviewchair_title.value : "";

                    var projectdirector_userid = connection.attributes.ccrm_projectdirector_userid != undefined ? connection.attributes.ccrm_projectdirector_userid.value + ":pd" + OrganisationId : "";
                    var projectdirector_name = connection.attributes['pd.fullname'] != undefined ? connection.attributes['pd.fullname'].value : "";
                    // var projectdirector_phone = connection.attributes['pd.mobilephone'] != undefined ? connection.attributes['pd.mobilephone'].value : "";
                    var projectdirector_image = connection.attributes.projectdirector_image != undefined ? connection.attributes.projectdirector_image.value : "";
                    var projectdirector_Phone = connection.attributes.projectdirector_phone != undefined ? connection.attributes.projectdirector_phone.value : "";
                    //var projectdirector_CompanyCode = connection.attributes.projectdirector_companycode != undefined ? connection.attributes.projectdirector_companycode.value : "";
                    var projectdirector_AccountingCode = connection.attributes.projectdirector_accountingcode != undefined ? connection.attributes.projectdirector_accountingcode.name : "";
                    var projectdirector_Region = connection.attributes.projectdirector_region != undefined ? connection.attributes.projectdirector_region.name : "";
                    var projectdirector_Title = connection.attributes.projectdirector_title != undefined ? connection.attributes.projectdirector_title.value : "";

                    var projectmanager_userid = connection.attributes.ccrm_projectmanager_userid != undefined ? connection.attributes.ccrm_projectmanager_userid.value + ":pm" + OrganisationId : "";
                    var projectmanager_name = connection.attributes['pm.fullname'] != undefined ? connection.attributes['pm.fullname'].value : "";
                    //var projectmanager_phone = connection.attributes['pm.mobilephone'] != undefined ? connection.attributes['pm.mobilephone'].value : "";
                    var projectmanager_image = connection.attributes.projectmanager_image != undefined ? connection.attributes.projectmanager_image.value : "";
                    var projectmanager_Phone = connection.attributes.projectmanager_phone != undefined ? connection.attributes.projectmanager_phone.value : "";
                    //var projectmanager_CompanyCode = connection.attributes.projectmanager_companycode != undefined ? connection.attributes.projectmanager_companycode.value : "";
                    var projectmanager_AccountingCode = connection.attributes.projectmanager_accountingcode != undefined ? connection.attributes.projectmanager_accountingcode.name : "";
                    var projectmanager_Region = connection.attributes.projectmanager_region != undefined ? connection.attributes.projectmanager_region.name : "";
                    var projectmanager_Title = connection.attributes.projectmanager_title != undefined ? connection.attributes.projectmanager_title.value : "";

                    var businessadministrator_userid = connection.attributes.ccrm_businessadministrator_userid != undefined ? connection.attributes.ccrm_businessadministrator_userid.value + ":ba" + OrganisationId : "";
                    var businessadministrator_name = connection.attributes['ba.fullname'] != undefined ? connection.attributes['ba.fullname'].value : "";
                    // var businessadministrator_phone = connection.attributes['ba.mobilephone'] != undefined ? connection.attributes['ba.mobilephone'].value : "";
                    var businessadministrator_image = connection.attributes.businessadministrator_image != undefined ? connection.attributes.businessadministrator_image.value : "";
                    var businessadministrator_Phone = connection.attributes.businessadministrator_phone != undefined ? connection.attributes.businessadministrator_phone.value : "";
                    //    var businessadministrator_CompanyCode = connection.attributes.businessadministrator_companycode != undefined ? connection.attributes.businessadministrator_companycode.value : "";
                    var businessadministrator_AccountingCode = connection.attributes.businessadministrator_accountingcode != undefined ? connection.attributes.businessadministrator_accountingcode.name : "";
                    var businessadministrator_Region = connection.attributes.businessadministrator_region != undefined ? connection.attributes.businessadministrator_region.name : "";
                    var businessadministrator_Title = connection.attributes.businessadministrator_title != undefined ? connection.attributes.businessadministrator_title.value : "";

                    var commercialmanager_userid = connection.attributes.ccrm_commercialmanager_userid != undefined ? connection.attributes.ccrm_commercialmanager_userid.value + ":cm" + OrganisationId : "";
                    var commercialmanager_name = connection.attributes['cm.fullname'] != undefined ? connection.attributes['cm.fullname'].value : "";
                    //var commercialmanager_phone = connection.attributes['cm.mobilephone'] != undefined ? connection.attributes['cm.mobilephone'].value : "";
                    var commercialmanager_image = connection.attributes.commercialmanager_image != undefined ? connection.attributes.commercialmanager_image.value : "";
                    var commercialmanager_Phone = connection.attributes.commercialmanager_phone != undefined ? connection.attributes.commercialmanager_phone.value : "";
                    // var commercialmanager_CompanyCode = connection.attributes.commercialmanager_companycode != undefined ? connection.attributes.commercialmanager_companycode.value : "";
                    var commercialmanager_AccountingCode = connection.attributes.commercialmanager_accountingcode != undefined ? connection.attributes.commercialmanager_accountingcode.name : "";
                    var commercialmanager_Region = connection.attributes.commercialmanager_region != undefined ? connection.attributes.commercialmanager_region.name : "";
                    var commercialmanager_Title = connection.attributes.commercialmanager_title != undefined ? connection.attributes.commercialmanager_title.value : "";

                    var aruplocalcontact_userid = connection.attributes.ccrm_aruplocalcontact_userid != undefined ? connection.attributes.ccrm_aruplocalcontact_userid.value + ":alc" + OrganisationId : "";
                    var aruplocalcontact_name = connection.attributes['alc.fullname'] != undefined ? connection.attributes['alc.fullname'].value : "";
                    var aruplocalcontact_phone = connection.attributes['alc.mobilephone'] != undefined ? connection.attributes['alc.mobilephone'].value : "";
                    var aruplocalcontact_image = connection.attributes.aruplocalcontact_image != undefined ? connection.attributes.aruplocalcontact_image.value : "";
                    var aruplocalcontact_Phone = connection.attributes.aruplocalcontact_phone != undefined ? connection.attributes.aruplocalcontact_phone.value : "";
                    // var aruplocalcontact_CompanyCode = connection.attributes.aruplocalcontact_companycode != undefined ? connection.attributes.aruplocalcontact_companycode.value : "";
                    var aruplocalcontact_AccountingCode = connection.attributes.aruplocalcontact_accountingcode != undefined ? connection.attributes.aruplocalcontact_accountingcode.name : "";
                    var aruplocalcontact_Region = connection.attributes.aruplocalcontact_region != undefined ? connection.attributes.aruplocalcontact_region.name : "";
                    var aruplocalcontact_Title = connection.attributes.aruplocalcontact_title != undefined ? connection.attributes.aruplocalcontact_title.value : "";

                    var clientcontact_userid = connection.attributes.ccrm_clientcontactid != undefined ? connection.attributes.ccrm_clientcontactid.value + ":cc" + OrganisationId : "";
                    var clientcontact_name = connection.attributes['cc.fullname'] != undefined ? connection.attributes['cc.fullname'].value : "";
                    var clientcontact_phone = connection.attributes['cc.address1_telephone1'] != undefined ? connection.attributes['cc.address1_telephone1'].value : "";
                    var clientcontact_image = connection.attributes.clientcontact_image != undefined ? connection.attributes.clientcontact_image.value : "";

                    var conn = {
                        "Opportunityid": Opportunityid,
                        "OpportunityName": OpportunityName,
                        "Opportunitystatus": Opportunitystatus,
                        "OpportunityBusiness": OpportunityBusiness,
                        "OpportunityFees": OpportunityFees,
                        "OpportunityInternal": OpportunityInternal,

                        "bidmanager_userid": bidmanager_userid,
                        "bidmanager_name": bidmanager_name,
                        //"bidmanager_phone": bidmanager_phone,
                        "bidmanager_image": bidmanager_image,
                        "bidmanager_Phone": bidmanager_Phone,
                        //"bidmanager_CompanyCode" : bidmanager_CompanyCode,
                        "bidmanager_AccountingCode": bidmanager_AccountingCode,
                        "bidmanager_Region": bidmanager_Region,
                        "bidmanager_Title": bidmanager_Title,

                        "biddirector_userid": biddirector_userid,
                        "biddirector_name": biddirector_name,
                        //"biddirector_phone": biddirector_phone,
                        "biddirector_image": biddirector_image,
                        "biddirector_Phone": biddirector_Phone,
                        //"biddirector_CompanyCode": biddirector_CompanyCode,
                        "biddirector_AccountingCode": biddirector_AccountingCode,
                        "biddirector_Region": biddirector_Region,
                        "biddirector_Title": biddirector_Title,

                        "bidreviewchair_userid": bidreviewchair_userid,
                        "bidreviewchair_name": bidreviewchair_name,
                        //"bidreviewchair_phone": bidreviewchair_phone,
                        "bidreviewchair_image": bidreviewchair_image,
                        "bidreviewchair_Phone": bidreviewchair_Phone,
                        // "bidreviewchair_CompanyCode": bidreviewchair_CompanyCode,
                        "bidreviewchair_AccountingCode": bidreviewchair_AccountingCode,
                        "bidreviewchair_Region": bidreviewchair_Region,
                        "bidreviewchair_Title": bidreviewchair_Title,

                        "projectdirector_userid": projectdirector_userid,
                        "projectdirector_name": projectdirector_name,
                        //"projectdirector_phone": projectdirector_phone,
                        "projectdirector_image": projectdirector_image,
                        "projectdirector_Phone": projectdirector_Phone,
                        // "projectdirector_CompanyCode": projectdirector_CompanyCode,
                        "projectdirector_AccountingCode": projectdirector_AccountingCode,
                        "projectdirector_Region": projectdirector_Region,
                        "projectdirector_Title": projectdirector_Title,

                        "projectmanager_userid": projectmanager_userid,
                        "projectmanager_name": projectmanager_name,
                        //"projectmanager_phone": projectmanager_phone,
                        "projectmanager_image": projectmanager_image,
                        "projectmanager_Phone": projectmanager_Phone,
                        // "projectmanager_CompanyCode": projectmanager_CompanyCode,
                        "projectmanager_AccountingCode": projectmanager_AccountingCode,
                        "projectmanager_Region": projectmanager_Region,
                        "projectmanager_Title": projectmanager_Title,

                        "businessadministrator_userid": businessadministrator_userid,
                        "businessadministrator_name": businessadministrator_name,
                        //"businessadministrator_phone": businessadministrator_phone,
                        "businessadministrator_image": businessadministrator_image,
                        "businessadministrator_Phone": businessadministrator_Phone,
                        //"businessadministrator_CompanyCode": businessadministrator_CompanyCode,
                        "businessadministrator_AccountingCode": businessadministrator_AccountingCode,
                        "businessadministrator_Region": businessadministrator_Region,
                        "businessadministrator_Title": businessadministrator_Title,

                        "commercialmanager_userid": commercialmanager_userid,
                        "commercialmanager_name": commercialmanager_name,
                        //"commercialmanager_phone": commercialmanager_phone,
                        "commercialmanager_image": commercialmanager_image,
                        "commercialmanager_Phone": commercialmanager_Phone,
                        // "commercialmanager_CompanyCode": commercialmanager_CompanyCode,
                        "commercialmanager_AccountingCode": commercialmanager_AccountingCode,
                        "commercialmanager_Region": commercialmanager_Region,
                        "commercialmanager_Title": commercialmanager_Title,

                        "aruplocalcontact_userid": aruplocalcontact_userid,
                        "aruplocalcontact_name": aruplocalcontact_name,
                        // "aruplocalcontact_phone": aruplocalcontact_phone,
                        "aruplocalcontact_image": aruplocalcontact_image,
                        "aruplocalcontact_Phone": aruplocalcontact_Phone,
                        //"aruplocalcontact_CompanyCode": aruplocalcontact_CompanyCode,
                        "aruplocalcontact_AccountingCode": aruplocalcontact_AccountingCode,
                        "aruplocalcontact_Region": aruplocalcontact_Region,
                        "aruplocalcontact_Title": aruplocalcontact_Title,

                        "clientcontact_userid": clientcontact_userid,
                        "clientcontact_name": clientcontact_name,
                        "clientcontact_phone": clientcontact_phone,
                        "clientcontact_image": clientcontact_image
                    };

                    connectionLst.push(conn);
                }
                return connectionLst;
                //  $('#chkMarketingList').prop('checked', false);
                //  $('#chkContactActivities').prop('checked', false);
                //  DrawMatrixForceLayoutOpportunities("#connectionMatrix", connectionLst);
            }
        }

        function loadChildOpportunityData(currentaccId, opportunityid, showBidTeams, opptystatuscode, showInternal) {
            //Child org Opportunities data
            var fetchxml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='account'>" +
                "<attribute name='name' alias ='orgname' />" +
                "<attribute name='accountid' alias = 'orgid' />" +
                "<attribute name='address1_city' />" +
                "<attribute name='ccrm_address1attentiondepartment' alias = 'orgdepartment' />" +
                "<attribute name='arup_openopportunitiescalc' alias = 'orgopenopptys' />" +
                "<order attribute='name' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='parentaccountid' operator='eq' uitype='account' value='" + currentaccId + "' />" +
                "<condition attribute='arup_openopportunitiescalc' operator='gt' value='0' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>"
            var Organisations = XrmServiceToolkit.Soap.Fetch(fetchxml);
            if (Organisations.length > 0) {
                for (var i = 0; i < Organisations.length; i++) {
                    var connection = Organisations[i];
                    var childOrgName = connection.attributes.orgname != undefined ? connection.attributes.orgname.value : "";
                    var childOrgid = connection.attributes.orgid != undefined ? connection.attributes.orgid.value : "";
                    var childTownCity = connection.attributes.address1_city != undefined ? connection.attributes.address1_city.value : "";
                    var childDepartment = connection.attributes.orgdepartment != undefined ? connection.attributes.orgdepartment.value : "";
                    var childOpenOpptys = connection.attributes.orgopenopptys != undefined ? connection.attributes.orgopenopptys.value : "";

                    Opportunitynodelink.nodes.push({
                        id: childOrgid, name: childOrgName, NodeName: childOrgName, group: 1, rad: 8, imageUrl: 'arup_graphOrg', phone: "", jobtitleorCountry: "", userid: "100"
                        , orgTownCity: childTownCity, orgDepartment: childDepartment, orgOpenOpptys: childOpenOpptys
                    });
                    Opportunitynodelink.links.push({ source: currentaccId, target: childOrgid, value: 2 });
                    var childOpporutnityData = PopulateOpportunities(childOrgid, opportunityid, opptystatuscode, showInternal);
                    if (childOpporutnityData != undefined) {
                        NodesOrgOpportunities(childOrgid, childOpporutnityData, showBidTeams);
                    }

                    if (childOrgid != "") {
                        loadChildOpportunityData(childOrgid, opportunityid, showBidTeams, opptystatuscode, showInternal);
                    }
                }
            }
        }

        var Opportunitynodelink = Object();
        function OpportunityMatrix(curaccid, curOrgName, curOpptyid, showBidTeams, opportunitystatuscode, showInternal) {
            if (curaccid == undefined || curaccid == "")
                curaccid = accId;
            if (curOrgName == undefined || curOrgName == "")
                curOrgName = accName;
            if (showBidTeams == undefined)
                showBidTeams = false;
            if (showInternal == undefined || showInternal == "")
                showInternal = false;


            $("#Connectionfilters").hide();
            $("#Accountfilters").show();
            InititializeGraphDivs();
            InitializeHomeButtonClick();
            Opportunitynodelink = Object();
            Opportunitynodelink.nodes = [];
            Opportunitynodelink.links = [];

            OpporutnityData = PopulateOpportunities(curaccid, curOpptyid, opportunitystatuscode, showInternal);

            Opportunitynodelink.nodes.push({
                id: curaccid, name: curOrgName, NodeName: curOrgName, group: 8, rad: 12, imageUrl: 'arup_graphOrg', phone: "", jobtitleorCountry: "",
                userid: "100", orgTownCity: accTownCity, orgDepartment: accDepartment, orgOpenOpptys: accOpenOpptys
            });
            if (OpporutnityData != undefined)
                NodesOrgOpportunities(curaccid, OpporutnityData, showBidTeams);

            loadChildOpportunityData(curaccid, curOpptyid, showBidTeams, opportunitystatuscode, showInternal);

            var svgwidth = $("#connForcelay").width()

            var svg = d3.select("#connForcelay"),
                width = +svgwidth,
                height = +svg.attr("height");
            var zoom = d3.zoom().scaleExtent([1 / 2, 4]).on("zoom", zoomed);
            svg.call(zoom);


            svg.append("rect")
                .attr("width", width)
                .attr("height", height)
                .style("fill", "none")
                .style("pointer-events", "all");

            var g = svg.append("g");



            /////////
            var config = {
                "avatar_size": 10
            }

            var body = d3.select("body");
            var defs = svg.append('svg:defs');
            data = [{
                posx: 30,
                posy: 20,
                posx1: 22,
                posy1: 6,
                img: "arup_graphOrg",
                color: "#875005",
                "label": "Organisations",
                width: 16
            }, {
                posx: 170,
                posy: 20,
                posx1: 161,
                posy1: 5,
                img: "arup_graphOpportunities",
                color: "#FDD7A5",
                "label": "Opportunities",
                width: 16
            },
            {
                posx: 310,
                posy: 20,
                posx1: 161,
                posy1: 5,
                img: "arup_graphOpportunities",
                color: "#fcfda5",
                "label": "Internal Opportunities",
                width: 16
            },
            {
                posx: 450,
                posy: 20,
                posx1: 306,
                posy1: 10,
                img: "arup_/Images/Contact.png",
                color: "#46488C",
                "label": "Bid Teams",
                width: 8
            }

            ];
            data.forEach(function (d, i) {
                svg.append("circle")
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)
                    .style("stroke-width", 1)
                    .attr("fill", d.color)
                    .style("stroke", d.color)

                svg.append('clipPath')
                    .attr('id', 'clipObj' + i)
                    .append('circle')
                    .attr('cx', d.posx)
                    .attr('cy', d.posy)
                    .attr('r', config.avatar_size)

            })

            data.forEach(function (d, i) {
                var xaxis, yaxis, width
                if (d.label == "Organisations" || d.label == "Opportunities" || d.label == "Internal Opportunities") {
                    width = config.avatar_size * 3;
                    xaxis = parseInt(d.posx - (config.avatar_size + config.avatar_size * .5));
                    yaxis = parseInt(d.posy - (config.avatar_size + config.avatar_size * .5));
                }
                else {
                    width = config.avatar_size + config.avatar_size * .1;
                    xaxis = parseInt(d.posx - config.avatar_size + config.avatar_size * .45);
                    yaxis = parseInt(d.posy - config.avatar_size + config.avatar_size * .45)
                }
                svg.append('image')
                    .attr('xlink:href', d.img)
                    .attr('width', width)
                    .attr('height', width)
                    .attr('x', xaxis)
                    .attr('y', yaxis)
                    // .attr('transform', 'translate(' + parseInt(d.posx1) + ',' + parseInt(d.posy1) + ')')
                    // .attr('transform', 'translate(' + parseInt(d.posx - config.avatar_size + config.avatar_size * .45) + ',' + parseInt(d.posy - config.avatar_size + config.avatar_size * .45) + ')')
                    .attr('clip-path', "url(#clipObj" + i + ")")

            })
            var text = svg.selectAll("text")
                .data(data)
                .enter()
                .append("text");


            var textLabels = text
                .attr("x", function (d) { return d.posx + 15; })
                .attr("y", function (d) { return d.posy + 5; })
                .text(function (d) { return d.label; });



            //////


            function zoomed() {
                g.attr('transform', 'translate(' + d3.event.transform.x + ',' + d3.event.transform.y + ') scale(' + d3.event.transform.k + ')');
                currentscale = d3.event.transform.k;
            };

            if (currentscale != "") {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleTo, currentscale);

            }

            function transition(zoomLevel) {
                svg.transition()
                    .delay(100)
                    .duration(700)
                    .call(zoom.scaleBy, zoomLevel);
            }

            d3.selectAll('button').on('click', function () {
                if (this.id === 'zoom_in') {
                    transition(1.2); // increase on 0.2 each time
                }
                if (this.id === 'zoom_out') {
                    transition(0.8); // deacrease on 0.2 each time
                }
                if (this.id === 'zoom_init') {
                    svg.transition()
                        .delay(100)
                        .duration(700)
                        .call(zoom.scaleTo, 1.5); // return to initial state
                }
                if (this.id === 'btnresize') {
                    //$('#maindivGraph').toggleClass('col-md-9 ml-sm-auto col-lg-10').toggleClass('col-md-12 ml-sm-auto col-lg-12');
                    //$('#seconddivgraph').toggle();
                    if (sizetoggle == 0) {
                        $('#connectionMatrix').css("height", "90%");
                        $('.row').css("width", "100%");
                        $('#connForcelay').css("height", "1100px");
                        //$('#maindivGraph').removeClass('col-md-9 ml-sm-auto col-lg-10').addClass('col-md-12 ml-sm-auto col-lg-12').addClass("important");
                        //$('#seconddivgraph').hide();
                        $('#clientconnectionHelp').hide();
                        $('#showhideNav').hide();
                        $('#seconddivgraph').css({ 'margin-top': '0px' });
                        sizetoggle = 1;
                    }
                    else {
                        $('#connectionMatrix').css("height", "75%");
                        $('#connForcelay').css("height", "800px");
                        $('#clientconnectionHelp').show();
                        $('#showhideNav').show();
                        $('#seconddivgraph').css({ 'margin-top': '65px' });

                        //$('#maindivGraph').removeClass('col-md-12 ml-sm-auto col-lg-12').addClass('col-md-9 ml-sm-auto col-lg-10').addClass("important");
                        //$('#seconddivgraph').show();
                        //InitializeHomeButtonClick();
                        sizetoggle = 0;
                    }
                }
            });

            var color = d3.scaleOrdinal(d3.schemeCategory20);


            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function (d) { return d.id; }).distance(function (d, i) { return 20 + i }))
                .force("charge", d3.forceManyBody().strength(-120))
                .force("center", d3.forceCenter(width / 2, height / 2));


            var link = g.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(Opportunitynodelink.links)
                .enter().append("line")
                .style("stroke-dasharray", (0, function (d) {
                    if (d.value == 1) {
                        return 3;
                    }
                    else { return 0; }
                }))
                .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = g.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(Opportunitynodelink.nodes)
                .enter().append("g")
                .on('dblclick', releasenode)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            var circle = node.append("circle")
                .attr("r", function (d) { return d.rad; })
                .attr("fill", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke", function (d) { return GetNodeBackGrdClr(d, color) })
                .style("stroke-width", 1)
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforOpportunity(d.userid, d.id, d.name);
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForOpportunities(d);
                    tooltip.html(tooltipcontent);
                    return tooltip.style("visibility", "visible");
                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) {
                    removehighlighting(d);
                    return tooltip.style("visibility", "hidden");
                });

            // add circle clip
            var clipPath = node.append("clipPath")
                .attr("id", function (d, i) {
                    return "clipCircle_" + i
                })
                .append("circle")
                .attr("r", function (d) { return d.rad });


            var tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("z-index", "12")
                .style("visibility", "hidden")
                .style("background", "#5C9BD1")
                .style("color", "white")
                .style("padding", "5px")
                .style("margin", "2px")
                .style("font-size", "12px")
                .style("box-shadow", "0px 5px 15px 0px rgba(0,0,0,0.3)")
                .text("a simple tooltip");

            var image = node.append('svg:image').attr('class', 'entityImage').attr('xlink:href', function (d) {
                if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                    return d.imageUrl;
                }
                else {
                    return 'arup_/Images/Contact.png';
                }
            })
                .attr('width', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr('height', function (d) {
                    if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                        return d.rad * 3;
                    }
                    else {
                        return d.rad + d.rad * .1;
                    }
                })
                .attr("clip-path", function (d, i) { return "url(#clipCircle_" + i + ")" })
                .on("click", function (d) {
                    tooltip.style("visibility", "hidden");
                    getDataforOpportunity(d.userid, d.id, d.name);
                })
                .on("mouseover", function (d) {
                    connectedNodes(d);
                    var tooltipcontent = getToolTipsForOpportunities(d);
                    tooltip.html(tooltipcontent);
                    return tooltip.style("visibility", "visible");
                })
                .on("mousemove", function () { return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (d) {
                    removehighlighting(d)
                    return tooltip.style("visibility", "hidden");
                });

            var nodeText = node.append('svg:text').attr('class', 'nodetext').text(function (d) {
                var name = d.NodeName.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
                if (name.length > 35) {
                    name = name.substring(0, 35) + "...";
                }
                if (isManagedClient) {
                    if (d.id == relationshipManager) {
                        return name + " (RM)";
                    }
                    else if (relTeamMembers.indexOf(d.id) > -1) {
                        return name + " (RT)";
                    }
                    else {
                        return name;
                    }
                }
                return name;
            }).style("text-anchor", "middle");

            //var title = node.append("title")
            //     .text(function (d) { return d.id; });

            simulation
                .nodes(Opportunitynodelink.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(Opportunitynodelink.links);

            function ticked() {
                link
                    .attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                circle
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                clipPath
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                image
                    .attr("x", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.x - d.rad - d.rad * .5;
                        }
                        else {
                            return d.x - d.rad + d.rad * .45;
                        }
                    })
                    .attr("y", function (d) {
                        if (d.imageUrl != GetGlobalContext().getClientUrl()) {
                            return d.y - d.rad - d.rad * .5;
                        }
                        else {
                            return d.y - d.rad + d.rad * .45;
                        }

                    });


                nodeText
                    .attr("dx", function (d) { return d.x - function (d) { return d.name.normalize('NFD').replace(/[\u0300-\u036f]/g, "") }.length / 2 * 3; })
                    .attr("dy", function (d) {
                        if (d.group == 1) {
                            return d.y - 11;
                        }
                        else if (d.group == 2) {
                            return d.y - 8;
                        }
                        else if (d.group == 6) {
                            return d.y - 11;
                        }
                        else if (d.group == 8) {
                            return d.y - 15;
                        }
                        else {
                            return d.y - 8;
                        }
                    })
                    .attr("width", "50");
            }


            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) simulation.alphaTarget(0);
                //d.fx = null;
                //d.fy = null;
                d.fx = d.x;
                d.fy = d.y;
            }

            function releasenode(d) {
                //d.fx = false; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
                //force.resume();
                if (!d3.event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            ////////////////////////////////////////////////////////////////////////////////

            function connectedNodes(d) {
                var connectedlinks = link.filter(function (e) {
                    //return e.source.id == d.id || e.target.id == d.id; //connected links
                    if (e.source.id == d.id || e.target.id == d.id) {
                        node.filter(function (k) {
                            var res1 = k.id.split(":");
                            var res2 = d.id.split(":");
                            if (res2.length > 1) {

                            }
                            else
                                return k.id != d.id;
                        }).style('stroke-opacity', 0.1);
                        node.filter(function (p) {
                            var res1 = p.id.split(":");
                            var res2 = d.id.split(":");
                            if (res2.length > 1)
                                return res1[0] == res2[0];
                        }).style('stroke-width', 1).style('stroke', 'red').style('r', 8);
                        return d.id;
                    }
                }).style('stroke', 'red')
                    .attr('r', 15);


                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.1)
                        .attr('r', 15);
            }
            function removehighlighting(d) {
                var connectedlinks = link.filter(function (e) {
                    if (e.source.id == d.id || e.target.id == d.id) { //connected links
                        node.filter(function (k) {
                            return k.id != d.id;
                        }).style('stroke-opacity', 0.6);
                        node.filter(function (p) {
                            var res1 = p.id.split(":");
                            var res2 = d.id.split(":");
                            if (res2.length > 1)
                                return res1[0] == res2[0];
                        }).style('stroke-width', 0).style('stroke', 'black');
                        return d.id;
                    }
                }).style('stroke', '#999')
                    .attr('r', 15)

                var disconnectedlinks =
                    link.filter(function (e) {
                        return e.source.id != d.id && e.target.id != d.id; //disconnected links
                    }).style('stroke-opacity', 0.6)
                        .attr('r', 15);

            }
            /////////////////////////////////////////////////////
        }

        function NodesOrgOpportunities(curaccId, conData, showBidTeams) {

            // var nodelink = Opportunitynodelink;
            //  nodelink.nodes.push({ id: curaccId, name: curaccName, NodeName: curaccName, group: 1, rad: 10, imageUrl: 'arup_/Images/AccountFolder.png', phone: "", jobtitleorCountry: "", userid: "100" });
            var Opportunitydata = d3.nest()
                .key(function (d) { return d['Opportunityid']; })
                .entries(conData);
            var bidmanager = d3.nest()
                .key(function (d) { return d['bidmanager_userid']; })
                .entries(conData);
            var biddirector = d3.nest()
                .key(function (d) { return d['biddirector_userid']; })
                .entries(conData);
            var bidreviewchair = d3.nest()
                .key(function (d) { return d['bidreviewchair_userid']; })
                .entries(conData);
            var projectdirector = d3.nest()
                .key(function (d) { return d['projectdirector_userid']; })
                .entries(conData);
            var projectmanager = d3.nest()
                .key(function (d) { return d['projectmanager_userid']; })
                .entries(conData);
            var businessadministrator = d3.nest()
                .key(function (d) { return d['businessadministrator_userid']; })
                .entries(conData);
            var commercialmanager = d3.nest()
                .key(function (d) { return d['commercialmanager_userid']; })
                .entries(conData);
            var aruplocalcontact = d3.nest()
                .key(function (d) { return d['aruplocalcontact_userid']; })
                .entries(conData);
            var clientcontact = d3.nest()
                .key(function (d) { return d['clientcontact_userid']; })
                .entries(conData);

            Opportunitydata.forEach(function (ac, i) {
                Opportunitynodelink.nodes.push({
                    id: ac.key, group: 2, rad: 7, imageUrl: 'arup_graphOpportunities', empstatus: "", name: ac.values[0].OpportunityName
                    , NodeName: ac.values[0].OpportunityName, phone: "", jobtitleorCountry: "", userid: "600"
                    , OpptyStatus: ac.values[0].Opportunitystatus, OpptyBusiness: ac.values[0].OpportunityBusiness
                    , OpptyFees: ac.values[0].OpportunityFees, OpptyInternal: ac.values[0].OpportunityInternal
                });
                Opportunitynodelink.links.push({ source: curaccId, target: ac.key, value: 2 });
            })
            if (showBidTeams) {
                bidmanager.forEach(function (ac, i) {
                    if (ac.key != "") {
                        Opportunitynodelink.nodes.push({
                            id: ac.key, group: 3, rad: 6, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].bidmanager_image,
                            name: ac.values[0].bidmanager_name, NodeName: ac.values[0].bidmanager_name + " (BM)", jobtitleorCountry: "Bid Manager", userid: "700",
                            phone: ac.values[0].bidmanager_Phone,
                            companycode: "",
                            region: ac.values[0].bidmanager_Region,
                            jobtitle: ac.values[0].bidmanager_Title,
                            accountcode: ac.values[0].bidmanager_AccountingCode
                        });
                    }
                })
                conData.forEach(function (cc, i) {
                    if (cc['bidmanager_userid'] != "") {
                        Opportunitynodelink.links.push({ source: cc['Opportunityid'], target: cc['bidmanager_userid'], value: 1 });
                    }
                })

                biddirector.forEach(function (ac, i) {
                    if (ac.key != "") {
                        Opportunitynodelink.nodes.push({
                            id: ac.key, group: 3, rad: 6, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].biddirector_image,
                            name: ac.values[0].biddirector_name, NodeName: ac.values[0].biddirector_name + " (BD)", jobtitleorCountry: "Bid Director", userid: "700",
                            phone: ac.values[0].biddirector_Phone,
                            companycode: "",
                            region: ac.values[0].biddirector_Region,
                            jobtitle: ac.values[0].biddirector_Title,
                            accountcode: ac.values[0].biddirector_AccountingCode
                        });
                    }
                })
                conData.forEach(function (cc, i) {
                    if (cc['biddirector_userid'] != "") {
                        Opportunitynodelink.links.push({ source: cc['Opportunityid'], target: cc['biddirector_userid'], value: 1 });
                    }
                })

                bidreviewchair.forEach(function (ac, i) {
                    if (ac.key != "") {
                        Opportunitynodelink.nodes.push({
                            id: ac.key, group: 3, rad: 6, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].bidreviewchair_image,
                            name: ac.values[0].bidreviewchair_name, NodeName: ac.values[0].bidreviewchair_name + " (BRC)", jobtitleorCountry: "Bid Review Chair", userid: "700"
                            , phone: ac.values[0].bidreviewchair_Phone,
                            companycode: "",
                            region: ac.values[0].bidreviewchair_Region,
                            jobtitle: ac.values[0].bidreviewchair_Title,
                            accountcode: ac.values[0].bidreviewchair_AccountingCode
                        });
                    }
                })
                conData.forEach(function (cc, i) {
                    if (cc['bidreviewchair_userid'] != "")
                        Opportunitynodelink.links.push({ source: cc['Opportunityid'], target: cc['bidreviewchair_userid'], value: 1 });
                })

                projectdirector.forEach(function (ac, i) {
                    if (ac.key != "") {
                        Opportunitynodelink.nodes.push({
                            id: ac.key, group: 3, rad: 6, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].projectdirector_image,
                            name: ac.values[0].projectdirector_name, NodeName: ac.values[0].projectdirector_name + " (PD)", jobtitleorCountry: "Project Director", userid: "700"
                            , phone: ac.values[0].projectdirector_Phone,
                            companycode: "",
                            region: ac.values[0].projectdirector_Region,
                            jobtitle: ac.values[0].projectdirector_Title,
                            accountcode: ac.values[0].projectdirector_AccountingCode
                        });
                    }
                })
                conData.forEach(function (cc, i) {
                    if (cc['projectdirector_userid'] != "")
                        Opportunitynodelink.links.push({ source: cc['Opportunityid'], target: cc['projectdirector_userid'], value: 1 });
                })

                projectmanager.forEach(function (ac, i) {
                    if (ac.key != "") {
                        Opportunitynodelink.nodes.push({
                            id: ac.key, group: 3, rad: 6, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].projectmanager_image,
                            name: ac.values[0].projectmanager_name, NodeName: ac.values[0].projectmanager_name + " (PM)", jobtitleorCountry: "Project Manager", userid: "700"
                            , phone: ac.values[0].projectmanager_Phone,
                            companycode: "",
                            region: ac.values[0].projectmanager_Region,
                            jobtitle: ac.values[0].projectmanager_Title,
                            accountcode: ac.values[0].projectmanager_AccountingCode
                        });
                    }
                })
                conData.forEach(function (cc, i) {
                    if (cc['projectmanager_userid'] != "")
                        Opportunitynodelink.links.push({ source: cc['Opportunityid'], target: cc['projectmanager_userid'], value: 1 });
                })

                businessadministrator.forEach(function (ac, i) {
                    if (ac.key != "") {
                        Opportunitynodelink.nodes.push({
                            id: ac.key, group: 3, rad: 6, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].businessadministrator_image,
                            name: ac.values[0].businessadministrator_name, NodeName: ac.values[0].businessadministrator_name + " (BA)", jobtitleorCountry: "Business Administrator", userid: "700"
                            , phone: ac.values[0].businessadministrator_Phone,
                            companycode: "",
                            region: ac.values[0].businessadministrator_Region,
                            jobtitle: ac.values[0].businessadministrator_Title,
                            accountcode: ac.values[0].businessadministrator_AccountingCode
                        });
                    }
                })
                conData.forEach(function (cc, i) {
                    if (cc['businessadministrator_userid'] != "")
                        Opportunitynodelink.links.push({ source: cc['Opportunityid'], target: cc['businessadministrator_userid'], value: 1 });
                })

                commercialmanager.forEach(function (ac, i) {
                    if (ac.key != "") {
                        Opportunitynodelink.nodes.push({
                            id: ac.key, group: 3, rad: 6, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].commercialmanager_image,
                            name: ac.values[0].commercialmanager_name, NodeName: ac.values[0].commercialmanager_name + " (CM)", jobtitleorCountry: "Commercial Manager", userid: "700"
                            , phone: ac.values[0].commercialmanager_Phone,
                            companycode: "",
                            region: ac.values[0].commercialmanager_Region,
                            jobtitle: ac.values[0].commercialmanager_Title,
                            accountcode: ac.values[0].commercialmanager_AccountingCode
                        });
                    }
                })
                conData.forEach(function (cc, i) {
                    if (cc['commercialmanager_userid'] != "")
                        Opportunitynodelink.links.push({ source: cc['Opportunityid'], target: cc['commercialmanager_userid'], value: 1 });
                })

                aruplocalcontact.forEach(function (ac, i) {
                    if (ac.key != "") {
                        Opportunitynodelink.nodes.push({
                            id: ac.key, group: 3, rad: 6, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].aruplocalcontact_image,
                            name: ac.values[0].aruplocalcontact_name, NodeName: ac.values[0].aruplocalcontact_name + " (ALC)", jobtitleorCountry: "Arup Local Contact", userid: "700"
                            , phone: ac.values[0].aruplocalcontact_Phone,
                            companycode: "",
                            region: ac.values[0].aruplocalcontact_Region,
                            jobtitle: ac.values[0].aruplocalcontact_Title,
                            accountcode: ac.values[0].aruplocalcontact_AccountingCode
                        });
                    }
                })
                conData.forEach(function (cc, i) {
                    if (cc['aruplocalcontact_userid'] != "")
                        Opportunitynodelink.links.push({ source: cc['Opportunityid'], target: cc['aruplocalcontact_userid'], value: 1 });
                })

                clientcontact.forEach(function (ac, i) {
                    if (ac.key != "") {
                        Opportunitynodelink.nodes.push({
                            id: ac.key, group: 3, rad: 4, imageUrl: GetGlobalContext().getClientUrl() + ac.values[0].clientcontact_image,
                            name: ac.values[0].clientcontact_name, NodeName: ac.values[0].clientcontact_name + " (CC)", phone: ac.values[0].clientcontact_phone, jobtitleorCountry: "Client Contact", userid: "700"
                            , phone: "",
                            companycode: "",
                            region: "",
                            jobtitle: "",
                            accountcode: ""
                        });
                    }
                })
                conData.forEach(function (cc, i) {
                    if (cc['clientcontact_userid'] != "")
                        Opportunitynodelink.links.push({ source: cc['Opportunityid'], target: cc['clientcontact_userid'], value: 1 });
                })
            }
        }
        function getToolTipsForOpportunities(d) {
            var tooltipcontent = "";
            if (d.userid == "100") {
                // organisations
                tooltipcontent += d.name;
                if (d.orgDepartment != "")
                    tooltipcontent += "<br/>" + d.orgDepartment;
                if (d.orgTownCity != "")
                    tooltipcontent += "<br/>" + d.orgTownCity;
                if (d.orgOpenOpptys != "")
                    tooltipcontent += "<br/> Open Opps : " + d.orgOpenOpptys;
            }
            else if (d.userid == "600") {
                tooltipcontent += d.name;
                tooltipcontent += "<br/>" + d.OpptyFees + " | " + d.OpptyBusiness + " | " + d.OpptyStatus

            }
            else {
                //users
                tooltipcontent += d.name + " | " + d.jobtitleorCountry + "<br/>";
                if (d.jobtitle != "")
                    tooltipcontent += "<br/>" + d.jobtitle
                if (d.accountcode != "" || d.region != "")
                    tooltipcontent += "<br/>" + d.accountcode + " | " + d.region;
                if (d.phone != "")
                    tooltipcontent += "<br/>" + d.phone;
            }

            return tooltipcontent;

        }
        function getToolTipsForConnectionMarketingLists(d) {
            var tooltipcontent = "";
            if (d.userid == "200") {
                //contacts
                tooltipcontent += d.name;
                if (d.jobtitleorCountry != "")
                    tooltipcontent += "<br/>" + d.jobtitleorCountry;
                if (d.contactDepartment != "") {
                    tooltipcontent += "<br/>" + d.contactDepartment;
                }
                else {
                    if (d.contactEmail != "")
                        tooltipcontent += "<br/>" + d.contactEmail;
                }
            }
            else if (d.userid == "500") {
                // activities
                tooltipcontent += d.name;
                if (d.activityowner != "")
                    tooltipcontent += "<br/>" + d.activityowner;
                if (d.activityduedate != "") {
                    tooltipcontent += "<br/> Due Date : " + d.activityduedate;
                }
                if (d.activitypriority != "") {
                    tooltipcontent += "<br/> " + d.activitypriority + " | " + d.activitystatus;
                }


            }
            else {
                //Marketinglist
                tooltipcontent += d.name;
                if (d.MLCampaign != "")
                    tooltipcontent += "<br/>" + d.MLCampaign;
                if (d.MLOwner != "")
                    tooltipcontent += "<br/>" + d.MLOwner + " | " + d.MLOffice;
            }

            return tooltipcontent;

        }
        function getToolTipsForConnection(d) {
            var tooltipcontent = "";
            if (d.userid == "100" || d.userid == "1000") {
                // organisations
                tooltipcontent += d.name;
                //if (d.orgDepartment != "")
                //    tooltipcontent += "<br/>" + d.orgDepartment;
                //if (d.orgTownCity != "")
                //    tooltipcontent += "<br/>" + d.orgTownCity;
                //if (d.orgOpenOpptys != "")
                //    tooltipcontent += "<br/> Open Opps : " + d.orgOpenOpptys;
            }
            else if (d.userid == "200") {
                //contacts
                tooltipcontent += d.name;
                //if (d.jobtitleorCountry != "")
                //    tooltipcontent += "<br/>" + d.jobtitleorCountry;
                //if (d.contactDepartment != "") {
                //    tooltipcontent += "<br/>" + d.contactDepartment;
                //}
                //else {
                //    if (d.contactEmail != "")
                //        tooltipcontent += "<br/>" + d.contactEmail;
                //}
            }
            else {
                //users
                if (d.empstatus != undefined && d.empstatus != null && d.empstatus == '770000001') {
                    tooltipcontent += d.name + " | Ex-Employee";
                    //if (d.userTitle != "")
                    //    tooltipcontent += "<br/>" + d.userTitle;
                    //if (d.userAccountingCode != "")
                    //    tooltipcontent += "<br/>" + d.userCompanyCode + "-" + d.userAccountingCode + " | " + d.userRegion;
                }
                else {
                    tooltipcontent += d.name;
                    //if (d.userTitle != "")
                    //    tooltipcontent += "<br/>" + d.userTitle
                    //if (d.userAccountingCode != "")
                    //    tooltipcontent += "<br/>" + d.userCompanyCode + "-" + d.userAccountingCode + " | " + d.userRegion;
                    //if (d.phone != "" || d.userRegion != "")
                    //    tooltipcontent += "<br/>" + d.phone;
                }




            }

            return tooltipcontent;

        }
        function InitializeHomeButtonClick() {
        }
        ////
        function onclickHomeButton() {
            ////debugger;
            $('#chkContacts').prop('checked', false);
            $('#chkActivities').prop('checked', false);
            $('#chkActivities').prop('disabled', true);
            initialContactList = '';
            initialOrgList = '';
            window.location.reload();
        }

        function oncheckContacts() {
            ////debugger;
            //if (ConnectionContactData != "") {
            var chkAct = $("#chkContacts").is(':checked') ? true : false;
            InititializeGraphDivs();
            //InitializeHomeButtonClick();
            if (chkAct) {
                DrawMatrixForceLayoutContacts("#connectionMatrix", ConnectionContactData, true, chkAct);
                $('#chkActivities').prop('checked', false);
                $('#chkActivities').prop('disabled', false);
                $('#chkCSuiteAndDecisionMakers').prop('checked', false);
                //$('#chkCSuite').prop('checked', false);
            }
            else {
                OnLoad();
                $('#chkActivities').prop('checked', false);
                $('#chkActivities').prop('disabled', false);
            }
            //}
        }

        function oncheckCSuiteAndDecisionMakers() {
            ////debugger;
            var chkAct = $("#chkCSuiteAndDecisionMakers").is(':checked') ? true : false;
            InititializeGraphDivs();
            if (chkAct) {
                DrawMatrixForceLayoutCSuiteAndDecisionMakers("#connectionMatrix", ConnectionContactData, true, chkAct);
                $('#chkActivities').prop('checked', false);
                $('#chkActivities').prop('disabled', false);
                $('#chkContacts').prop('checked', false);
                //$('#chkCSuite').prop('checked', false);
            }
            else {
                OnLoad();
                $('#chkActivities').prop('checked', false);
                $('#chkActivities').prop('disabled', false);
            }
        }

        function oncheckDecisionMakers() {
            ////debugger;
            var chkAct = $("#chkDecisionMakers").is(':checked') ? true : false;
            InititializeGraphDivs();
            if (chkAct) {
                DrawMatrixForceLayoutDecisionMakers("#connectionMatrix", ConnectionContactData, true, chkAct);
                $('#chkActivities').prop('checked', false);
                $('#chkActivities').prop('disabled', false);
                $('#chkContacts').prop('checked', false);
                $('#chkCSuite').prop('checked', false);
            }
            else {
                OnLoad();
                $('#chkActivities').prop('checked', false);
                $('#chkActivities').prop('disabled', true);
            }
        }

        function oncheckCSuite() {
            ////debugger;
            var chkAct = $("#chkCSuite").is(':checked') ? true : false;
            InititializeGraphDivs();
            if (chkAct) {
                DrawMatrixForceLayoutCSuite("#connectionMatrix", ConnectionContactData, true, chkAct);
                $('#chkActivities').prop('checked', false);
                $('#chkActivities').prop('disabled', false);
                $('#chkContacts').prop('checked', false);
                $('#chkDecisionMakers').prop('checked', false);
            }
            else {
                OnLoad();
                $('#chkActivities').prop('checked', false);
                $('#chkActivities').prop('disabled', true);
            }
        }

        function oncheckActivities() {
            ////debugger;
            InititializeGraphDivs();
            //InitializeHomeButtonClick();
            var chkAct = $("#chkActivities").is(':checked') ? true : false;
            if (chkAct) {
                DrawMatrixForceLayoutActivities("#connectionMatrix", ConnectionContactData, true, chkAct);
            }
            else {
                var chkContacts = $("#chkContacts").is(':checked') ? true : false;
                var chkDecisionMakers = $("#chkDecisionMakers").is(':checked') ? true : false;
                var chkCSuite = $("#chkCSuite").is(':checked') ? true : false;
                if (chkContacts == true)
                    DrawMatrixForceLayoutContacts("#connectionMatrix", ConnectionContactData, true, chkContacts);
                else if (chkDecisionMakers == true)
                    DrawMatrixForceLayoutDecisionMakers("#connectionMatrix", ConnectionContactData, true, chkDecisionMakers);
                else if (chkCSuite == true)
                    DrawMatrixForceLayoutCSuite("#connectionMatrix", ConnectionContactData, true, chkCSuite);
            }
        }
    </script>
</body>
</html>